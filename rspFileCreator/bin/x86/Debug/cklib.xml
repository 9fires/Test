<?xml version="1.0"?>
<doc>
    <assembly>
        <name>cklib</name>
    </assembly>
    <members>
        <member name="T:cklib.Data.DataBase`12">
            <summary>
            データアクセス制御管理クラス
            </summary>
            <typeparam name="TRYSCOPE"></typeparam>
            <typeparam name="DBCONNECT"></typeparam>
            <typeparam name="DATACONFIG"></typeparam>
            <typeparam name="DATACONFIGELEMENT"></typeparam>
            <typeparam name="Data_Transaction"></typeparam>
            <typeparam name="DBConnection"></typeparam>
            <typeparam name="DBCommand"></typeparam>
            <typeparam name="DBTransaction"></typeparam>
            <typeparam name="DBParamater"></typeparam>
            <typeparam name="DBDataReader"></typeparam>
            <typeparam name="DBDataAdapter"></typeparam>
            <typeparam name="DBException"></typeparam>
        </member>
        <member name="F:cklib.Data.DataBase`12.SectionName">
            <summary>
            データベース設定セクション名
            </summary>
        </member>
        <member name="F:cklib.Data.DataBase`12.DBConfig">
            <summary>
            データベース設定
            </summary>
        </member>
        <member name="M:cklib.Data.DataBase`12.#ctor(System.String,System.String,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="SectionName">データベース名（設定のセクション名）</param>
            <param name="LogName">ログのキー名（設定のセクション名）</param>
            <param name="SqlLogName">SQLログのキー名（設定のセクション名）</param>
        </member>
        <member name="M:cklib.Data.DataBase`12.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="SectionName">データベース名（設定のセクション名）</param>
        </member>
        <member name="M:cklib.Data.DataBase`12.LoadConfig">
            <summary>
            設定のロード
            </summary>.e
        </member>
        <member name="M:cklib.Data.DataBase`12.NewTryScope">
            <summary>
            TryScopeインスタンスの生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Data.DataBase`12.CreateTryScopeInstance">
            <summary>
            インスタンス生成処理
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Data.DataBase`12.NewDBInstance">
            <summary>
            DB接続インスタンスを生成する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Data.DataBase`12.CreateDBInstnce">
            <summary>
            インスタンス生成処理
            </summary>
            <returns></returns>
        </member>
        <member name="T:cklib.Data.DataConfigElement">
            <summary>
            DB接続パラメータ定義
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.ConnectString">
            <summary>
            接続文字列
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.CommandTimeout">
            <summary>
            コマンドタイムアウト
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.EnableDeadLockRetry">
            <summary>
            デッドロックリトライ可否
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.DeadLockRetryCountLimit">
            <summary>
            デッドロックリトライ回数
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.DeadLockRetryDelayTime">
            <summary>
            デッドロックリトライディレイ時間(ミリ秒）
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.EnableTimeoutRetry">
            <summary>
            コマンドタイムアウトリトライ可否
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.TimoutRetryCountLimit">
            <summary>
            コマンドタイムアウトリトライ回数
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.TimeoutRetryDelayTime">
            <summary>
            コマンドタイムアウトディレイ時間(ミリ秒）
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.LogSectionName">
            <summary>
            ログマネージャキー名
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.SqlLogEnabled">
            <summary>
            SQLログ採取
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.SqlLogSectionName">
            <summary>
            SQLログマネージャキー名
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.LogLevel">
            <summary>
            SQLログレベル
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.SQLTraceInhConnectStringLogging">
            <summary>
            パラメータログ採取
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.ParameterLogEnabled">
            <summary>
            パラメータログ採取
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.ParameterLogDataSetEnabled">
            <summary>
            データセットパラメータログ採取
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.ParameterLogImageEnabled">
            <summary>
            Imageパラメータログ採取
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.ParameterLogTextEnabled">
            <summary>
            Textパラメータログ採取
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.ParameterLogStructureEnabled">
            <summary>
            structiureパラメータログ採取
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.ParameterMaskRegex">
            <summary>
            パラメータログ出力時に内容をマスクするパラメータ名判別用正規表現
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.ErrorLogCode">
            <summary>
            デフォルトのエラーログコード
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.DBConnectErrorLogCode">
            <summary>
            デフォルトのDBエラーログコード
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.DBErrorLogCode">
            <summary>
            デフォルトのDBエラーログコード
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.DeadLockErrorLogCode">
            <summary>
            デフォルトのデッドロックエラーログコード
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.DeadLockRetryOverErrorLogCode">
            <summary>
            デフォルトのデッドロックリトライオーバーログコード
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.TimeoutErrorLogCode">
            <summary>
            デフォルトのコマンドタイムアウトエラーログコード
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigElement.TimeoutRetryOverErrorLogCode">
            <summary>
            デフォルトのタイムアウトリトライオーバーログコード
            </summary>
        </member>
        <member name="T:cklib.Data.DataConfigSection`1">
            <summary>
            データ
            </summary>
        </member>
        <member name="M:cklib.Data.DataConfigSection`1.#ctor">
            <summary>
            デフォルトコンストラクタ
            </summary>
        </member>
        <member name="F:cklib.Data.DataConfigSection`1.DataConfigElementName">
            <summary>
            DataConfigエレメント名
            </summary>
        </member>
        <member name="P:cklib.Data.DataConfigSection`1.Common">
            <summary>
            DataConfigエレメント
            </summary>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataBase`1.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="SectionName">セクション名</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataBase`1.#ctor(System.String,System.String,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="SectionName">セクション名</param>
            <param name="SystemLogSectionName">ログのキー名（設定のセクション名）</param>
            <param name="SqlLogSecitonName">SQLログのキー名（設定のセクション名）</param>
        </member>
        <member name="T:cklib.Data.Odbc.OdbcDataConfigSection">
            <summary>
            Odbc設定セクション定義
            </summary>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataConfigSection.#ctor">
            <summary>
            デフォルトコンストラクタ
            </summary>
        </member>
        <member name="T:cklib.Data.Odbc.OdbcDataAdapterInstance">
            <summary>
            SqlServersDB接続操作ラッパークラス<BR/>
            SqlDataAdapterを利用するための拡張
            </summary>
            <remarks>
            自動生成されたDataSetコードとの共存を行うため為の補助クラスです<br/>
            自動生成されたAdapterラッパーコードを使用せず当該ライブラリを使用することで、
            設定共有、トランザクション管理の自動化、SQLログの出力等<see cref="T:cklib.Data.Odbc.OdbcDataInstance"/>の機能が利用できます。<br/>
            自動生成されたAdapterクラスのpartialクラスを生成して、独自のコンストラクタまたは、
            初期化メソッドを追加し当クラスのsqlDataAdapterを初期化することで自動生成されたSqlステートメント、
            ORマッピングされたDataTable、DataRowsの派生クラスを利用できます。
            </remarks>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataAdapterInstance.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataAdapterInstance.#ctor(System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataAdapterInstance.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataAdapterInstance.#ctor(System.String,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataAdapterInstance.#ctor(System.String,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataAdapterInstance.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataAdapterInstance.#ctor(System.Data.Odbc.OdbcDataAdapter)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataAdapterInstance.#ctor(System.Data.Odbc.OdbcDataAdapter,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataAdapterInstance.#ctor(System.Data.Odbc.OdbcDataAdapter,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataAdapterInstance.#ctor(System.Data.Odbc.OdbcDataAdapter,System.String,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataAdapterInstance.#ctor(System.Data.Odbc.OdbcDataAdapter,System.String,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataAdapterInstance.#ctor(System.Data.Odbc.OdbcDataAdapter,System.String,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataAdapterInstance.#ctor(cklib.Data.Odbc.OdbcDataConfigSection)">
            <summary>
            コンストラクタ
            </summary>
            <param name="config">設定情報</param>
        </member>
        <member name="T:cklib.Data.Odbc.OdbcDataInstance">
            <summary>
            Odbc接続操作ラッパークラス
            </summary>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataInstance.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataInstance.#ctor(System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataInstance.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataInstance.#ctor(System.String,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataInstance.#ctor(System.String,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataInstance.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataInstance.#ctor(System.Data.Odbc.OdbcDataAdapter)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataInstance.#ctor(System.Data.Odbc.OdbcDataAdapter,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataInstance.#ctor(System.Data.Odbc.OdbcDataAdapter,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataInstance.#ctor(System.Data.Odbc.OdbcDataAdapter,System.String,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataInstance.#ctor(System.Data.Odbc.OdbcDataAdapter,System.String,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataInstance.#ctor(System.Data.Odbc.OdbcDataAdapter,System.String,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataInstance.#ctor(cklib.Data.Odbc.OdbcDataConfigSection)">
            <summary>
            コンストラクタ
            </summary>
            <param name="config">設定情報</param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataInstance.CreateDBConnection(System.String)">
            <summary>
            接続インスタンスを生成
            </summary>
            <param name="DBConnectString">接続文字列</param>
            <returns>生成されたインスタンス</returns>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataInstance.CreateDBAdapter">
             <summary>
            アダプタインスタンスを生成する
             </summary>
             <returns></returns>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataInstance.m_dbConnection_InfoMessage(System.Object,System.Data.Odbc.OdbcInfoMessageEventArgs)">
            <summary>
            SQLメッセージ
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataInstance.CreateDBTransaction(System.Data.Odbc.OdbcTransaction,cklib.Data.IDataInstanceInnerLogging)">
            <summary>
            トランザクションクラスインスタンス生成
            </summary>
            <param name="dbTransaction"></param>
            <param name="dbInstance"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataInstance.QueryParameterToLogStringItem(System.Text.StringBuilder@,System.Data.Odbc.OdbcParameter,System.Object)">
            <summary>
            ログ編集用にSqlパラメータを文字列バッファに編集して格納する。
            </summary>
            <param name="stb"></param>
            <param name="var"></param>
            <param name="Value"></param>
        </member>
        <member name="T:cklib.Data.Odbc.OdbcDataTransaction">
            <summary>
            SqlServerDBTransactionラッパークラス
            </summary>
            <remarks>
            Commitされていない場合インスタンス解放時にロールバックされる<br/>
            </remarks>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataTransaction.#ctor(System.Data.Odbc.OdbcTransaction,cklib.Data.IDataInstanceInnerLogging)">
            <summary>
            コンストラクタ
            </summary>
            <param name="Transaction">生成済みのトランザクションインスタンス</param>
            <param name="dbInstance">DB接続インスタンス</param>
        </member>
        <member name="T:cklib.Data.Odbc.OdbcDataTryScope`1">
            <summary>
            DB処理スコープ制御
            </summary>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataTryScope`1.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataTryScope`1.IsDeadLock(System.Data.Odbc.OdbcException)">
            <summary>
            デッドロック判定
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcDataTryScope`1.IsTimeout(System.Data.Odbc.OdbcException)">
            <summary>
            タイムアウト判定
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="T:cklib.Data.Odbc.OdbcExceptionFormater">
            <summary>
            OdbcExceptionフォーマッタ
            </summary>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcExceptionFormater.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Data.Odbc.OdbcExceptionFormater.Format(System.Exception)">
            <summary>
            書式化
            </summary>
            <param name="exp">例外インスタンス</param>
            <returns>書式化データ</returns>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataBase`1.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="SectionName">セクション名</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataBase`1.#ctor(System.String,System.String,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="SectionName">セクション名</param>
            <param name="SystemLogSectionName">ログのキー名（設定のセクション名）</param>
            <param name="SqlLogSecitonName">SQLログのキー名（設定のセクション名）</param>
        </member>
        <member name="T:cklib.Data.OleDb.OleDbDataConfigSection">
             <summary>
            OLEDB設定セクション定義
             </summary>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataConfigSection.#ctor">
            <summary>
            デフォルトコンストラクタ
            </summary>
        </member>
        <member name="T:cklib.Data.OleDb.OleDbDataAdapterInstance">
            <summary>
            SqlServersDB接続操作ラッパークラス<BR/>
            SqlDataAdapterを利用するための拡張
            </summary>
            <remarks>
            自動生成されたDataSetコードとの共存を行うため為の補助クラスです<br/>
            自動生成されたAdapterラッパーコードを使用せず当該ライブラリを使用することで、
            設定共有、トランザクション管理の自動化、SQLログの出力等<see cref="T:cklib.Data.OleDb.OleDbDataInstance"/>の機能が利用できます。<br/>
            自動生成されたAdapterクラスのpartialクラスを生成して、独自のコンストラクタまたは、
            初期化メソッドを追加し当クラスのsqlDataAdapterを初期化することで自動生成されたSqlステートメント、
            ORマッピングされたDataTable、DataRowsの派生クラスを利用できます。
            </remarks>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataAdapterInstance.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataAdapterInstance.#ctor(System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataAdapterInstance.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataAdapterInstance.#ctor(System.String,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataAdapterInstance.#ctor(System.String,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataAdapterInstance.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataAdapterInstance.#ctor(System.Data.OleDb.OleDbDataAdapter)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataAdapterInstance.#ctor(System.Data.OleDb.OleDbDataAdapter,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataAdapterInstance.#ctor(System.Data.OleDb.OleDbDataAdapter,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataAdapterInstance.#ctor(System.Data.OleDb.OleDbDataAdapter,System.String,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataAdapterInstance.#ctor(System.Data.OleDb.OleDbDataAdapter,System.String,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataAdapterInstance.#ctor(System.Data.OleDb.OleDbDataAdapter,System.String,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataAdapterInstance.#ctor(cklib.Data.OleDb.OleDbDataConfigSection)">
            <summary>
            コンストラクタ
            </summary>
            <param name="config">設定情報</param>
        </member>
        <member name="T:cklib.Data.OleDb.OleDbDataInstance">
            <summary>
            OleDb接続操作ラッパークラス
            </summary>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataInstance.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataInstance.#ctor(System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataInstance.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataInstance.#ctor(System.String,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataInstance.#ctor(System.String,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataInstance.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataInstance.#ctor(System.Data.OleDb.OleDbDataAdapter)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataInstance.#ctor(System.Data.OleDb.OleDbDataAdapter,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataInstance.#ctor(System.Data.OleDb.OleDbDataAdapter,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataInstance.#ctor(System.Data.OleDb.OleDbDataAdapter,System.String,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataInstance.#ctor(System.Data.OleDb.OleDbDataAdapter,System.String,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataInstance.#ctor(System.Data.OleDb.OleDbDataAdapter,System.String,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataInstance.#ctor(cklib.Data.OleDb.OleDbDataConfigSection)">
            <summary>
            コンストラクタ
            </summary>
            <param name="config">設定情報</param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataInstance.CreateDBConnection(System.String)">
            <summary>
            接続インスタンスを生成
            </summary>
            <param name="DBConnectString">接続文字列</param>
            <returns>生成されたインスタンス</returns>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataInstance.CreateDBAdapter">
             <summary>
            アダプタインスタンスを生成する
             </summary>
             <returns></returns>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataInstance.m_dbConnection_InfoMessage(System.Object,System.Data.OleDb.OleDbInfoMessageEventArgs)">
            <summary>
            SQLメッセージ
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataInstance.CreateDBTransaction(System.Data.OleDb.OleDbTransaction,cklib.Data.IDataInstanceInnerLogging)">
            <summary>
            トランザクションクラスインスタンス生成
            </summary>
            <param name="dbTransaction"></param>
            <param name="dbInstance"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataInstance.QueryParameterToLogStringItem(System.Text.StringBuilder@,System.Data.OleDb.OleDbParameter,System.Object)">
            <summary>
            ログ編集用にSqlパラメータを文字列バッファに編集して格納する。
            </summary>
            <param name="stb"></param>
            <param name="var"></param>
            <param name="Value"></param>
        </member>
        <member name="T:cklib.Data.OleDb.OleDbDataTransaction">
            <summary>
            SqlServerDBTransactionラッパークラス
            </summary>
            <remarks>
            Commitされていない場合インスタンス解放時にロールバックされる<br/>
            </remarks>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataTransaction.#ctor(System.Data.OleDb.OleDbTransaction,cklib.Data.IDataInstanceInnerLogging)">
            <summary>
            コンストラクタ
            </summary>
            <param name="Transaction">生成済みのトランザクションインスタンス</param>
            <param name="dbInstance">DB接続インスタンス</param>
        </member>
        <member name="T:cklib.Data.OleDb.OleDbDataTryScope`1">
            <summary>
            DB処理スコープ制御
            </summary>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataTryScope`1.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataTryScope`1.IsDeadLock(System.Data.OleDb.OleDbException)">
            <summary>
            デッドロック判定
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbDataTryScope`1.IsTimeout(System.Data.OleDb.OleDbException)">
            <summary>
            タイムアウト判定
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="T:cklib.Data.OleDb.OleDbExceptionFormater">
            <summary>
            OleDbExceptionフォーマッタ
            </summary>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbExceptionFormater.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Data.OleDb.OleDbExceptionFormater.Format(System.Exception)">
            <summary>
            書式化
            </summary>
            <param name="exp">例外インスタンス</param>
            <returns>書式化データ</returns>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataBase`1.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="SectionName">セクション名</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataBase`1.#ctor(System.String,System.String,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="SectionName">セクション名</param>
            <param name="SystemLogSectionName">ログのキー名（設定のセクション名）</param>
            <param name="SqlLogSecitonName">SQLログのキー名（設定のセクション名）</param>
        </member>
        <member name="T:cklib.Data.Sql.SqlDataConfigSection">
            <summary>
            SQL設定セクション定義
            </summary>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataConfigSection.#ctor">
            <summary>
            デフォルトコンストラクタ
            </summary>
        </member>
        <member name="T:cklib.Data.Sql.SqlDataAdapterInstance">
            <summary>
            SqlServersDB接続操作ラッパークラス<BR/>
            SqlDataAdapterを利用するための拡張
            </summary>
            <remarks>
            自動生成されたDataSetコードとの共存を行うため為の補助クラスです<br/>
            自動生成されたAdapterラッパーコードを使用せず当該ライブラリを使用することで、
            設定共有、トランザクション管理の自動化、SQLログの出力等<see cref="T:cklib.Data.Sql.SqlDataInstance"/>の機能が利用できます。<br/>
            自動生成されたAdapterクラスのpartialクラスを生成して、独自のコンストラクタまたは、
            初期化メソッドを追加し当クラスのsqlDataAdapterを初期化することで自動生成されたSqlステートメント、
            ORマッピングされたDataTable、DataRowsの派生クラスを利用できます。
            </remarks>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataAdapterInstance.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataAdapterInstance.#ctor(System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataAdapterInstance.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataAdapterInstance.#ctor(System.String,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataAdapterInstance.#ctor(System.String,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataAdapterInstance.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataAdapterInstance.#ctor(System.Data.SqlClient.SqlDataAdapter)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataAdapterInstance.#ctor(System.Data.SqlClient.SqlDataAdapter,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataAdapterInstance.#ctor(System.Data.SqlClient.SqlDataAdapter,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataAdapterInstance.#ctor(System.Data.SqlClient.SqlDataAdapter,System.String,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataAdapterInstance.#ctor(System.Data.SqlClient.SqlDataAdapter,System.String,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataAdapterInstance.#ctor(System.Data.SqlClient.SqlDataAdapter,System.String,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataAdapterInstance.#ctor(cklib.Data.Sql.SqlDataConfigSection)">
            <summary>
            コンストラクタ
            </summary>
            <param name="config">設定情報</param>
        </member>
        <member name="T:cklib.Data.Sql.SqlDataInstance">
            <summary>
            SqlServersDB接続操作ラッパークラス
            </summary>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataInstance.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataInstance.#ctor(System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataInstance.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataInstance.#ctor(System.String,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataInstance.#ctor(System.String,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataInstance.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataInstance.#ctor(System.Data.SqlClient.SqlDataAdapter)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataInstance.#ctor(System.Data.SqlClient.SqlDataAdapter,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataInstance.#ctor(System.Data.SqlClient.SqlDataAdapter,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataInstance.#ctor(System.Data.SqlClient.SqlDataAdapter,System.String,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataInstance.#ctor(System.Data.SqlClient.SqlDataAdapter,System.String,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataInstance.#ctor(System.Data.SqlClient.SqlDataAdapter,System.String,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataInstance.#ctor(cklib.Data.Sql.SqlDataConfigSection)">
            <summary>
            コンストラクタ
            </summary>
            <param name="config">設定情報</param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataInstance.CreateDBConnection(System.String)">
            <summary>
            接続インスタンスを生成
            </summary>
            <param name="DBConnectString">接続文字列</param>
            <returns>生成されたインスタンス</returns>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataInstance.CreateDBAdapter">
             <summary>
            アダプタインスタンスを生成する
             </summary>
             <returns></returns>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataInstance.m_sqlConnection_InfoMessage(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
            <summary>
            SQLメッセージ
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataInstance.CreateDBTransaction(System.Data.SqlClient.SqlTransaction,cklib.Data.IDataInstanceInnerLogging)">
            <summary>
            トランザクションクラスインスタンス生成
            </summary>
            <param name="dbTransaction"></param>
            <param name="dbInstance"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataInstance.ExecuteXmlReader">
            <summary>
            ExecuteXmlReaderのラッパー
            </summary>
            <returns>XmlReader</returns>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataInstance.QueryParameterToLogStringItem(System.Text.StringBuilder@,System.Data.SqlClient.SqlParameter,System.Object)">
            <summary>
            ログ編集用にSqlパラメータを文字列バッファに編集して格納する。
            </summary>
            <param name="stb"></param>
            <param name="var"></param>
            <param name="Value"></param>
        </member>
        <member name="T:cklib.Data.Sql.SqlDataTransaction">
            <summary>
            SqlServerDBTransactionラッパークラス
            </summary>
            <remarks>
            Commitされていない場合インスタンス解放時にロールバックされる<br/>
            </remarks>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataTransaction.#ctor(System.Data.SqlClient.SqlTransaction,cklib.Data.IDataInstanceInnerLogging)">
            <summary>
            コンストラクタ
            </summary>
            <param name="Transaction">生成済みのトランザクションインスタンス</param>
            <param name="dbInstance">DB接続インスタンス</param>
        </member>
        <member name="T:cklib.Data.Sql.SqlDataTryScope`1">
            <summary>
            DB処理スコープ制御
            </summary>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataTryScope`1.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataTryScope`1.IsDeadLock(System.Data.SqlClient.SqlException)">
            <summary>
            デッドロック判定
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Data.Sql.SqlDataTryScope`1.IsTimeout(System.Data.SqlClient.SqlException)">
            <summary>
            タイムアウト判定
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="T:cklib.Data.IDataInstanceInnerLogging">
            <summary>
            DataInstanceロギングインターフェース
            </summary>
        </member>
        <member name="M:cklib.Data.IDataInstanceInnerLogging.InnerLogExp(System.Int32,cklib.Data.DataTraceLogCode,System.String,System.Exception,System.Object[])">
            <summary>
            内部イベントのログ
            </summary>
            <param name="depth">スタックトレースの深さ</param>
            <param name="Code">ログコード</param>
            <param name="msg">メッセージ</param>
            <param name="exp">例外情報</param>
            <param name="prms">その他パラメータ</param>
        </member>
        <member name="M:cklib.Data.IDataInstanceInnerLogging.InnerLog(System.Int32,cklib.Data.DataTraceLogCode,System.String,System.Object[])">
            <summary>
            内部イベントのログ
            </summary>
            <param name="depth">スタックトレースの深さ</param>
            <param name="Code">ログコード</param>
            <param name="msg">メッセージ</param>
            <param name="prms">その他パラメータ</param>
        </member>
        <member name="T:cklib.Data.IDataInstanceTransaction`1">
            <summary>
            トランザクション関連のインターフェース
            </summary>
        </member>
        <member name="P:cklib.Data.IDataInstanceTransaction`1.DataTransaction">
            <summary>
            DBトランザクションインスタンス
            </summary>
        </member>
        <member name="M:cklib.Data.IDataInstanceTransaction`1.BeginDBTransaction(System.Data.IsolationLevel)">
            <summary>
            トランザクションの開始
            </summary>
            <param name="iso">ロックレベルの指定</param>
            <returns>DBTransactionインスタンス</returns>
        </member>
        <member name="M:cklib.Data.IDataInstanceTransaction`1.BeginDBTransaction">
            <summary>
            トランザクションの開始
            </summary>
            <returns>DBTransactionインスタンス</returns>
        </member>
        <member name="T:cklib.Data.DataInstance`9">
            <summary>
            SqlServersDB接続操作ラッパークラス
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.m_dbConnection">
            <summary>
            接続インスタンス
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.dbConnection">
            <summary>
            接続インスタンス
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.m_dbCommand">
            <summary>
            DataCommandインスタンス
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.sqlCommand">
            <summary>
            DataCommandインスタンス
            </summary>
        </member>
        <member name="M:cklib.Data.DataInstance`9.SetupDataCommand(`2,`2)">
            <summary>
            SQLコマンドのセットアップ
            </summary>
            <param name="prmDataCommand">格納先のDataCommandインスタンス</param>
            <param name="value">新しいSQLCommandインスタンス</param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.SetupDataCommand(`2)">
            <summary>
            SQLコマンドのセットアップ
            </summary>
            <param name="prmDataCommand">格納先のDataCommandインスタンス</param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.ReleaseDataCommand(`2)">
            <summary>
            SQLコマンドの開放
            </summary>
            <param name="prmDataCommand">格納先のDataCommandインスタンス</param>
        </member>
        <member name="F:cklib.Data.DataInstance`9.m_DBTransaction">
            <summary>
            DBトランザクションインスタンス
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.DataTransaction">
            <summary>
            DBトランザクションインスタンス
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.m_DBCommandTimer">
            <summary>
            DataCommand実行タイマー
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.DBCommandTimer">
            <summary>
            DataCommand実行タイマー
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.InstanceID">
            <summary>
            インスタンスID
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.m_ShareDBCommandTimer">
            <summary>
            共通DBコマンドタイマー
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.ShareDBCommandTimer">
            <summary>
            共通DBコマンドタイマー
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.m_ShareDBConnectString">
            <summary>
            共通接続文字列
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.ShareDBConnectString">
            <summary>
            共通接続文字列
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.InstanceIDBase">
            <summary>
            インスタンス生成ベース
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.SQLTraceEnableDefault">
            <summary>
            SQLトレースログ許可
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.SQLTraceEnable">
            <summary>
            SQLトレースログ許可
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.DefaultSQLTraceManagerKey">
            <summary>
            SQLトレースログ採取マネージャーキー
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.SQLTraceManagerKey">
            <summary>
            SQLトレースログ採取マネージャーキー
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.DefaultSQLTraceLogLevel">
            <summary>
            SQLトレース採取用ログレベル
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.SQLTraceLogLevel">
            <summary>
            SQLトレース採取用ログレベル
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.DefaultSQLTraceInhConnectStringLogging">
            <summary>
            SQLトレース採取用接続文字列を記録しない
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.SQLTraceInhConnectStringLogging">
            <summary>
            SQLトレース採取用接続文字列を記録しない
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.traceLog">
            <summary>
            SQLトレースインスタンス
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.traceEditLock">
            <summary>
            トレース編集排他制御用オブジェクト
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.m_ParameterLogEnabled">
            <summary>
            パラメータログを採取する
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.m_ParameterLogDataSetEnabled">
            <summary>
            パラメータログにデータセットを採取する
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.m_ParameterLogImageEnabled">
            <summary>
            パラメータログにImageのダンプを採取する
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.m_ParameterLogTextEnabled">
            <summary>
            パラメータログにTextのダンプを採取する
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.m_ParameterLogStructureEnabled">
            <summary>
            パラメータログにStructureのダンプを採取する
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.m_ParameterMaskRegexDeine">
            <summary>
            パラメータログ出力時に内容をマスクするパラメータ名判別用正規表現
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.m_ParameterMaskRegex">
            <summary>
            パラメータログ出力時に内容をマスクするパラメータ名判別用正規表現インスタンス
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.ParameterLogEnabled">
            <summary>
            パラメータログを採取する
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.ParameterLogDataSetEnabled">
            <summary>
            パラメータログにデータセットを採取する
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.ParameterLogImageEnabled">
            <summary>
            パラメータログにImageのダンプを採取する
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.ParameterLogTextEnabled">
            <summary>
            パラメータログにTextのダンプを採取する
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.ParameterLogStructureEnabled">
            <summary>
            パラメータログにStructureのダンプを採取する
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.ParameterMaskRegex">
            <summary>
            パラメータログ出力時に内容をマスクするパラメータ名判別用正規表現
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.m_sqlDataAdapter">
            <summary>
            アダプタインスタンス
            </summary>
        </member>
        <member name="M:cklib.Data.DataInstance`9.CreateDBAdapter">
             <summary>
            アダプタインスタンスを生成する
             </summary>
             <returns></returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.InitializeAdapter">
            <summary>
            アダプタインスタンスを初期化する
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.sqlDataAdapter">
            <summary>
            アダプタインスタンス
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.SelectSqlCommand">
            <summary>
            Select用SqlCommandインスタンス
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.InsertSqlCommand">
            <summary>
            Insert用SqlCommandインスタンス
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.UpdateSqlCommand">
            <summary>
            Update用SqlCommandインスタンス
            </summary>
        </member>
        <member name="P:cklib.Data.DataInstance`9.DeleteSqlCommand">
            <summary>
            Delete用SqlCommandインスタンス
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.UpdateRowLogEnable">
            <summary>
            データセット更新時の詳細ログを採取する
            </summary>
        </member>
        <member name="M:cklib.Data.DataInstance`9.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Data.DataInstance`9.#ctor(System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="fCommandInitialize">DataCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.#ctor(System.String,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">DataCommand実行タイマー</param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.#ctor(System.String,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="fCommandInitialize">DataCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">DataCommand実行タイマー</param>
            <param name="fCommandInitialize">DataCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.#ctor(`6)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.#ctor(`6,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.#ctor(`6,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.#ctor(`6,System.String,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.#ctor(`6,System.String,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.#ctor(`6,System.String,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.Initialized">
            <summary>
            初期設定
            </summary>
        </member>
        <member name="M:cklib.Data.DataInstance`9.#ctor(`7)">
            <summary>
            コンストラクタ
            </summary>
            <param name="config">設定情報</param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.Finalize">
            <summary>
            ディストラクタ
            </summary>
        </member>
        <member name="F:cklib.Data.DataInstance`9.disposed">
            <summary>
            Dispose完了フラグ
            </summary>
        </member>
        <member name="M:cklib.Data.DataInstance`9.Dispose">
            <summary>
            Disposeメソッド
            </summary>
        </member>
        <member name="M:cklib.Data.DataInstance`9.Dispose(System.Boolean)">
            <summary>
            Dispose処理の実装
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.ReleseResorce">
            <summary>
            リソース解放処理
            </summary>
        </member>
        <member name="M:cklib.Data.DataInstance`9.ReleseManagedResorce">
            <summary>
            マネージドリソース解放処理（明示的呼び出し時のみ実行される）
            </summary>
        </member>
        <member name="M:cklib.Data.DataInstance`9.InnerLogExp(System.Int32,cklib.Data.DataTraceLogCode,System.String,System.Exception,System.Object[])">
            <summary>
            内部イベントのログ
            </summary>
            <param name="depth">スタックトレースの深さ</param>
            <param name="Code">ログコード</param>
            <param name="msg">メッセージ</param>
            <param name="exp">例外情報</param>
            <param name="prms">その他パラメータ</param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.InnerLog(System.Int32,cklib.Data.DataTraceLogCode,System.String,System.Object[])">
            <summary>
            内部イベントのログ
            </summary>
            <param name="depth">スタックトレースの深さ</param>
            <param name="Code">ログコード</param>
            <param name="msg">メッセージ</param>
            <param name="prms">その他パラメータ</param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.GetCallNestDepth">
            <summary>
            外部モジュールからの呼び出しネスト数を取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.LogStatement">
            <summary>
            要求ステートメントとパラメータをロギングする
            </summary>
        </member>
        <member name="M:cklib.Data.DataInstance`9.LogStatement(System.Int32)">
            <summary>
            要求ステートメントとパラメータをロギングする
            </summary>
        </member>
        <member name="M:cklib.Data.DataInstance`9.LogStatement(System.Int32,`2)">
            <summary>
            要求ステートメントとパラメータをロギングする
            </summary>
            <remarks>
            structure型をそのままログキューに渡した場合書式化する時点で
            データ元のDataTableが解放されてしまう可能性がある為文字列化を
            行ってキューを行う仕様に変更する
            これに伴いパラメータの一部をImageやDataTableのログを除外するオプションを追加1
            </remarks>
        </member>
        <member name="M:cklib.Data.DataInstance`9.QueryParameterToLogStringItem(System.Text.StringBuilder@,`4,System.Object)">
            <summary>
            ログ編集用にSqlパラメータを文字列バッファに編集して格納する。
            </summary>
            <param name="stb"></param>
            <param name="var"></param>
            <param name="Value"></param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.GetSqlConnection(System.String)">
            <summary>
            接続済みSqlConnectionインスタンスを取得する
            </summary>
            <returns>接続済みSqlConnectionインスタンス</returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.CreateDBConnection(System.String)">
            <summary>
            DB接続インスタンスを生成する
            </summary>
            <param name="DBConnectString"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.GetDataCommand">
            <summary>
            DataCommandインスタンスの取得
            </summary>
            <returns>DataCommandインスタンス</returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            トランザクションの開始
            </summary>
            <param name="iso">ロックレベルの指定</param>
            <returns>SqlTransactionインスタンス</returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.BeginTransaction">
            <summary>
            トランザクションの開始(規定レベル)
            </summary>
            <returns>SqlTransactionインスタンス</returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.BeginDBTransaction(System.Data.IsolationLevel)">
            <summary>
            トランザクションの開始
            </summary>
            <param name="iso">ロックレベルの指定</param>
            <returns>DBTransactionインスタンス</returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.CreateDBTransaction(`3,cklib.Data.IDataInstanceInnerLogging)">
            <summary>
            トランザクションクラスインスタンス生成
            </summary>
            <param name="dbTransaction"></param>
            <param name="dbInstanc"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.BeginDBTransaction">
            <summary>
            トランザクションの開始(規定レベル)
            </summary>
            <returns>SqlTransactionインスタンス</returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.ExecuteNonQuery">
            <summary>
            ExecuteNonQueryのラッパーメソッド
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.ExecuteScalar">
            <summary>
            ExecuteScalarのラッパーメソッド
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.ExecuteReader">
            <summary>
            ExecuteReaderのラッパーメソッド
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            ExecuteReaderのラッパーメソッド
            </summary>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.ReleaseSqlResource">
            <summary>
            SQL接続リソースの開放
            </summary>
        </member>
        <member name="M:cklib.Data.DataInstance`9.Fill(System.Int32,System.Data.DataTable)">
            <summary>
            DataTableにデータをロードする
            </summary>
            <param name="depth">呼び出し段数</param>
            <param name="dt">データテーブル</param>
            <returns>正常に追加または更新された行数</returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.Fill(System.Data.DataTable)">
            <summary>
            DataTableにデータをロードする
            </summary>
            <returns>ロードされたデータセット</returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.GetData``1">
            <summary>
            指定したDataTableにデータをロードする
            </summary>
            <typeparam name="T">オーバーロードされたデータセットを指定</typeparam>
            <returns>ロードされたDataTable</returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.Fill(System.Data.DataSet)">
            <summary>
            データセットにデータをロードする
            </summary>
            <param name="ds">データセット</param>
            <returns>正常に追加または更新された行数</returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.Fill(System.Data.DataSet,System.String)">
            <summary>
            データセットにデータをロードする
            </summary>
            <param name="ds">データセット</param>
            <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
            <returns>正常に追加または更新された行数</returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.Update(System.Data.DataTable)">
            <summary>
            DataTableからテーブル更新
            </summary>
            <param name="dt">データテーブル</param>
            <returns>正常に追加または更新された行数</returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.Update(System.Data.DataSet,System.String)">
            <summary>
            DataSetからテーブル更新
            </summary>
            <param name="ds">DataSet</param>
            <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
            <returns>正常に追加または更新された行数</returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.Update(System.Data.DataSet)">
            <summary>
            DataSetからテーブル更新
            </summary>
            <param name="ds">DataSet</param>
            <returns>正常に追加または更新された行数</returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.Update(System.Data.DataRow[])">
            <summary>
            DataRowからテーブル更新
            </summary>
            <param name="drows">DataRowの配列</param>
            <returns>正常に追加または更新された行数</returns>
        </member>
        <member name="M:cklib.Data.DataInstance`9.LogAdapterUpdateStatement(System.Int32,System.Data.DataRow[])">
            <summary>
            Adapterの更新ステートメントのログを採取する
            </summary>
            <param name="depth">呼び出しのネスト段数</param>
            <param name="rows">行配列</param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.LogAdapterUpdateStatement(System.Int32,System.Data.DataRowCollection)">
            <summary>
            Adapterの更新ステートメントのログを採取する
            </summary>
            <param name="depth">呼び出しのネスト段数</param>
            <param name="rows">行コレクション</param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.LogAdapterUpdateStatement(System.Int32,System.Data.DataRow)">
            <summary>
            Adapterの更新ステートメントのログを採取する
            </summary>
            <param name="depth">呼び出しのネスト段数</param>
            <param name="row">行</param>
        </member>
        <member name="M:cklib.Data.DataInstance`9.PurgeNoUseParameters">
            <summary>
            パラメータ化クエリ未使用パラメータの削除
            </summary>
        </member>
        <member name="T:cklib.Data.IDataTransaction">
            <summary>
            SqlServerDBTransactionラッパークラス
            </summary>
            <remarks>
            Commitされていない場合インスタンス解放時にロールバックされる<br/>
            </remarks>
        </member>
        <member name="P:cklib.Data.IDataTransaction.IsCommited">
            <summary>
            コミット済み未済いフラグ
            </summary>
        </member>
        <member name="M:cklib.Data.IDataTransaction.Commit">
            <summary>
            トランザクションをコミットする
            </summary>
        </member>
        <member name="T:cklib.Data.DataTransaction`1">
            <summary>
            SqlServerDBTransactionラッパークラス
            </summary>
            <remarks>
            Commitされていない場合インスタンス解放時にロールバックされる<br/>
            </remarks>
        </member>
        <member name="F:cklib.Data.DataTransaction`1.m_Commited">
            <summary>
            コミット済み未済みフラグ
            </summary>
        </member>
        <member name="F:cklib.Data.DataTransaction`1.dbInstance">
            <summary>
            DBインスタンス
            </summary>
        </member>
        <member name="P:cklib.Data.DataTransaction`1.IsCommited">
            <summary>
            コミット済み未済いフラグ
            </summary>
        </member>
        <member name="F:cklib.Data.DataTransaction`1.Transaction">
            <summary>
            SQLトランザクションインスタンス
            </summary>
        </member>
        <member name="M:cklib.Data.DataTransaction`1.#ctor(`0,cklib.Data.IDataInstanceInnerLogging)">
            <summary>
            コンストラクタ
            </summary>
            <param name="Transaction">生成済みのトランザクションインスタンス</param>
            <param name="dbInstance">DB接続インスタンス</param>
        </member>
        <member name="M:cklib.Data.DataTransaction`1.Finalize">
            <summary>
            ディストラクタ
            </summary>
        </member>
        <member name="F:cklib.Data.DataTransaction`1.disposed">
            <summary>
            Dispose完了フラグ
            </summary>
        </member>
        <member name="M:cklib.Data.DataTransaction`1.Dispose">
            <summary>
            Disposeメソッド
            </summary>
        </member>
        <member name="M:cklib.Data.DataTransaction`1.Dispose(System.Boolean)">
            <summary>
            Dispose処理の実装
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:cklib.Data.DataTransaction`1.Commit">
            <summary>
            トランザクションをコミットする
            </summary>
        </member>
        <member name="T:cklib.Data.DataTraceLogCode">
            <summary>
            SQLトレース用ログコード
            </summary>
        </member>
        <member name="M:cklib.Data.DataTraceLogCode.#ctor(System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="LogCode"></param>
        </member>
        <member name="F:cklib.Data.DataTraceLogCode.Connect">
            <summary>
            接続
            </summary>
        </member>
        <member name="F:cklib.Data.DataTraceLogCode.BeginTransaction">
            <summary>
            トランザクション開始
            </summary>
        </member>
        <member name="F:cklib.Data.DataTraceLogCode.Statement">
            <summary>
            SQLステートメント
            </summary>
        </member>
        <member name="F:cklib.Data.DataTraceLogCode.Commit">
            <summary>
            トランザクションコミット
            </summary>
        </member>
        <member name="F:cklib.Data.DataTraceLogCode.RollBack">
            <summary>
            トランザクションロールバック
            </summary>
        </member>
        <member name="F:cklib.Data.DataTraceLogCode.Close">
            <summary>
            接続解放
            </summary>
        </member>
        <member name="F:cklib.Data.DataTraceLogCode.Error">
            <summary>
            エラー
            </summary>
        </member>
        <member name="F:cklib.Data.DataTraceLogCode.Message">
            <summary>
            メッセージ
            </summary>
        </member>
        <member name="T:cklib.Data.DataTryScope`3">
            <summary>
            DB処理スコープ制御
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.DefaultErrorLogCode">
            <summary>
            デフォルトのエラーログコード
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.DefaultDBConnectErrorLogCode">
            <summary>
            デフォルトのDBエラーログコード
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.DefaultDBErrorLogCode">
            <summary>
            デフォルトのDBエラーログコード
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.DefaultDeadLockErrorLogCode">
            <summary>
            デフォルトのデッドロックエラーログコード
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.DefaultDeadLockRetryOverErrorLogCode">
            <summary>
            デフォルトのデッドロックリトライオーバーログコード
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.DefaultTimeoutErrorLogCode">
            <summary>
            デフォルトのコマンドタイムアウトエラーログコード
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.DefaultTimeoutRetryOverErrorLogCode">
            <summary>
            デフォルトのタイムアウトリトライオーバーログコード
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.DefaultLogManagerKey">
            <summary>
            ログ採取マネージャーキー
            </summary>
        </member>
        <member name="P:cklib.Data.DataTryScope`3.ErrorLogCode">
            <summary>
            デフォルトのエラーログコード
            </summary>
        </member>
        <member name="P:cklib.Data.DataTryScope`3.DBConnectErrorLogCode">
            <summary>
            DBエラーログコード
            </summary>
        </member>
        <member name="P:cklib.Data.DataTryScope`3.DBErrorLogCode">
            <summary>
            デフォルトのDBエラーログコード
            </summary>
        </member>
        <member name="P:cklib.Data.DataTryScope`3.DeadLockErrorLogCode">
            <summary>
            デッドロックエラーログコード
            </summary>
        </member>
        <member name="P:cklib.Data.DataTryScope`3.DeadLockRetryOverErrorLogCode">
            <summary>
            デッドロックリトライオーバーログコード
            </summary>
        </member>
        <member name="P:cklib.Data.DataTryScope`3.TimeoutErrorLogCode">
            <summary>
            コマンドタイムアウトエラーログコード
            </summary>
        </member>
        <member name="P:cklib.Data.DataTryScope`3.TimeoutRetryOverErrorLogCode">
            <summary>
            タイムアウトリトライオーバーログコード
            </summary>
        </member>
        <member name="P:cklib.Data.DataTryScope`3.LogManagerKey">
            <summary>
            ログ採取マネージャーキー
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.log">
            <summary>
            ログインスタンス
            </summary>
        </member>
        <member name="M:cklib.Data.DataTryScope`3.SetLogParams(System.Object[])">
            <summary>
            ログに付与するパラメータ
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.LogParms">
            <summary>
            ログ埋め込みパラメータ
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.DefaultEnableDeadLockRetry">
            <summary>
            デッドロックリトライ可否
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.DefaultDeadLockRetryCountLimit">
            <summary>
            デッドロックリトライ回数
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.DefaultDeadLockRetryDelayTime">
            <summary>
            デッドロックリトライディレイ時間(ミリ秒）
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.DefaultEnableTimeoutRetry">
            <summary>
            コマンドタイムアウトリトライ可否
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.DefaultTimoutRetryCountLimit">
            <summary>
            コマンドタイムアウトリトライ回数
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.DefaultTimeoutRetryDelayTime">
            <summary>
            コマンドタイムアウトディレイ時間(ミリ秒）
            </summary>
        </member>
        <member name="P:cklib.Data.DataTryScope`3.EnableDeadLockRetry">
            <summary>
            デッドロックリトライ可否
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.m_EnableDeadLockRetry">
            <summary>
            デッドロックリトライ可否
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.m_EnableDeadLockRetrySetup">
            <summary>
            デッドロックリトライ可否個別設定有効
            </summary>
        </member>
        <member name="P:cklib.Data.DataTryScope`3.DeadLockRetryCountLimit">
            <summary>
            デッドロックリトライ回数
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.m_DeadLockRetryCountLimit">
            <summary>
            デッドロックリトライ回数
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.m_DeadLockRetryCount">
            <summary>
            デッドロックリトライ回数
            </summary>
        </member>
        <member name="P:cklib.Data.DataTryScope`3.DeadLockRetryDelayTime">
            <summary>
            デッドロックリトライディレイ時間(ミリ秒）
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.m_DeadLockRetryDelayTime">
            <summary>
            デッドロックリトライディレイ時間(ミリ秒）
            </summary>
        </member>
        <member name="P:cklib.Data.DataTryScope`3.EnableTimeoutRetry">
            <summary>
            コマンドタイムアウトリトライ可否
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.m_EnableTimeoutRetry">
            <summary>
            コマンドタイムアウトリトライ可否
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.m_EnableTimeoutRetrySetup">
            <summary>
            コマンドタイムアウトリトライ可否個別設定有効
            </summary>
        </member>
        <member name="P:cklib.Data.DataTryScope`3.TimoutRetryCountLimit">
            <summary>
            コマンドタイムアウトリトライ回数
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.m_TimoutRetryCountLimit">
            <summary>
            コマンドタイムアウトリトライ回数
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.m_TimoutRetryCount">
            <summary>
            コマンドタイムアウトリトライ回数
            </summary>
        </member>
        <member name="P:cklib.Data.DataTryScope`3.TimeoutRetryDelayTime">
            <summary>
            コマンドタイムアウトディレイ時間(ミリ秒）
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.m_TimeoutRetryDelayTime">
            <summary>
            コマンドタイムアウトディレイ時間(ミリ秒）
            </summary>
        </member>
        <member name="M:cklib.Data.DataTryScope`3.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Data.DataTryScope`3.InnerLog(System.Int32,cklib.Log.LogCodes,System.String,System.Object[])">
            <summary>
            内部イベントのログ
            </summary>
            <param name="depth">スタックトレースの深さ</param>
            <param name="Code">ログコード</param>
            <param name="msg">メッセージ</param>
            <param name="prms">その他パラメータ</param>
        </member>
        <member name="M:cklib.Data.DataTryScope`3.InnerLog(System.Int32,cklib.Log.LogCodes,System.String,System.Object[],System.Exception)">
            <summary>
            内部イベントのログ
            </summary>
            <param name="depth">スタックトレースの深さ</param>
            <param name="Code">ログコード</param>
            <param name="msg">メッセージ</param>
            <param name="prms">その他パラメータ</param>
        </member>
        <member name="M:cklib.Data.DataTryScope`3.GetCallNestDepth">
            <summary>
            外部モジュールからの呼び出しネスト数を取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Data.DataTryScope`3.GetLogMessage(cklib.Log.LogCodes)">
            <summary>
            ログコードに対応したエラーメッセージを取得する
            </summary>
            <param name="LocCode"></param>
            <returns></returns>
        </member>
        <member name="P:cklib.Data.DataTryScope`3.LastErrorInformation">
            <summary>
            エラー情報
            </summary>
        </member>
        <member name="T:cklib.Data.DataTryScope`3.ErrorHandlerType">
            <summary>
            Sqlエラー処理ハンドラ型
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.CallBackSqlConnectErrorHandler">
            <summary>
            Sql接続エラー処理ハンドラ
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.CallBackSqlErrorHandler">
            <summary>
            Sqlエラー処理ハンドラ
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.CallBackSqlNoRetryErrorHandler">
            <summary>
            Sqlエラー処理ハンドラ
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.CallDeadLockRetryHandler">
            <summary>
            デッドロックリトライ処理ハンドラ
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.CallDeadLockRetryOverHandler">
            <summary>
            デッドロックリトライオーバー処理ハンドラ
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.CallTimerRetryHandler">
            <summary>
            タイマーリトライ処理ハンドラ
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.CallTimerRetryOveHandler">
            <summary>
            タイマーリトライオーバー処理ハンドラ
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.CallBackErrorHandler">
            <summary>
            その他エラー処理ハンドラ
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.CallBackTransactionStartErrorHandler">
            <summary>
            トランザクション開始エラー処理ハンドラ
            </summary>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.CallBackCommitedHandler">
            <summary>
            Commited処理ハンドラ
            </summary>
        </member>
        <member name="M:cklib.Data.DataTryScope`3.SqlErrorHandler(`2)">
            <summary>
            Sqlエラー
            </summary>
            <param name="exp">SQL例外情報</param>
            <returns>リトライ処理続行</returns>
        </member>
        <member name="M:cklib.Data.DataTryScope`3.IsDeadLock(`2)">
            <summary>
            DB例外からデッドロックを判定
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Data.DataTryScope`3.IsTimeout(`2)">
            <summary>
            DB例外からタイムアウト例外を判定
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Data.DataTryScope`3.SqlNoRetryErrorHandler(`2)">
            <summary>
            リトライ対象外Sqlエラー
            </summary>
        </member>
        <member name="M:cklib.Data.DataTryScope`3.SqlConnectErrorHandler(System.Exception)">
            <summary>
            Sql接続エラー
            </summary>
            <param name="exp">SQL例外情報</param>
        </member>
        <member name="M:cklib.Data.DataTryScope`3.OtherErrorHandler(System.Exception)">
            <summary>
            その他エラー
            </summary>
            <param name="exp">SQL例外情報</param>
        </member>
        <member name="M:cklib.Data.DataTryScope`3.TransactionStartErrorHandler(System.Exception)">
            <summary>
            トランザクション開始エラー
            </summary>
            <param name="exp">SQL例外情報</param>
        </member>
        <member name="M:cklib.Data.DataTryScope`3.DBConnectInstance">
            <summary>
            DB接続インスタンスの初期化
            </summary>
            <returns></returns>
        </member>
        <member name="F:cklib.Data.DataTryScope`3.NewDBConnectInstance">
            <summary>
            DBインスタンス生成デリゲート
            </summary>
        </member>
        <member name="M:cklib.Data.DataTryScope`3.Transaction(`0,cklib.Framework.Func{`0,cklib.Data.DataTryScope{`0,`1,`2},System.Boolean},System.Data.IsolationLevel)">
            <summary>
            DBアクセススコープ
            </summary>
            <param name="db">db接続インスタンス</param>
            <param name="tryScope">DBトランザクションスコープ</param>
            <param name="iso">分離レベル</param>
            <returns>処理成否</returns>
        </member>
        <member name="M:cklib.Data.DataTryScope`3.Transaction(cklib.Framework.Func{`0,cklib.Data.DataTryScope{`0,`1,`2},System.Boolean},System.Data.IsolationLevel)">
            <summary>
            DBアクセススコープ
            </summary>
            <remarks>
            リトライをDB再接続から行う<br/>
            DB接続はデフォルトとなる。<br/>
            接続方法をカスタマイズする場合は<see cref="M:cklib.Data.DataTryScope`3.DBConnectInstance">DBConnectInstance</see>をオーバーライドする
            </remarks>
            <param name="tryScope">DBトランザクションスコープ</param>
            <param name="iso">分離レベル</param>
            <returns>処理成否</returns>
        </member>
        <member name="M:cklib.Data.DataTryScope`3.AutoTransaction(`0,cklib.Framework.Func{`0,cklib.Data.DataTryScope{`0,`1,`2},System.Boolean})">
            <summary>
            DBアクセススコープ
            </summary>
            <param name="db">db接続インスタンス</param>
            <param name="tryScope">DBトランザクションスコープ</param>
            <returns>処理成否</returns>
        </member>
        <member name="M:cklib.Data.DataTryScope`3.AutoTransaction(cklib.Framework.Func{`0,cklib.Data.DataTryScope{`0,`1,`2},System.Boolean})">
            <summary>
            DBアクセススコープ
            </summary>
            <remarks>
            リトライをDB再接続から行う<br/>
            DB接続はデフォルトとなる。<br/>
            接続方法をカスタマイズする場合は<see cref="M:cklib.Data.DataTryScope`3.DBConnectInstance">DBConnectInstance</see>をオーバーライドする
            </remarks>
            <param name="tryScope">DBトランザクションスコープ</param>
            <returns>処理成否</returns>
        </member>
        <member name="T:cklib.Framework.AppThreadBaseListStore">
            <summary>
            スレッド一覧格納クラス
            </summary>
        </member>
        <member name="M:cklib.Framework.AppThreadBaseListStore.Add``2(cklib.Framework.AppThreadBase{``0,``1})">
            <summary>
            スレッド一覧に追加
            </summary>
            <typeparam name="TEventCode"></typeparam>
            <typeparam name="TEventData"></typeparam>
            <param name="thread"></param>
        </member>
        <member name="M:cklib.Framework.AppThreadBaseListStore.Add``1(``0)">
            <summary>
            追加
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thread"></param>
        </member>
        <member name="M:cklib.Framework.AppThreadBaseListStore.Remove">
            <summary>
            削除
            </summary>
        </member>
        <member name="M:cklib.Framework.AppThreadBaseListStore.GetThead``2">
            <summary>
            参照
            </summary>
            <typeparam name="TEventCode"></typeparam>
            <typeparam name="TEventData"></typeparam>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBaseListStore.GetThead``1">
            <summary>
            参照
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:cklib.Framework.AppThreadBaseEventHandler`2">
            <summary>
            イベントハンドラ定義
            </summary>
        </member>
        <member name="T:cklib.Framework.AppThreadBaseEventFuncHandler`3">
            <summary>
            イベントハンドラ定義(Function型)
            </summary>
        </member>
        <member name="T:cklib.Framework.AppThreadBase`2">
            <summary>
            ckAppThread の概要の説明です。
            </summary>
            <remarks>
            更新:2008/02/26 Queue段数制御機能追加
            更新:2014/03/25 時間監視ユーティリティ機能追加
            </remarks>
        </member>
        <member name="F:cklib.Framework.AppThreadBase`2.dbglog">
            <summary>
            デバッグ用ログインスタンス
            </summary>
        </member>
        <member name="P:cklib.Framework.AppThreadBase`2.Name">
            <summary>
            このスレッドの名称
            </summary>
        </member>
        <member name="P:cklib.Framework.AppThreadBase`2.IsBackground">
            <summary>
            バックグラウンド実行
            </summary>
        </member>
        <member name="F:cklib.Framework.AppThreadBase`2.m_Background">
            <summary>
            バックグラウンド実行
            </summary>
        </member>
        <member name="E:cklib.Framework.AppThreadBase`2.IPCEvent">
            <summary>
            IPCイベントハンドラ
            </summary>
            <remarks>
            Form等QUEからデータを拾うと、ブロックされてしまう場合にQUEの変わりにデリゲートにより通知を行なうハンドラ。<br/>
            このハンドラが、設定されていないとFromQueにイベントが積まれてしまうので、スレッドを起動する前に設定すること。
            </remarks>
        </member>
        <member name="F:cklib.Framework.AppThreadBase`2.IPCControl">
            <summary>
            IPCインスタンス
            </summary>
        </member>
        <member name="T:cklib.Framework.AppThreadBase`2.EventTableItem">
            <summary>
            イベントテーブル項目定義
            </summary>
        </member>
        <member name="F:cklib.Framework.AppThreadBase`2.EventTableItem.EventID">
            <summary>
            イベントID
            </summary>
        </member>
        <member name="F:cklib.Framework.AppThreadBase`2.EventTableItem.Handle">
            <summary>
            イベントハンドル
            </summary>
        </member>
        <member name="F:cklib.Framework.AppThreadBase`2.EventTable">
            <summary>
            イベントテーブル
            </summary>
        </member>
        <member name="F:cklib.Framework.AppThreadBase`2.thread">
            <summary>
            スレッドインスタンス
            </summary>
        </member>
        <member name="F:cklib.Framework.AppThreadBase`2.evcStart">
            <summary>
            開始イベントコード
            </summary>
        </member>
        <member name="F:cklib.Framework.AppThreadBase`2.evcStop">
            <summary>
            停止イベントコード
            </summary>
        </member>
        <member name="F:cklib.Framework.AppThreadBase`2.evcData">
            <summary>
            データイベントコード
            </summary>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.#ctor(`0,`0,`0,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="evcStart">開始イベントコード</param>
            <param name="evcStop">停止イベントコード</param>
            <param name="evcData">データイベントコード</param>
            <param name="fUseFromQue">応答Queueの利用有無</param>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.CreateIPCControl(System.Boolean)">
            <summary>
            IPCインスタンスを生成する
            </summary>
            <param name="fUseFromQue">応答Queueの利用有無</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.Finalize">
            <summary>
            ディストラクタ
            </summary>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.Start">
            <summary>
            スレッドの起動
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.SetupThreadName">
            <summary>
            スレッド名を設定
            </summary>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.PreStart">
            <summary>
            スレッド開始直前設定処理
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.Stop">
            <summary>
            スレッドの停止
            </summary>
            <returns></returns>
        </member>
        <member name="P:cklib.Framework.AppThreadBase`2.IsAlive">
            <summary>
            スレッドの稼動生存状態を示す
            </summary>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.Stop(System.Int32)">
            <summary>
            スレッドの停止
            </summary>
            <param name="wTime">待ち時間(ミリ秒)</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.StopWait">
            <summary>
            スレッド停止待ち
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.StopWait(System.Int32)">
            <summary>
            スレッド停止待ち
            </summary>
            <param name="wTime">待ち時間(ミリ秒)</param>
            <returns></returns>
        </member>
        <member name="P:cklib.Framework.AppThreadBase`2.IPCQueueMaxSize">
            <summary>
            IPCQueueサイズ上限の設定取得
            </summary>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.IPCPut(`0)">
            <summary>
            スレッドにイベントを通知する
            </summary>
            <param name="ev">イベントコード</param>
            <returns>true/false</returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.IPCPut(`0,`1)">
            <summary>
            スレッドにイベントを通知する
            </summary>
            <param name="ev">イベントコード</param>
            <param name="data">イベントデータ</param>
            <returns>true/false</returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.IPCResp(`0)">
            <summary>
            スレッドからこのスレッドの監視処理に対してイベントを通知する
            </summary>
            <param name="ev">イベントコード</param>
            <returns>true/false</returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.IPCPut(cklib.Framework.EventDataTypeBase{`0,`1})">
            <summary>
            スレッドにイベントを通知する
            </summary>
            <param name="evd">イベント情報</param>
            <returns>true/false</returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.IPCResp(`0,`1)">
            <summary>
            スレッドからこのスレッドの監視処理に対してイベントを通知する
            </summary>
            <param name="ev">イベントコード</param>
            <param name="data">イベントデータ</param>
            <returns>true/false</returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.IPCEventCallback(System.IAsyncResult)">
            <summary>
            非同期デリゲート結果を受け取る
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.GetIPCEvent">
            <summary>
            スレッド発のイベントの取得
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.GetEventHandle">
            <summary>
            待機イベントハンドルを取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.AddEventList(System.Int32,System.Threading.WaitHandle)">
            <summary>
            待機イベントの追加
            </summary>
            <param name="id">イベントID</param>
            <param name="ev">待機ハンドル</param>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.RemoveEventList(System.Int32)">
            <summary>
            待機イベントの削除
            </summary>
            <param name="id">イベントID</param>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.GetEventHandles">
            <summary>
            待機イベントのハンドル配列の取得
            </summary>
            <returns>イベント配列</returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.EventWait(System.Int32)">
            <summary>
            イベントの待機
            </summary>
            <param name="WaitTime">待ち時間(ミリ秒)</param>
            <returns>イベント状態となったハンドルのEventTable上のインデックス</returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.GetTickCount">
            <summary>
            TickCountの取得
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.CalcWaitTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            待機時間の計算<br/>
            計算結果が、MinimumTimeより短い時間の場合は、計算結果をそうでなければ、MinimumTimeを返す
            </summary>
            <param name="StartTime">監視開始時間ミリ秒</param>
            <param name="WaitTime">待機時間ミリ秒</param>
            <param name="MinimumTime">他の監視時間ミリ秒</param>
            <returns>待機時間ミリ秒</returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.CalcWaitTime(System.Int32,System.Int32)">
            <summary>
            待機時間の計算
            </summary>
            <param name="StartTime">監視開始時間ミリ秒</param>
            <param name="WaitTime">待機時間ミリ秒</param>
            <returns>待機時間ミリ秒</returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.IsWaitTimeOut(System.Int32,System.Int32)">
            <summary>
            待機時間を経過したかの判定を行なう
            </summary>
            <param name="StartTime">監視開始時間ミリ秒</param>
            <param name="WaitTime">待機時間ミリ秒</param>
            <returns>待機時間を過ぎていればtrue</returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.AddTimerEvent(`0,System.Int32,System.Boolean)">
            <summary>
            タイマーイベント追加・更新
            </summary>
            <param name="code">EventCode</param>
            <param name="EventTime">タイムアウトまでの時間(ミリ秒)</param>
            <param name="Interval">インターバルタイマー</param>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.AddTimerEvent(`0,System.Int32,System.Object,System.Boolean)">
            <summary>
            タイマーイベント追加・更新
            </summary>
            <param name="code">EventCode</param>
            <param name="EventTime">タイムアウトまでの時間(ミリ秒)</param>
            <param name="Context">タイマーコンテキスト</param>
            <param name="Interval">インターバルタイマー</param>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.RemoveTimerEvent(`0)">
            <summary>
            タイマーイベント削除
            </summary>
            <param name="code">EventCode</param>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.EventMain(System.Int32)">
            <summary>
            イベントメインルーチン
            </summary>
            <param name="idx">EventTable上のインデックス</param>
            <returns>falseスレッドの終了</returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.AfterCheckEventMain(System.Int32)">
            <summary>
            スレッド終了後イベントメインルーチン
            </summary>
            <param name="idx">EventTable上のインデックス</param>
            <returns>falseスレッドの終了</returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.ThreadMain">
            <summary>
            スレッドメインルーチン
            </summary>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.ThreadIdleLoop">
            <summary>
            スレッドアイドルループ
            </summary>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.ThreadIdle(System.Int32)">
            <summary>
            スレッドアイドル処理
            </summary>
            <param name="WaitTime"></param>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.StopAfterRecovery">
            <summary>
            スレッド終了後の後処理
            </summary>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.AfterCheckEvent">
            <summary>
            スレッド終了後の残留イベント処理
            </summary>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.WaitError(System.Exception)">
            <summary>
            待機中の例外発生時の処理
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.EventError(System.Exception)">
            <summary>
            イベント処理中の例外発生時処理
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.ThreadError(System.Exception)">
            <summary>
            catchされていない例外発生時処理
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.InitInstanse">
            <summary>
            スレッドの初期化処理
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.PreIdle">
            <summary>
            スレッドの初期化後アイドル前処理
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.ExitInstance">
            <summary>
            スレッドの終了処理
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.BeforeIdle">
            <summary>
            イベント発生前処理
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.AfterIdle">
            <summary>
            イベント発生後処理
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.GetWaitTime">
            <summary>
            待機タイムアウト時間をミリ秒で返す
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.GetWaitTime(System.Int32,System.Int32)">
            <summary>
            待機タイムアウト時間をミリ秒で返す
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.EventTimeout">
            <summary>
            イベント発生タイムアウト時の処理
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.TimeoutCheck">
            <summary>
            タイムアウトチェック
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.Event(cklib.Framework.AppThreadBase{`0,`1}.EventTableItem)">
            <summary>
            イベント処理
            </summary>
            <param name="ei">イベント</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.EventParent(cklib.Framework.EventDataTypeBase{`0,`1})">
            <summary>
            親スレッドからのイベント
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.EventStart(cklib.Framework.EventDataTypeBase{`0,`1})">
            <summary>
            スレッド開始イベント（オプション　起動処理同期用)
            </summary>
            <param name="ed"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.EventStop(cklib.Framework.EventDataTypeBase{`0,`1})">
            <summary>
            スレッド停止イベント
            </summary>
            <param name="ed"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.EventData(cklib.Framework.EventDataTypeBase{`0,`1})">
            <summary>
            データイベント
            </summary>
            <param name="ed"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.EventUser(cklib.Framework.EventDataTypeBase{`0,`1})">
            <summary>
            ユーザー拡張イベント
            </summary>
            <param name="ed"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.AfterCheckEvent(cklib.Framework.AppThreadBase{`0,`1}.EventTableItem)">
            <summary>
            スレッド終了の残留イベント処理
            </summary>
            <param name="ei">イベント</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.AfterCheckEventParent(cklib.Framework.EventDataTypeBase{`0,`1})">
            <summary>
            スレッド終了の残留親スレッドからのイベント
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.AfterCheckEventStart(cklib.Framework.EventDataTypeBase{`0,`1})">
            <summary>
            スレッド終了の残留スレッド開始イベント（オプション　起動処理同期用)
            </summary>
            <param name="ed"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.AfterCheckEventStop(cklib.Framework.EventDataTypeBase{`0,`1})">
            <summary>
            スレッド終了の残留スレッド停止イベント
            </summary>
            <param name="ed"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.AfterCheckEventData(cklib.Framework.EventDataTypeBase{`0,`1})">
            <summary>
            スレッド終了の残留データイベント
            </summary>
            <param name="ed"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.AfterCheckEventUser(cklib.Framework.EventDataTypeBase{`0,`1})">
            <summary>
            スレッド終了の残留ユーザー拡張イベント
            </summary>
            <param name="ed"></param>
            <returns></returns>
        </member>
        <member name="F:cklib.Framework.AppThreadBase`2.disposed">
            <summary>
            Dispose完了フラグ
            </summary>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.Dispose">
            <summary>
            Disposeメソッド
            </summary>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.Dispose(System.Boolean)">
            <summary>
            Dispose処理の実装
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.ReleseResorce">
            <summary>
            リソース解放処理
            </summary>
        </member>
        <member name="M:cklib.Framework.AppThreadBase`2.ReleseManagedResorce">
            <summary>
            マネージドリソース解放処理（明示的呼び出し時のみ実行される）
            </summary>
        </member>
        <member name="T:cklib.Framework.EventDataTypeBase`2">
            <summary>
            イベントデータ構造体
            </summary>
        </member>
        <member name="F:cklib.Framework.EventDataTypeBase`2.EventCode">
            <summary>
            イベントコード
            </summary>
        </member>
        <member name="F:cklib.Framework.EventDataTypeBase`2.EventData">
            <summary>
            イベント付加情報
            </summary>
        </member>
        <member name="T:cklib.Framework.Action`1">
            <summary>
            デリゲート
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:cklib.Framework.Action`2">
            <summary>
            デリゲート
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
        </member>
        <member name="T:cklib.Framework.Action`3">
            <summary>
            デリゲート
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="t3"></param>
        </member>
        <member name="T:cklib.Framework.Action`4">
            <summary>
            デリゲート
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="t3"></param>
            <param name="t4"></param>
        </member>
        <member name="T:cklib.Framework.Action`5">
            <summary>
            デリゲート
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="t3"></param>
            <param name="t4"></param>
            <param name="t5"></param>
        </member>
        <member name="T:cklib.Framework.Func`2">
            <summary>
            デリゲート
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:cklib.Framework.Func`3">
            <summary>
            デリゲート
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="T:cklib.Framework.Func`4">
            <summary>
            デリゲート
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="t3"></param>
            <returns></returns>
        </member>
        <member name="T:cklib.Framework.Func`5">
            <summary>
            デリゲート
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="t3"></param>
            <param name="t4"></param>
            <returns></returns>
        </member>
        <member name="T:cklib.Framework.Func`6">
            <summary>
            デリゲート
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="t3"></param>
            <param name="t4"></param>
            <param name="t5"></param>
            <returns></returns>
        </member>
        <member name="T:cklib.Framework.IIPCControl`2">
            <summary>
            IPCインターフェース定義
            </summary>
            <typeparam name="TEventCode"></typeparam>
            <typeparam name="TEventData"></typeparam>
        </member>
        <member name="P:cklib.Framework.IIPCControl`2.IPCQueueMaxSize">
            <summary>
            IPCQueueサイズ上限の設定取得
            </summary>
        </member>
        <member name="M:cklib.Framework.IIPCControl`2.IPCPut(`0)">
            <summary>
            イベントを通知する
            </summary>
            <param name="ev">イベントコード</param>
            <returns>true/false</returns>
        </member>
        <member name="M:cklib.Framework.IIPCControl`2.IPCPut(`0,`1)">
            <summary>
            イベントを通知する
            </summary>
            <param name="ev">イベントコード</param>
            <param name="data">イベントデータ</param>
            <returns>true/false</returns>
        </member>
        <member name="M:cklib.Framework.IIPCControl`2.IPCPut(cklib.Framework.EventDataTypeBase{`0,`1})">
            <summary>
            イベントを通知する
            </summary>
            <param name="evd">イベント情報</param>
            <returns>true/false</returns>
        </member>
        <member name="M:cklib.Framework.IIPCControl`2.GetIPCEvent">
            <summary>
            このオブジェクトのイベントの取得
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.IIPCControl`2.GetEventHandle">
            <summary>
            待機イベントハンドルを取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.IIPCControl`2.AddTimerEvent(`0,System.Int32,System.Boolean)">
            <summary>
            タイマーイベント追加・更新
            </summary>
            <param name="code">EventCode</param>
            <param name="EventTime">タイムアウトまでの時間(ミリ秒)</param>
            <param name="Interval">インターバルタイマー</param>
        </member>
        <member name="M:cklib.Framework.IIPCControl`2.AddTimerEvent(`0,System.Int32,System.Object,System.Boolean)">
            <summary>
            タイマーイベント追加・更新
            </summary>
            <param name="code">EventCode</param>
            <param name="EventTime">タイムアウトまでの時間(ミリ秒)</param>
            <param name="Context">タイマーコンテキスト</param>
            <param name="Interval">インターバルタイマー</param>
        </member>
        <member name="M:cklib.Framework.IIPCControl`2.RemoveTimerEvent(`0)">
            <summary>
            タイマーイベント削除
            </summary>
            <param name="code">EventCode</param>
        </member>
        <member name="T:cklib.Framework.IPCControl`2">
            <summary>
            IPCControl IPC処理制御クラス
            </summary>
            <typeparam name="TEventCode">イベントコードenum定義</typeparam>
            <typeparam name="TEventData">イベントデータ定義</typeparam>
        </member>
        <member name="F:cklib.Framework.IPCControl`2.FromQue">
            <summary>
            IPC上りイベントQUE
            </summary>
        </member>
        <member name="F:cklib.Framework.IPCControl`2.ToQue">
            <summary>
            IPC下りイベントQUE
            </summary>
        </member>
        <member name="F:cklib.Framework.IPCControl`2.evcStart">
            <summary>
            開始イベントコード
            </summary>
        </member>
        <member name="F:cklib.Framework.IPCControl`2.evcStop">
            <summary>
            停止イベントコード
            </summary>
        </member>
        <member name="F:cklib.Framework.IPCControl`2.evcData">
            <summary>
            データイベントコード
            </summary>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.#ctor(System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="fUseFromQue">応答Queueの利用有無</param>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.Finalize">
            <summary>
            ディストラクタ
            </summary>
        </member>
        <member name="P:cklib.Framework.IPCControl`2.IPCQueueMaxSize">
            <summary>
            IPCQueueサイズ上限の設定取得
            </summary>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.IPCPut(`0)">
            <summary>
            イベントを通知する
            </summary>
            <param name="ev">イベントコード</param>
            <returns>true/false</returns>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.IPCPut(`0,`1)">
            <summary>
            イベントを通知する
            </summary>
            <param name="ev">イベントコード</param>
            <param name="data">イベントデータ</param>
            <returns>true/false</returns>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.IPCPut(cklib.Framework.EventDataTypeBase{`0,`1})">
            <summary>
            イベントを通知する
            </summary>
            <param name="evd">イベント情報</param>
            <returns>true/false</returns>
        </member>
        <member name="E:cklib.Framework.IPCControl`2.IPCEvent">
            <summary>
            IPCイベントハンドラ
            </summary>
            <remarks>
            Form等QUEからデータを拾うと、ブロックされてしまう場合にQUEの変わりにデリゲートにより通知を行なうハンドラ。<br/>
            このハンドラが、設定されていないとFromQueにイベントが積まれてしまうので、スレッドを起動する前に設定すること。
            </remarks>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.IPCResp(`0)">
            <summary>
            このオブジェクトの監視処理に対してイベントを通知する
            </summary>
            <param name="ev">イベントコード</param>
            <returns>true/false</returns>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.IPCResp(`0,`1)">
            <summary>
            このオブジェクトの監視処理に対してイベントを通知する
            </summary>
            <param name="ev">イベントコード</param>
            <param name="data">イベントデータ</param>
            <returns>true/false</returns>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.IPCEventCallback(System.IAsyncResult)">
            <summary>
            非同期デリゲート結果を受け取る
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.GetIPCEvent">
            <summary>
            このオブジェクトのイベントの取得
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.GetEventHandle">
            <summary>
            待機イベントハンドルを取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.IPCParentEventGet">
            <summary>
            イベント取り出し
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.IPCParentEventRedient">
            <summary>
            イベントの有無の参照
            </summary>
            <returns></returns>
        </member>
        <member name="F:cklib.Framework.IPCControl`2.TimerEventList">
            <summary>
            タイマーイベント一覧
            </summary>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.AddTimerEvent(`0,System.Int32,System.Boolean)">
            <summary>
            タイマーイベント追加・更新
            </summary>
            <param name="code">EventCode</param>
            <param name="EventTime">タイムアウトまでの時間(ミリ秒)</param>
            <param name="Interval">インターバルタイマー</param>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.AddTimerEvent(`0,System.Int32,System.Object,System.Boolean)">
            <summary>
            タイマーイベント追加・更新
            </summary>
            <param name="code">EventCode</param>
            <param name="EventTime">タイムアウトまでの時間(ミリ秒)</param>
            <param name="Context">タイマーコンテキスト</param>
            <param name="Interval">インターバルタイマー</param>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.RemoveTimerEvent(`0)">
            <summary>
            タイマーイベント削除
            </summary>
            <param name="code">EventCode</param>
        </member>
        <member name="P:cklib.Framework.IPCControl`2.TimeoutProcessAlwaysAllExcute">
            <summary>
             タイムアウト処理は常に全実行
            </summary>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.GetWaitTime">
            <summary>
            待機タイムアウト時間をミリ秒で返す
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.GetWaitTime(System.Int32,System.Int32)">
            <summary>
            待機タイムアウト時間をミリ秒で返す
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.TimeoutCheck">
            <summary>
            タイムアウトチェック
            </summary>
            <returns></returns>
        </member>
        <member name="T:cklib.Framework.IPCControl`2.PreIPCEventHandlerCallBack">
            <summary>
            イベントハンドラ定義
            </summary>
            <returns></returns>
        </member>
        <member name="T:cklib.Framework.IPCControl`2.IPCEventHandlerCallBack`2">
            <summary>
            イベントハンドラ定義
            </summary>
            <typeparam name="TECode">EventCode型</typeparam>
            <typeparam name="TData">EventData型</typeparam>
            <param name="ed">イベント情報</param>
            <returns></returns>
        </member>
        <member name="E:cklib.Framework.IPCControl`2.PreIPCEventHandler">
            <summary>
            プレIPCイベントハンドラ（キュー読み取り前処理)
            </summary>
        </member>
        <member name="E:cklib.Framework.IPCControl`2.AfterIPCEventHandler">
            <summary>
            IPCイベント後処理ハンドラ
            </summary>
        </member>
        <member name="E:cklib.Framework.IPCControl`2.IPCEventHandler">
            <summary>
            IPCイベントハンドラ
            </summary>
        </member>
        <member name="E:cklib.Framework.IPCControl`2.IPCAfterCheckEventHandler">
            <summary>
            IPC残留イベント処理ハンドラ
            </summary>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.EventIPC">
            <summary>
            IPCイベント
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.AfterCheckEventIPC">
            <summary>
            残留イベント処理
            </summary>
            <returns></returns>
        </member>
        <member name="F:cklib.Framework.IPCControl`2.disposed">
            <summary>
            Dispose完了フラグ
            </summary>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.Dispose">
            <summary>
            Disposeメソッド
            </summary>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.Dispose(System.Boolean)">
            <summary>
            Dispose処理の実装
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.ReleseResorce">
            <summary>
            リソース解放処理
            </summary>
        </member>
        <member name="M:cklib.Framework.IPCControl`2.ReleseManagedResorce">
            <summary>
            マネージドリソース解放処理（明示的呼び出し時のみ実行される）
            </summary>
        </member>
        <member name="T:cklib.Framework.Timer">
            <summary>
            時間計測用タイマーユーティリティ
            </summary>
        </member>
        <member name="F:cklib.Framework.Timer.MaxWaitTime">
            <summary>
            待機時間最大
            </summary>
        </member>
        <member name="F:cklib.Framework.Timer.MinWaitTime">
            <summary>
            待機時間最少
            </summary>
        </member>
        <member name="M:cklib.Framework.Timer.NativeGetTickCount">
            <summary>
            TickCountの取得
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.Timer.GetTickCount">
            <summary>
            TickCountの取得
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.Timer.CalcWaitTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            待機時間の計算<br/>
            計算結果が、MinimumTimeより短い時間の場合は、計算結果をそうでなければ、MinimumTimeを返す
            </summary>
            <param name="StartTime">監視開始時間ミリ秒</param>
            <param name="WaitTime">待機時間ミリ秒</param>
            <param name="MinimumTime">他の監視時間ミリ秒</param>
            <returns>待機時間ミリ秒</returns>
        </member>
        <member name="M:cklib.Framework.Timer.CalcUntilWaitTime(System.Int32,System.Int32)">
            <summary>
            指定時間までの待機時間の計算
            </summary>
            <param name="TargetTime">監視開始時間ミリ秒</param>
            <param name="now">現在時間ミリ秒</param>
            <returns>待機時間ミリ秒</returns>
        </member>
        <member name="M:cklib.Framework.Timer.CalcUntilWaitTime(System.Int32)">
            <summary>
            指定時間までの待機時間の計算
            </summary>
            <param name="TargetTime">監視開始時間ミリ秒</param>
            <returns>待機時間ミリ秒</returns>
        </member>
        <member name="M:cklib.Framework.Timer.CalcWaitTime(System.Int32,System.Int32)">
            <summary>
            待機時間の計算
            </summary>
            <param name="StartTime">監視開始時間ミリ秒</param>
            <param name="WaitTime">待機時間ミリ秒</param>
            <returns>待機時間ミリ秒</returns>
        </member>
        <member name="M:cklib.Framework.Timer.IsWaitTimeOut(System.Int32,System.Int32)">
            <summary>
            待機時間を経過したかの判定を行なう
            </summary>
            <param name="StartTime">監視開始時間ミリ秒</param>
            <param name="WaitTime">待機時間ミリ秒</param>
            <returns>待機時間を過ぎていればtrue</returns>
        </member>
        <member name="M:cklib.Framework.Timer.Compare(System.Int32,System.Int32)">
            <summary>
            時刻の比較
            </summary>
            <param name="s1">比較対象1</param>
            <param name="s2">比較対象2</param>
            <returns>0一致</returns>
        </member>
        <member name="T:cklib.Framework.PoolThreadBase`2">
            <summary>
            AppThread の概要の説明です。
            </summary>
        </member>
        <member name="F:cklib.Framework.PoolThreadBase`2.StartEvent">
            <summary>
            起動監視イベント
            </summary>
        </member>
        <member name="F:cklib.Framework.PoolThreadBase`2.StopEvent">
            <summary>
            起動監視イベント
            </summary>
        </member>
        <member name="M:cklib.Framework.PoolThreadBase`2.#ctor(`0,`0,`0,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Framework.PoolThreadBase`2.Start">
            <summary>
            スレッドの起動
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.PoolThreadBase`2.StartPoolThread(System.Threading.WaitCallback)">
            <summary>
            ワーカー起動方のカスタマイズ
            </summary>
            <param name="callBack"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.PoolThreadBase`2.StopWait(System.Int32)">
            <summary>
            スレッド停止待ち
            </summary>
            <param name="wTime">待ち時間(ミリ秒)</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.PoolThreadBase`2.PoolThreadMain(System.Object)">
            <summary>
            スレッドメインルーチン
            </summary>
        </member>
        <member name="T:cklib.Framework.WorkerThread`2">
            <summary>
            簡易ワーカースレッド処理
            </summary>
            <typeparam name="T">ワーカーパラメータ型定義</typeparam>
            <typeparam name="TResult">ワーカー処理結果返却値型</typeparam>
        </member>
        <member name="P:cklib.Framework.WorkerThread`2.Result">
            <summary>
            処理結果取得
            </summary>
        </member>
        <member name="P:cklib.Framework.WorkerThread`2.IsError">
            <summary>
            エラー終了したかを取得する
            </summary>
        </member>
        <member name="P:cklib.Framework.WorkerThread`2.Exception">
            <summary>
            例外情報取得
            </summary>
        </member>
        <member name="F:cklib.Framework.WorkerThread`2.Event">
            <summary>
            終了イベント
            </summary>
        </member>
        <member name="M:cklib.Framework.WorkerThread`2.#ctor(cklib.Framework.Func{`0,`1},`0)">
            <summary>
            コンストラクタ
            </summary>
            <param name="func"> ワーカー処理デリゲート</param>
            <param name="prm">ワーカーパラメータ</param>
        </member>
        <member name="M:cklib.Framework.WorkerThread`2.#ctor(cklib.Framework.Func{`0,`1},`0,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="func"> ワーカー処理デリゲート</param>
            <param name="prm">ワーカーパラメータ</param>
            <param name="inhConcurrent">スレッド起動抑止</param>
        </member>
        <member name="M:cklib.Framework.WorkerThread`2.StartThread">
            <summary>
            スレッドの起動
            </summary>
        </member>
        <member name="M:cklib.Framework.WorkerThread`2.WorkerThreadEntry(System.Object)">
            <summary>
            ワーカースレッド
            </summary>
            <param name="prm">処理パラメータ</param>
        </member>
        <member name="T:cklib.Framework.WorkerThreadContainer`3">
            <summary>
            WorkFiber管理クラス
            </summary>
        </member>
        <member name="M:cklib.Framework.WorkerThreadContainer`3.#ctor">
            <summary>
            デフォルトコンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Framework.WorkerThreadContainer`3.#ctor(System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="WorkFiberLimit">実行数制限</param>
        </member>
        <member name="M:cklib.Framework.WorkerThreadContainer`3.CreateWorkerThread(cklib.Framework.Func{`1,`2},`1,System.Boolean)">
            <summary>
            ワーカースレッド生成
            </summary>
            <param name="func"></param>
            <param name="prm"></param>
            <param name="inhConcurrent"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.WorkerThreadContainer`3.Add(cklib.Framework.Func{`1,`2},`1)">
            <summary>
            WorkerThreadを生成して追加
            </summary>
        </member>
        <member name="M:cklib.Framework.WorkerThreadContainer`3.Add(cklib.Framework.WorkerThread{`1,`2})">
            <summary>
            WorkerThreadを追加
            </summary>
        </member>
        <member name="M:cklib.Framework.WorkerThreadContainer`3.WaitAll">
            <summary>
            すべてのWorkerThreadの終了を待つ
            </summary>
        </member>
        <member name="M:cklib.Framework.WorkerThreadContainer`3.WaitAll(cklib.Framework.Action{cklib.Framework.WorkerThread{`1,`2}})">
            <summary>
            すべてのWorkerThreadの終了を待つ
            </summary>
        </member>
        <member name="M:cklib.Framework.WorkerThreadContainer`3.WaitWorkerThread">
            <summary>
            WorkerThreadの終了を待つ
            </summary>
        </member>
        <member name="P:cklib.Framework.WorkerThreadContainer`3.IsEnded">
            <summary>
            終了済みWorkerThreadの有無を確認
            </summary>
        </member>
        <member name="M:cklib.Framework.WorkerThreadContainer`3.EndWorkerCheck(cklib.Framework.Action{cklib.Framework.WorkerThread{`1,`2}})">
            <summary>
            終了ワーカーの処理
            </summary>
        </member>
        <member name="M:cklib.Framework.WorkerThreadContainer`3.GetEndedWorkerThread">
            <summary>
            終了済みWorkerThreadを取り出し
            </summary>
            <returns></returns>
        </member>
        <member name="T:cklib.Framework.IPC.NamedEventObject">
            <summary>
            名前つきのEventObjectクラス
            </summary>
            <remarks>
            2012/02/06 64bit環境への対応を考慮しunsafeコード除去<br/>
            ライブラリ互換のためEventWaitHandleの派生クラスに変更
            </remarks>
        </member>
        <member name="M:cklib.Framework.IPC.NamedEventObject.#ctor(System.Boolean,System.Boolean,System.String,System.Boolean@)">
            <summary>
            初期状態、イベント名を指定してNamedEventObjectのインスタンスを作成します。
            </summary>
            <param name="fManual">trueで手動リセット,false自動リセットの指定</param>
            <param name="initialState">初期状態をシグナル状態にする場合はtrue。</param>
            <param name="name">イベントの名前。</param>
            <param name="createdNew">制御が返されるとき、イベントオブジェクトが新しく作成された場合にtrueが格納されます。すでに同名のイベントオブジェクトが存在していた場合はfalseが格納されます。</param>
        </member>
        <member name="M:cklib.Framework.IPC.NamedEventObject.#ctor(System.Boolean,System.Boolean,System.String)">
            <summary>
            初期状態、イベント名を指定してNamedEventObjectのインスタンスを作成します。
            </summary>
            <param name="fManual">trueで手動リセット,false自動リセットの指定</param>
            <param name="initialState">初期状態をシグナル状態にする場合はtrue。</param>
            <param name="name">イベントの名前。</param>
        </member>
        <member name="M:cklib.Framework.IPC.NamedEventObject.#ctor(System.Boolean,System.String,System.Boolean@)">
            <summary>
            初期状態、イベント名を指定して自動リセットNamedEventObjectのインスタンスを作成します。
            </summary>
            <param name="initialState">初期状態をシグナル状態にする場合はtrue。</param>
            <param name="name">イベントの名前。</param>
            <param name="createdNew">制御が返されるとき、イベントオブジェクトが新しく作成された場合にtrueが格納されます。すでに同名のイベントオブジェクトが存在していた場合はfalseが格納されます。</param>
        </member>
        <member name="M:cklib.Framework.IPC.NamedEventObject.#ctor(System.Boolean,System.String)">
            <summary>
            初期状態、イベント名を指定して自動リセットNamedEventObjectのインスタンスを作成します。
            </summary>
            <param name="initialState">初期状態をシグナル状態にする場合はtrue。</param>
            <param name="name">イベントの名前。</param>
        </member>
        <member name="T:cklib.Framework.IPC.ckEventQue`1">
            <summary>
            EventObjectによるイベント監視可能なQueue
            </summary>
            <remarks>
            更新:2008/02/26 Queue段数制御機能追加
            更新:2008/07/08 Genericに変更
            </remarks>
        </member>
        <member name="F:cklib.Framework.IPC.ckEventQue`1.ev">
            <summary>
            イベントオブジェクトインスタンス
            </summary>
        </member>
        <member name="F:cklib.Framework.IPC.ckEventQue`1.Que">
            <summary>
            イベント保持Queue実態
            </summary>
        </member>
        <member name="F:cklib.Framework.IPC.ckEventQue`1.sem">
            <summary>
            Queueサイズ制限用セマフォ
            </summary>
        </member>
        <member name="F:cklib.Framework.IPC.ckEventQue`1.QueueLimitSize">
            <summary>
            Queueサイズ上限
            </summary>
        </member>
        <member name="P:cklib.Framework.IPC.ckEventQue`1.QueueMaxSize">
            <summary>
            Queueサイズ上限
            </summary>
            <remarks>
            サイズの動的変更は不可<br/>
            0以下の値で制限解除後再設定のみ可
            </remarks>
        </member>
        <member name="M:cklib.Framework.IPC.ckEventQue`1.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Framework.IPC.ckEventQue`1.#ctor(System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="QueueLimit">キューの段数 -1を指定した場合無制限</param>
        </member>
        <member name="M:cklib.Framework.IPC.ckEventQue`1.Initialize(System.Int32)">
            <summary>
            初期化
            </summary>
            <param name="QueueLimit">キューの段数 -1を指定した場合無制限</param>
        </member>
        <member name="M:cklib.Framework.IPC.ckEventQue`1.Finalize">
            <summary>
            デストラクタ
            </summary>
        </member>
        <member name="M:cklib.Framework.IPC.ckEventQue`1.GetHandle">
            <summary>
            待機用ハンドルを取得
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.IPC.ckEventQue`1.Put(`0)">
            <summary>
            データを格納しイベントを発生させる
            </summary>
            <param name="obj">データ</param>
        </member>
        <member name="M:cklib.Framework.IPC.ckEventQue`1.Put(`0,System.Int32)">
            <summary>
            データを格納しイベントを発生させる
            </summary>
            <param name="obj">データ</param>
            <param name="WaitTime">待機時間</param>
            <returns>成功時true,Putタイムアウト時false</returns>
        </member>
        <member name="M:cklib.Framework.IPC.ckEventQue`1.IsDataRegident">
            <summary>
            QUEにデータが存在するか返す
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.IPC.ckEventQue`1.Get(System.Int32)">
            <summary>
            格納したデータを返す
            </summary>
            <param name="WaitTime">待機時間</param>
            <returns>データ</returns>
        </member>
        <member name="M:cklib.Framework.IPC.ckEventQue`1.Get">
            <summary>
            格納したデータを返す
            </summary>
            <returns>データ</returns>
        </member>
        <member name="F:cklib.Framework.IPC.ckEventQue`1.disposed">
            <summary>
            Dispose完了フラグ
            </summary>
        </member>
        <member name="M:cklib.Framework.IPC.ckEventQue`1.Dispose">
            <summary>
            Dispose処理の実装
            Queとイベントオブジェクトを破棄する
            </summary>
        </member>
        <member name="M:cklib.Framework.IPC.ckEventQue`1.Dispose(System.Boolean)">
            <summary>
            Dispose処理の実装
            </summary>
            <param name="disposing">手動開放かディストラクタかの識別</param>
        </member>
        <member name="T:cklib.Framework.IPC.ckMutex">
            <summary>
            Mutexラッパークラス
            </summary>
        </member>
        <member name="M:cklib.Framework.IPC.ckMutex.#ctor">
            <summary>
            ﾃﾞﾌｫﾙﾄｺﾝｽﾄﾗｸﾀ
            </summary>
        </member>
        <member name="M:cklib.Framework.IPC.ckMutex.#ctor(System.Boolean)">
            <summary>
            初期所有権取得指定付
            </summary>
            <param name="lk"></param>
        </member>
        <member name="M:cklib.Framework.IPC.ckMutex.#ctor(System.String,System.Boolean)">
            <summary>
            名前付
            </summary>
            <param name="name"></param>
            <param name="lk"></param>
        </member>
        <member name="M:cklib.Framework.IPC.ckMutex.Finalize">
            <summary>
            ディストラクタ
            </summary>
        </member>
        <member name="M:cklib.Framework.IPC.ckMutex.GetHandle">
            <summary>
            待機ハンドルの取得
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.IPC.ckMutex.Lock">
            <summary>
            ロックを行う
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.IPC.ckMutex.Lock(System.Int32)">
            <summary>
            ロックを行う
            </summary>
            <param name="wt">待機時間(ミリ秒)</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.IPC.ckMutex.UnLock">
            <summary>
            ミューテックス解放
            </summary>
        </member>
        <member name="T:cklib.Framework.PoolThread">
            <summary>
            AppThread の概要の説明です。
            </summary>
        </member>
        <member name="M:cklib.Framework.PoolThread.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="T:cklib.Framework.AppThread">
            <summary>
            互換用クラス定義
            </summary>
        </member>
        <member name="M:cklib.Framework.AppThread.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Framework.AppThread.EventStart(cklib.Framework.EventDataTypeBase{cklib.Framework.EventCode,System.Object})">
            <summary>
            スレッド開始イベント（オプション　起動処理同期用)
            </summary>
            <param name="ed"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThread.EventStart(cklib.Framework.EventDataType)">
            <summary>
            スレッド開始イベント（オプション　起動処理同期用)
            </summary>
            <param name="ed"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThread.EventStop(cklib.Framework.EventDataTypeBase{cklib.Framework.EventCode,System.Object})">
            <summary>
            スレッド停止イベント
            </summary>
            <param name="ed"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThread.EventStop(cklib.Framework.EventDataType)">
            <summary>
            スレッド停止イベント
            </summary>
            <param name="ed"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThread.EventData(cklib.Framework.EventDataTypeBase{cklib.Framework.EventCode,System.Object})">
            <summary>
            データイベント
            </summary>
            <param name="ed"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThread.EventData(cklib.Framework.EventDataType)">
            <summary>
            データイベント
            </summary>
            <param name="ed"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThread.EventUser(cklib.Framework.EventDataTypeBase{cklib.Framework.EventCode,System.Object})">
            <summary>
            ユーザー拡張イベント
            </summary>
            <param name="ed"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.AppThread.EventUser(cklib.Framework.EventDataType)">
            <summary>
            ユーザー拡張イベント
            </summary>
            <param name="ed"></param>
            <returns></returns>
        </member>
        <member name="T:cklib.Framework.EventCode">
            <summary>
            基本イベントコード定義
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.Start">
            <summary>
            スレッド起動
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.Stop">
            <summary>
            スレッド停止
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.Data">
            <summary>
            データイベント
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.User1">
            <summary>
            ユーザー定義イベント1
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.User2">
            <summary>
            ユーザー定義イベント2
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.User3">
            <summary>
            ユーザー定義イベント3
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.User4">
            <summary>
            ユーザー定義イベント4
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.User5">
            <summary>
            ユーザー定義イベント5
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.User6">
            <summary>
            ユーザー定義イベント6
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.User7">
            <summary>
            ユーザー定義イベント7
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.User8">
            <summary>
            ユーザー定義イベント8
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.User9">
            <summary>
            ユーザー定義イベント9
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.User10">
            <summary>
            ユーザー定義イベント10
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.User11">
            <summary>
            ユーザー定義イベント11
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.User12">
            <summary>
            ユーザー定義イベント12
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.User13">
            <summary>
            ユーザー定義イベント13
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.User14">
            <summary>
            ユーザー定義イベント14
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.User15">
            <summary>
            ユーザー定義イベント15
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.User16">
            <summary>
            ユーザー定義イベント16
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.User17">
            <summary>
            ユーザー定義イベント17
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.User18">
            <summary>
            ユーザー定義イベント18
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.User19">
            <summary>
            ユーザー定義イベント19
            </summary>
        </member>
        <member name="F:cklib.Framework.EventCode.User20">
            <summary>
            ユーザー定義イベント20
            </summary>
        </member>
        <member name="T:cklib.Framework.EventDataType">
            <summary>
            イベントデータ構造体
            </summary>
        </member>
        <member name="F:cklib.Framework.EventDataType.EventCode">
            <summary>
            イベントコード
            </summary>
        </member>
        <member name="F:cklib.Framework.EventDataType.EventData">
            <summary>
            イベント付加情報
            </summary>
        </member>
        <member name="T:cklib.Framework.LogThread">
            <summary>
            日毎ローテートの簡易ログスレッドクラス
            </summary>
        </member>
        <member name="F:cklib.Framework.LogThread.path">
            <summary>
            ログ書き込みパス
            </summary>
        </member>
        <member name="P:cklib.Framework.LogThread.Path">
            <summary>
            ログ書き込みパス
            </summary>
        </member>
        <member name="F:cklib.Framework.LogThread.LogFile">
            <summary>
            ログファイル書き込みストリーム
            </summary>
        </member>
        <member name="F:cklib.Framework.LogThread.LogFileName">
            <summary>
            ログファイル名
            </summary>
        </member>
        <member name="F:cklib.Framework.LogThread.LogKeyName">
            <summary>
            ログファイル名生成用キー名
            </summary>
        </member>
        <member name="P:cklib.Framework.LogThread.KeyName">
            <summary>
            ログファイル名生成用キー名
            </summary>
        </member>
        <member name="F:cklib.Framework.LogThread.Encoding">
            <summary>
            ログファイルの文字エンコード種類
            </summary>
        </member>
        <member name="F:cklib.Framework.LogThread.fLogAfter">
            <summary>
            ファイル書き込み有無フラグ
            </summary>
        </member>
        <member name="T:cklib.Framework.LogThread.LogInfo">
            <summary>
            ログデータ構造体
            </summary>
        </member>
        <member name="M:cklib.Framework.LogThread.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Framework.LogThread.#ctor(System.String,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="path">ログ書き込みディレクトリパス</param>
            <param name="key">ログファイル先頭文字列</param>
        </member>
        <member name="M:cklib.Framework.LogThread.ExitInstance">
            <summary>
            スレッドの終了処理
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.LogThread.WaitError(System.Exception)">
            <summary>
            待機中の例外発生時の処理
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.LogThread.EventError(System.Exception)">
            <summary>
            イベント処理中の例外発生時処理
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.LogThread.ThreadError(System.Exception)">
            <summary>
            catchされていない例外発生時処理
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.LogThread.GetWaitTime">
            <summary>
            待機タイムアウト時間をミリ秒で返す
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.LogThread.EventTimeout">
            <summary>
            イベント発生タイムアウト時の処理
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.LogThread.EventData(cklib.Framework.EventDataType)">
            <summary>
            ログ書き込みイベント
            </summary>
            <param name="ed"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.LogThread.Loging(System.DateTime,System.String)">
            <summary>
            ログイベント
            </summary>
            <param name="ldate">ログ時刻</param>
            <param name="msg">ログメッセージ</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.LogThread.Loging(System.String)">
            <summary>
            ログイベント
            </summary>
            <param name="msg">ログメッセージ</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.LogThread.OpenLog(System.DateTime)">
            <summary>
            ログファイルオープン
            </summary>
            <param name="ldate">ファイル日付</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Framework.LogThread.CloseLog">
            <summary>
            ファイルを閉じる
            </summary>
        </member>
        <member name="M:cklib.Framework.LogThread.GenLogFileName(System.DateTime)">
            <summary>
            ログファイル名生成
            </summary>
            <param name="ldate"></param>
            <returns></returns>
        </member>
        <member name="T:cklib.DB.DBAdapterInstance">
            <summary>
            SqlServersDB接続操作ラッパークラス<BR/>
            SqlDataAdapterを利用するための拡張
            </summary>
            <remarks>
            自動生成されたDataSetコードとの共存を行うため為の補助クラスです<br/>
            自動生成されたAdapterラッパーコードを使用せず当該ライブラリを使用することで、
            設定共有、トランザクション管理の自動化、SQLログの出力等<see cref="T:cklib.DB.DBInstance"/>の機能が利用できます。<br/>
            自動生成されたAdapterクラスのpartialクラスを生成して、独自のコンストラクタまたは、
            初期化メソッドを追加し当クラスのsqlDataAdapterを初期化することで自動生成されたSqlステートメント、
            ORマッピングされたDataTable、DataRowsの派生クラスを利用できます。
            </remarks>
        </member>
        <member name="F:cklib.DB.DBAdapterInstance.m_sqlDataAdapter">
            <summary>
            アダプタインスタンス
            </summary>
        </member>
        <member name="P:cklib.DB.DBAdapterInstance.sqlDataAdapter">
            <summary>
            アダプタインスタンス
            </summary>
        </member>
        <member name="P:cklib.DB.DBAdapterInstance.SelectSqlCommand">
            <summary>
            Select用SqlCommandインスタンス
            </summary>
        </member>
        <member name="P:cklib.DB.DBAdapterInstance.InsertSqlCommand">
            <summary>
            Insert用SqlCommandインスタンス
            </summary>
        </member>
        <member name="P:cklib.DB.DBAdapterInstance.UpdateSqlCommand">
            <summary>
            Update用SqlCommandインスタンス
            </summary>
        </member>
        <member name="P:cklib.DB.DBAdapterInstance.DeleteSqlCommand">
            <summary>
            Delete用SqlCommandインスタンス
            </summary>
        </member>
        <member name="F:cklib.DB.DBAdapterInstance.UpdateRowLogEnable">
            <summary>
            データセット更新時の詳細ログを採取する
            </summary>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.#ctor(System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.#ctor(System.String,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.#ctor(System.String,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.#ctor(System.Data.SqlClient.SqlDataAdapter)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.#ctor(System.Data.SqlClient.SqlDataAdapter,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.#ctor(System.Data.SqlClient.SqlDataAdapter,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.#ctor(System.Data.SqlClient.SqlDataAdapter,System.String,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.#ctor(System.Data.SqlClient.SqlDataAdapter,System.String,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.#ctor(System.Data.SqlClient.SqlDataAdapter,System.String,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="adapter">SqlDataAdapterインスタンス</param>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.Finalize">
            <summary>
            ディストラクタ
            </summary>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.ReleseResorce">
            <summary>
            リソース解放処理
            </summary>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.ReleseManagedResorce">
            <summary>
            マネージドリソース解放処理（明示的呼び出し時のみ実行される）
            </summary>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.BeginDBTransaction(System.Data.IsolationLevel)">
            <summary>
            トランザクションの開始
            </summary>
            <param name="iso">分離レベル</param>
            <returns>DBTransactionインスタンス</returns>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.Fill(System.Int32,System.Data.DataTable)">
            <summary>
            DataTableにデータをロードする
            </summary>
            <param name="depth">呼び出し段数</param>
            <param name="dt">データテーブル</param>
            <returns>正常に追加または更新された行数</returns>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.Fill(System.Data.DataTable)">
            <summary>
            DataTableにデータをロードする
            </summary>
            <returns>ロードされたデータセット</returns>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.GetData``1">
            <summary>
            指定したDataTableにデータをロードする
            </summary>
            <typeparam name="T">オーバーロードされたデータセットを指定</typeparam>
            <returns>ロードされたDataTable</returns>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.Fill(System.Data.DataSet)">
            <summary>
            データセットにデータをロードする
            </summary>
            <param name="ds">データセット</param>
            <returns>正常に追加または更新された行数</returns>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.Fill(System.Data.DataSet,System.String)">
            <summary>
            データセットにデータをロードする
            </summary>
            <param name="ds">データセット</param>
            <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
            <returns>正常に追加または更新された行数</returns>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.Update(System.Data.DataTable)">
            <summary>
            DataTableからテーブル更新
            </summary>
            <param name="dt">データテーブル</param>
            <returns>正常に追加または更新された行数</returns>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.Update(System.Data.DataSet,System.String)">
            <summary>
            DataSetからテーブル更新
            </summary>
            <param name="ds">DataSet</param>
            <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
            <returns>正常に追加または更新された行数</returns>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.Update(System.Data.DataSet)">
            <summary>
            DataSetからテーブル更新
            </summary>
            <param name="ds">DataSet</param>
            <returns>正常に追加または更新された行数</returns>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.Update(System.Data.DataRow[])">
            <summary>
            DataRowからテーブル更新
            </summary>
            <param name="drows">DataRowの配列</param>
            <returns>正常に追加または更新された行数</returns>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.LogAdapterUpdateStatement(System.Int32,System.Data.DataRow[])">
            <summary>
            Adapterの更新ステートメントのログを採取する
            </summary>
            <param name="depth">呼び出しのネスト段数</param>
            <param name="rows">行配列</param>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.LogAdapterUpdateStatement(System.Int32,System.Data.DataRowCollection)">
            <summary>
            Adapterの更新ステートメントのログを採取する
            </summary>
            <param name="depth">呼び出しのネスト段数</param>
            <param name="rows">行コレクション</param>
        </member>
        <member name="M:cklib.DB.DBAdapterInstance.LogAdapterUpdateStatement(System.Int32,System.Data.DataRow)">
            <summary>
            Adapterの更新ステートメントのログを採取する
            </summary>
            <param name="depth">呼び出しのネスト段数</param>
            <param name="row">行</param>
        </member>
        <member name="T:cklib.DB.DBInstance">
            <summary>
            SqlServersDB接続操作ラッパークラス
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.m_sqlConnection">
            <summary>
            接続インスタンス
            </summary>
        </member>
        <member name="P:cklib.DB.DBInstance.sqlConnection">
            <summary>
            接続インスタンス
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.m_sqlCommand">
            <summary>
            SqlCommandインスタンス
            </summary>
        </member>
        <member name="P:cklib.DB.DBInstance.sqlCommand">
            <summary>
            SqlCommandインスタンス
            </summary>
        </member>
        <member name="M:cklib.DB.DBInstance.SetupSqlCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand)">
            <summary>
            SQLコマンドのセットアップ
            </summary>
            <param name="prmSqlCommand">格納先のSqlCommandインスタンス</param>
            <param name="value">新しいSQLCommandインスタンス</param>
        </member>
        <member name="M:cklib.DB.DBInstance.SetupSqlCommand(System.Data.SqlClient.SqlCommand)">
            <summary>
            SQLコマンドのセットアップ
            </summary>
            <param name="prmSqlCommand">格納先のSqlCommandインスタンス</param>
        </member>
        <member name="M:cklib.DB.DBInstance.ReleaseSqlCommand(System.Data.SqlClient.SqlCommand)">
            <summary>
            SQLコマンドの開放
            </summary>
            <param name="prmSqlCommand">格納先のSqlCommandインスタンス</param>
        </member>
        <member name="F:cklib.DB.DBInstance.m_DBTransaction">
            <summary>
            DBトランザクションインスタンス
            </summary>
        </member>
        <member name="P:cklib.DB.DBInstance.DBTransaction">
            <summary>
            DBトランザクションインスタンス
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.m_DBCommandTimer">
            <summary>
            SqlCommand実行タイマー
            </summary>
        </member>
        <member name="P:cklib.DB.DBInstance.DBCommandTimer">
            <summary>
            SqlCommand実行タイマー
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.InstanceID">
            <summary>
            インスタンスID
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.m_ShareDBCommandTimer">
            <summary>
            共通DBコマンドタイマー
            </summary>
        </member>
        <member name="P:cklib.DB.DBInstance.ShareDBCommandTimer">
            <summary>
            共通DBコマンドタイマー
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.m_ShareDBConnectString">
            <summary>
            共通接続文字列
            </summary>
        </member>
        <member name="P:cklib.DB.DBInstance.ShareDBConnectString">
            <summary>
            共通接続文字列
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.InstanceIDBase">
            <summary>
            インスタンス生成ベース
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.m_SQLTraceEnable">
            <summary>
            SQLトレースログ許可
            </summary>
        </member>
        <member name="P:cklib.DB.DBInstance.SQLTraceEnable">
            <summary>
            SQLトレースログ許可
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.SQLTraceManagerKey">
            <summary>
            SQLトレースログ採取マネージャーキー
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.SQLTraceLogLevel">
            <summary>
            SQLトレース採取用ログレベル
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.SQLTraceDefaultLogCode">
            <summary>
            SQLトレース採取用ログコード
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.SQLTraceLogCodeBase">
            <summary>
            SQLトレース採取用ログコード
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.SQLTraceInhConnectStringLogging">
            <summary>
            SQLトレース採取用接続文字列を記録しない
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.traceLog">
            <summary>
            SQLトレースインスタンス
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.m_ParameterLogEnabled">
            <summary>
            パラメータログを採取する
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.m_ParameterLogDataSetEnabled">
            <summary>
            パラメータログにデータセットを採取する
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.m_ParameterLogImageEnabled">
            <summary>
            パラメータログにImageのダンプを採取する
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.m_ParameterLogTextEnabled">
            <summary>
            パラメータログにTextのダンプを採取する
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.m_ParameterLogStructureEnabled">
            <summary>
            パラメータログにStructureのダンプを採取する
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.m_ParameterMaskRegexDeine">
            <summary>
            パラメータログ出力時に内容をマスクするパラメータ名判別用正規表現
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.m_ParameterMaskRegex">
            <summary>
            パラメータログ出力時に内容をマスクするパラメータ名判別用正規表現インスタンス
            </summary>
        </member>
        <member name="P:cklib.DB.DBInstance.ParameterLogEnabled">
            <summary>
            パラメータログを採取する
            </summary>
        </member>
        <member name="P:cklib.DB.DBInstance.ParameterLogDataSetEnabled">
            <summary>
            パラメータログにデータセットを採取する
            </summary>
        </member>
        <member name="P:cklib.DB.DBInstance.ParameterLogImageEnabled">
            <summary>
            パラメータログにImageのダンプを採取する
            </summary>
        </member>
        <member name="P:cklib.DB.DBInstance.ParameterLogTextEnabled">
            <summary>
            パラメータログにTextのダンプを採取する
            </summary>
        </member>
        <member name="P:cklib.DB.DBInstance.ParameterLogStructureEnabled">
            <summary>
            パラメータログにStructureのダンプを採取する
            </summary>
        </member>
        <member name="P:cklib.DB.DBInstance.ParameterMaskRegex">
            <summary>
            パラメータログ出力時に内容をマスクするパラメータ名判別用正規表現
            </summary>
        </member>
        <member name="M:cklib.DB.DBInstance.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.DB.DBInstance.#ctor(System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.DB.DBInstance.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
        </member>
        <member name="M:cklib.DB.DBInstance.#ctor(System.String,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
        </member>
        <member name="M:cklib.DB.DBInstance.#ctor(System.String,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.DB.DBInstance.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="DBConnectString">DB接続文字列</param>
            <param name="DBCommandTimer">SqlCommand実行タイマー</param>
            <param name="fCommandInitialize">SqlCommandの初期化可否</param>
        </member>
        <member name="M:cklib.DB.DBInstance.Initialized">
            <summary>
            初期設定
            </summary>
        </member>
        <member name="M:cklib.DB.DBInstance.Finalize">
            <summary>
            ディストラクタ
            </summary>
        </member>
        <member name="F:cklib.DB.DBInstance.disposed">
            <summary>
            Dispose完了フラグ
            </summary>
        </member>
        <member name="M:cklib.DB.DBInstance.Dispose">
            <summary>
            Disposeメソッド
            </summary>
        </member>
        <member name="M:cklib.DB.DBInstance.Dispose(System.Boolean)">
            <summary>
            Dispose処理の実装
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:cklib.DB.DBInstance.ReleseResorce">
            <summary>
            リソース解放処理
            </summary>
        </member>
        <member name="M:cklib.DB.DBInstance.ReleseManagedResorce">
            <summary>
            マネージドリソース解放処理（明示的呼び出し時のみ実行される）
            </summary>
        </member>
        <member name="M:cklib.DB.DBInstance.InnerLogExp(System.Int32,cklib.DB.SQLTraceLogCode,System.String,System.Exception,System.Object[])">
            <summary>
            内部イベントのログ
            </summary>
            <param name="depth">スタックトレースの深さ</param>
            <param name="Code">ログコード</param>
            <param name="msg">メッセージ</param>
            <param name="exp">例外情報</param>
            <param name="prms">その他パラメータ</param>
        </member>
        <member name="M:cklib.DB.DBInstance.InnerLog(System.Int32,cklib.DB.SQLTraceLogCode,System.String,System.Object[])">
            <summary>
            内部イベントのログ
            </summary>
            <param name="depth">スタックトレースの深さ</param>
            <param name="Code">ログコード</param>
            <param name="msg">メッセージ</param>
            <param name="prms">その他パラメータ</param>
        </member>
        <member name="M:cklib.DB.DBInstance.GetCallNestDepth">
            <summary>
            外部モジュールからの呼び出しネスト数を取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.DB.DBInstance.m_sqlConnection_InfoMessage(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
            <summary>
            SQLメッセージ
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:cklib.DB.DBInstance.LogStatement">
            <summary>
            要求ステートメントとパラメータをロギングする
            </summary>
        </member>
        <member name="M:cklib.DB.DBInstance.LogStatement(System.Int32)">
            <summary>
            要求ステートメントとパラメータをロギングする
            </summary>
        </member>
        <member name="M:cklib.DB.DBInstance.LogStatement(System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            要求ステートメントとパラメータをロギングする
            </summary>
            <remarks>
            structure型をそのままログキューに渡した場合書式化する時点で
            データ元のDataTableが解放されてしまう可能性がある為文字列化を
            行ってキューを行う仕様に変更する
            これに伴いパラメータの一部をImageやDataTableのログを除外するオプションを追加1
            </remarks>
        </member>
        <member name="M:cklib.DB.DBInstance.SqlParameterToLogStringItem(System.Text.StringBuilder@,System.Data.SqlClient.SqlParameter,System.Object)">
            <summary>
            ログ編集用にSqlパラメータを文字列バッファに編集して格納する。
            </summary>
            <param name="stb"></param>
            <param name="var"></param>
            <param name="Value"></param>
        </member>
        <member name="M:cklib.DB.DBInstance.GetSqlConnection(System.String)">
            <summary>
            接続済みSqlConnectionインスタンスを取得する
            </summary>
            <returns>接続済みSqlConnectionインスタンス</returns>
        </member>
        <member name="M:cklib.DB.DBInstance.GetSqlCommand">
            <summary>
            SqlCommandインスタンスの取得
            </summary>
            <returns>SqlCommandインスタンス</returns>
        </member>
        <member name="M:cklib.DB.DBInstance.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            トランザクションの開始
            </summary>
            <param name="iso">ロックレベルの指定</param>
            <returns>SqlTransactionインスタンス</returns>
        </member>
        <member name="M:cklib.DB.DBInstance.BeginTransaction">
            <summary>
            トランザクションの開始(規定レベル)
            </summary>
            <returns>SqlTransactionインスタンス</returns>
        </member>
        <member name="M:cklib.DB.DBInstance.BeginDBTransaction(System.Data.IsolationLevel)">
            <summary>
            トランザクションの開始
            </summary>
            <param name="iso">ロックレベルの指定</param>
            <returns>DBTransactionインスタンス</returns>
        </member>
        <member name="M:cklib.DB.DBInstance.BeginDBTransaction">
            <summary>
            トランザクションの開始(規定レベル)
            </summary>
            <returns>SqlTransactionインスタンス</returns>
        </member>
        <member name="M:cklib.DB.DBInstance.ExecuteNonQuery">
            <summary>
            ExecuteNonQueryのラッパーメソッド
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.DB.DBInstance.ExecuteScalar">
            <summary>
            ExecuteScalarのラッパーメソッド
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.DB.DBInstance.ExecuteReader">
            <summary>
            ExecuteReaderのラッパーメソッド
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.DB.DBInstance.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            ExecuteReaderのラッパーメソッド
            </summary>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.DB.DBInstance.ExecuteXmlReader">
            <summary>
            ExecuteXmlReaderのラッパー
            </summary>
            <returns>XmlReader</returns>
        </member>
        <member name="M:cklib.DB.DBInstance.ReleaseSqlResource">
            <summary>
            SQL接続リソースの開放
            </summary>
        </member>
        <member name="M:cklib.DB.DBInstance.PurgeNoUseParameters">
            <summary>
            パラメータ化クエリ未使用パラメータの削除
            </summary>
        </member>
        <member name="T:cklib.DB.DBTransaction">
            <summary>
            SqlServerDBTransactionラッパークラス
            </summary>
            <remarks>
            Commitされていない場合インスタンス解放時にロールバックされる<br/>
            </remarks>
        </member>
        <member name="F:cklib.DB.DBTransaction.m_Commited">
            <summary>
            コミット済み未済みフラグ
            </summary>
        </member>
        <member name="F:cklib.DB.DBTransaction.dbInstance">
            <summary>
            DBインスタンス
            </summary>
        </member>
        <member name="P:cklib.DB.DBTransaction.IsCommited">
            <summary>
            コミット済み未済いフラグ
            </summary>
        </member>
        <member name="F:cklib.DB.DBTransaction.Transaction">
            <summary>
            SQLトランザクションインスタンス
            </summary>
        </member>
        <member name="M:cklib.DB.DBTransaction.#ctor(System.Data.SqlClient.SqlTransaction,cklib.DB.DBInstance)">
            <summary>
            コンストラクタ
            </summary>
            <param name="Transaction">生成済みのトランザクションインスタンス</param>
            <param name="dbInstance">DB接続インスタンス</param>
        </member>
        <member name="M:cklib.DB.DBTransaction.Finalize">
            <summary>
            ディストラクタ
            </summary>
        </member>
        <member name="F:cklib.DB.DBTransaction.disposed">
            <summary>
            Dispose完了フラグ
            </summary>
        </member>
        <member name="M:cklib.DB.DBTransaction.Dispose">
            <summary>
            Disposeメソッド
            </summary>
        </member>
        <member name="M:cklib.DB.DBTransaction.Dispose(System.Boolean)">
            <summary>
            Dispose処理の実装
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:cklib.DB.DBTransaction.Commit">
            <summary>
            トランザクションをコミットする
            </summary>
        </member>
        <member name="T:cklib.DB.SQLTraceFormatter">
            <summary>
            通信トレースログ内容を書式化する
            </summary>
        </member>
        <member name="M:cklib.DB.SQLTraceFormatter.Format(cklib.Log.LogData,cklib.Log.Config.BasicLogConfig,cklib.Log.LogingEngine)">
            <summary>
            書式化処理(バイト配列出力)
            </summary>
            <param name="Data">ログデータ</param>
            <param name="conf">該当出力先のログ設定</param>
            <param name="engine">ログエンジンインスタンス</param>
            <returns>書式化後データ</returns>
        </member>
        <member name="M:cklib.DB.SQLTraceFormatter.FormatString(cklib.Log.LogData,cklib.Log.Config.BasicLogConfig,cklib.Log.LogingEngine)">
            <summary>
            書式化処理(文字列出力)
            </summary>
            <param name="Data">ログデータ</param>
            <param name="conf">該当出力先のログ設定</param>
            <param name="engine">ログエンジンインスタンス</param>
            <returns>書式化後データ</returns>
        </member>
        <member name="T:cklib.DB.SQLTraceLogCode">
            <summary>
            SQLトレース用ログコード
            </summary>
        </member>
        <member name="F:cklib.DB.SQLTraceLogCode.Connect">
            <summary>
            接続
            </summary>
        </member>
        <member name="F:cklib.DB.SQLTraceLogCode.BeginTransaction">
            <summary>
            トランザクション開始
            </summary>
        </member>
        <member name="F:cklib.DB.SQLTraceLogCode.Statement">
            <summary>
            SQLステートメント
            </summary>
        </member>
        <member name="F:cklib.DB.SQLTraceLogCode.Commit">
            <summary>
            トランザクションコミット
            </summary>
        </member>
        <member name="F:cklib.DB.SQLTraceLogCode.RollBack">
            <summary>
            トランザクションロールバック
            </summary>
        </member>
        <member name="F:cklib.DB.SQLTraceLogCode.Close">
            <summary>
            接続解放
            </summary>
        </member>
        <member name="F:cklib.DB.SQLTraceLogCode.Error">
            <summary>
            エラー
            </summary>
        </member>
        <member name="F:cklib.DB.SQLTraceLogCode.Message">
            <summary>
            メッセージ
            </summary>
        </member>
        <member name="T:cklib.DB.TryScope`1">
            <summary>
            DB処理スコープ制御
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.DefaultErrorLogCode">
            <summary>
            デフォルトのエラーログコード
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.DefaultDBConnectErrorLogCode">
            <summary>
            デフォルトのDBエラーログコード
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.DefaultDBErrorLogCode">
            <summary>
            デフォルトのDBエラーログコード
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.DefaultDeadLockErrorLogCode">
            <summary>
            デフォルトのデッドロックエラーログコード
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.DefaultDeadLockRetryOverErrorLogCode">
            <summary>
            デフォルトのデッドロックリトライオーバーログコード
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.DefaultTimeoutErrorLogCode">
            <summary>
            デフォルトのコマンドタイムアウトエラーログコード
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.DefaultTimeoutRetryOverErrorLogCode">
            <summary>
            デフォルトのタイムアウトリトライオーバーログコード
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.DefaultLogLevelErrorTerminate">
            <summary>
            エラーにより処理を終結するログ出力のログレベル
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.DefaultLogLevelErrorRetry">
            <summary>
            エラーにより処理を再思考するログ出力のログレベル
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.DefaultLogManagerKey">
            <summary>
            ログ採取マネージャーキー
            </summary>
        </member>
        <member name="P:cklib.DB.TryScope`1.ErrorLogCode">
            <summary>
            デフォルトのエラーログコード
            </summary>
        </member>
        <member name="P:cklib.DB.TryScope`1.DBConnectErrorLogCode">
            <summary>
            DBエラーログコード
            </summary>
        </member>
        <member name="P:cklib.DB.TryScope`1.DBErrorLogCode">
            <summary>
            デフォルトのDBエラーログコード
            </summary>
        </member>
        <member name="P:cklib.DB.TryScope`1.DeadLockErrorLogCode">
            <summary>
            デッドロックエラーログコード
            </summary>
        </member>
        <member name="P:cklib.DB.TryScope`1.DeadLockRetryOverErrorLogCode">
            <summary>
            デッドロックリトライオーバーログコード
            </summary>
        </member>
        <member name="P:cklib.DB.TryScope`1.TimeoutErrorLogCode">
            <summary>
            コマンドタイムアウトエラーログコード
            </summary>
        </member>
        <member name="P:cklib.DB.TryScope`1.TimeoutRetryOverErrorLogCode">
            <summary>
            タイムアウトリトライオーバーログコード
            </summary>
        </member>
        <member name="P:cklib.DB.TryScope`1.LogLevelErrorTerminate">
            <summary>
            エラーにより処理を終結するログ出力のログレベル
            </summary>
        </member>
        <member name="P:cklib.DB.TryScope`1.LogLevelErrorRetry">
            <summary>
            エラーにより処理を再思考するログ出力のログレベル
            </summary>
        </member>
        <member name="P:cklib.DB.TryScope`1.LogManagerKey">
            <summary>
            ログ採取マネージャーキー
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.log">
            <summary>
            ログインスタンス
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.DefaultEnableDeadLockRetry">
            <summary>
            デッドロックリトライ可否
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.DefaultDeadLockRetryCountLimit">
            <summary>
            デッドロックリトライ回数
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.DefaultDeadLockRetryDelayTime">
            <summary>
            デッドロックリトライディレイ時間(ミリ秒）
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.DefaultEnableTimeoutRetry">
            <summary>
            コマンドタイムアウトリトライ可否
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.DefaultTimoutRetryCountLimit">
            <summary>
            コマンドタイムアウトリトライ回数
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.DefaultTimeoutRetryDelayTime">
            <summary>
            コマンドタイムアウトディレイ時間(ミリ秒）
            </summary>
        </member>
        <member name="P:cklib.DB.TryScope`1.EnableDeadLockRetry">
            <summary>
            デッドロックリトライ可否
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.m_EnableDeadLockRetry">
            <summary>
            デッドロックリトライ可否
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.m_EnableDeadLockRetrySetup">
            <summary>
            デッドロックリトライ可否個別設定有効
            </summary>
        </member>
        <member name="P:cklib.DB.TryScope`1.DeadLockRetryCountLimit">
            <summary>
            デッドロックリトライ回数
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.m_DeadLockRetryCountLimit">
            <summary>
            デッドロックリトライ回数
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.m_DeadLockRetryCount">
            <summary>
            デッドロックリトライ回数
            </summary>
        </member>
        <member name="P:cklib.DB.TryScope`1.DeadLockRetryDelayTime">
            <summary>
            デッドロックリトライディレイ時間(ミリ秒）
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.m_DeadLockRetryDelayTime">
            <summary>
            デッドロックリトライディレイ時間(ミリ秒）
            </summary>
        </member>
        <member name="P:cklib.DB.TryScope`1.EnableTimeoutRetry">
            <summary>
            コマンドタイムアウトリトライ可否
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.m_EnableTimeoutRetry">
            <summary>
            コマンドタイムアウトリトライ可否
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.m_EnableTimeoutRetrySetup">
            <summary>
            コマンドタイムアウトリトライ可否個別設定有効
            </summary>
        </member>
        <member name="P:cklib.DB.TryScope`1.TimoutRetryCountLimit">
            <summary>
            コマンドタイムアウトリトライ回数
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.m_TimoutRetryCountLimit">
            <summary>
            コマンドタイムアウトリトライ回数
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.m_TimoutRetryCount">
            <summary>
            コマンドタイムアウトリトライ回数
            </summary>
        </member>
        <member name="P:cklib.DB.TryScope`1.TimeoutRetryDelayTime">
            <summary>
            コマンドタイムアウトディレイ時間(ミリ秒）
            </summary>
        </member>
        <member name="F:cklib.DB.TryScope`1.m_TimeoutRetryDelayTime">
            <summary>
            コマンドタイムアウトディレイ時間(ミリ秒）
            </summary>
        </member>
        <member name="M:cklib.DB.TryScope`1.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.DB.TryScope`1.InnerLog(System.Int32,cklib.Log.LogLevel,System.Int32,System.String,System.Object[])">
            <summary>
            内部イベントのログ
            </summary>
            <param name="depth">スタックトレースの深さ</param>
            <param name="level">ログレベル</param>
            <param name="Code">ログコード</param>
            <param name="msg">メッセージ</param>
            <param name="prms">その他パラメータ</param>
        </member>
        <member name="M:cklib.DB.TryScope`1.GetCallNestDepth">
            <summary>
            外部モジュールからの呼び出しネスト数を取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.DB.TryScope`1.GetLogMessage(System.Int32)">
            <summary>
            ログコードに対応したエラーメッセージを取得する
            </summary>
            <param name="LocCode"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.DB.TryScope`1.SqlErrorHandler(System.Data.SqlClient.SqlException)">
            <summary>
            Sqlエラー
            </summary>
            <param name="exp">SQL例外情報</param>
            <returns>リトライ処理続行</returns>
        </member>
        <member name="M:cklib.DB.TryScope`1.SqlNoRetryErrorHandler(System.Data.SqlClient.SqlException)">
            <summary>
            リトライ対象外Sqlエラー
            </summary>
        </member>
        <member name="M:cklib.DB.TryScope`1.SqlConnectErrorHandler(System.Exception)">
            <summary>
            Sql接続エラー
            </summary>
            <param name="exp">SQL例外情報</param>
        </member>
        <member name="M:cklib.DB.TryScope`1.OtherErrorHandler(System.Exception)">
            <summary>
            その他エラー
            </summary>
            <param name="exp">SQL例外情報</param>
        </member>
        <member name="M:cklib.DB.TryScope`1.DBConnectInstance">
            <summary>
            DB接続インスタンスの初期化
            </summary>
            <returns></returns>
        </member>
        <member name="T:cklib.DB.TryScope`1.Func">
            <summary>
            DB処理スコープデリゲート
            </summary>
            <param name="db"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.DB.TryScope`1.Transaction(`0,cklib.DB.TryScope{`0}.Func,System.Data.IsolationLevel)">
            <summary>
            DBアクセススコープ
            </summary>
            <param name="db">db接続インスタンス</param>
            <param name="tryScope">DBトランザクションスコープ</param>
            <param name="iso">分離レベル</param>
            <returns>処理成否</returns>
        </member>
        <member name="M:cklib.DB.TryScope`1.Transaction(cklib.DB.TryScope{`0}.Func,System.Data.IsolationLevel)">
            <summary>
            DBアクセススコープ
            </summary>
            <remarks>
            リトライをDB再接続から行う<br/>
            DB接続はデフォルトとなる。<br/>
            接続方法をカスタマイズする場合は<see cref="M:cklib.DB.TryScope`1.DBConnectInstance">DBConnectInstance</see>をオーバーライドする
            </remarks>
            <param name="tryScope">DBトランザクションスコープ</param>
            <param name="iso">分離レベル</param>
            <returns>処理成否</returns>
        </member>
        <member name="M:cklib.DB.TryScope`1.AutoTransaction(`0,cklib.DB.TryScope{`0}.Func)">
            <summary>
            DBアクセススコープ
            </summary>
            <param name="db">db接続インスタンス</param>
            <param name="tryScope">DBトランザクションスコープ</param>
            <returns>処理成否</returns>
        </member>
        <member name="M:cklib.DB.TryScope`1.AutoTransaction(cklib.DB.TryScope{`0}.Func)">
            <summary>
            DBアクセススコープ
            </summary>
            <remarks>
            リトライをDB再接続から行う<br/>
            DB接続はデフォルトとなる。<br/>
            接続方法をカスタマイズする場合は<see cref="M:cklib.DB.TryScope`1.DBConnectInstance">DBConnectInstance</see>をオーバーライドする
            </remarks>
            <param name="tryScope">DBトランザクションスコープ</param>
            <returns>処理成否</returns>
        </member>
        <member name="T:cklib.Log.Config.MessageElement">
            <summary>
            メッセージ定義コレクション
            </summary>
        </member>
        <member name="M:cklib.Log.Config.MessageElement.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="P:cklib.Log.Config.MessageElement.Name">
            <summary>
            ログコード名指定
            </summary>
        </member>
        <member name="P:cklib.Log.Config.MessageElement.Level">
            <summary>
            ログレベル指定
            </summary>
        </member>
        <member name="P:cklib.Log.Config.MessageElement.Code">
            <summary>
            ログコード指定
            </summary>
        </member>
        <member name="P:cklib.Log.Config.MessageElement.Format">
            <summary>
            メッセージフォーマット
            </summary>
        </member>
        <member name="T:cklib.Log.Config.MessageElementCollection">
            <summary>
            ログメッセージエレメントクラス
            </summary>
        </member>
        <member name="M:cklib.Log.Config.MessageElementCollection.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Log.Config.MessageElementCollection.Get(System.Int32)">
            <summary>
            MessageElementCollection 内の MessageElement をインデックスから取得
            </summary>
            <param name="index">先頭からのインデックス</param>
            <returns>MessageElement</returns>
        </member>
        <member name="M:cklib.Log.Config.MessageElementCollection.Get(System.String)">
            <summary>
            MessageElementCollection 内の MessageElement をキーから取得
            </summary>
            <param name="name">キー</param>
            <returns>MessageElement</returns>
        </member>
        <member name="M:cklib.Log.Config.MessageElementCollection.Contains(System.String)">
            <summary>
            MessageElementCollection 内に指定したキーの MessageElement があるか
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.Config.MessageElementCollection.CreateNewElement">
            <summary>
            新しい ConfigurationElement を作成
            </summary>
            <returns>作成されたConfigurationElement</returns>
        </member>
        <member name="M:cklib.Log.Config.MessageElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            指定した構成要素の要素キーを取得
            </summary>
            <param name="element">ConfigurationElement</param>
            <returns>キー</returns>
        </member>
        <member name="T:cklib.Log.Config.BasicLogConfig">
            <summary>
            個別設定項目共通設定項目情報
            </summary>
        </member>
        <member name="F:cklib.Log.Config.BasicLogConfig.fConfElm">
            <summary>
            設定ファイル情報
            </summary>
        </member>
        <member name="M:cklib.Log.Config.BasicLogConfig.#ctor(System.String,cklib.Log.Config.LoggerConfigElement)">
            <summary>
            コンストラクタ
            </summary>
            <param name="Name">エレメント名を指定</param>
            <param name="e"></param>
        </member>
        <member name="M:cklib.Log.Config.BasicLogConfig.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="Name">エレメント名を指定</param>
        </member>
        <member name="F:cklib.Log.Config.BasicLogConfig.Name">
            <summary>
            エレメント名
            </summary>
        </member>
        <member name="P:cklib.Log.Config.BasicLogConfig.Enabled">
            <summary>
            有効・無効設定
            </summary>
        </member>
        <member name="F:cklib.Log.Config.BasicLogConfig.enabled">
            <summary>
            有効・無効設定
            </summary>
        </member>
        <member name="P:cklib.Log.Config.BasicLogConfig.Level">
            <summary>
            ログレベル
            </summary>
        </member>
        <member name="F:cklib.Log.Config.BasicLogConfig.level">
            <summary>
            ログレベル
            </summary>
        </member>
        <member name="M:cklib.Log.Config.BasicLogConfig.LogLevelString(System.String)">
            <summary>
            文字列からログレベルに変換する
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="P:cklib.Log.Config.BasicLogConfig.Format">
            <summary>
            書式
            </summary>
        </member>
        <member name="F:cklib.Log.Config.BasicLogConfig.format">
            <summary>
            書式
            </summary>
        </member>
        <member name="P:cklib.Log.Config.BasicLogConfig.Encoding">
            <summary>
            文字エンコーディング
            </summary>
        </member>
        <member name="F:cklib.Log.Config.BasicLogConfig.encoding">
            <summary>
            文字エンコーディング
            </summary>
        </member>
        <member name="P:cklib.Log.Config.BasicLogConfig.Scramble">
            <summary>
            スクランブルの有無
            </summary>
        </member>
        <member name="F:cklib.Log.Config.BasicLogConfig.scramble">
            <summary>
            スクランブルの有無
            </summary>
        </member>
        <member name="P:cklib.Log.Config.BasicLogConfig.ScrambleKey">
            <summary>
            スクランブルのキー
            </summary>
        </member>
        <member name="F:cklib.Log.Config.BasicLogConfig.scrambleKey">
            <summary>
            スクランブルのキー
            </summary>
        </member>
        <member name="P:cklib.Log.Config.BasicLogConfig.MessageMaxLength">
            <summary>
            メッセージ上限文字数
            </summary>
            <remarks>
            2016/08/23 イベントログ長さチェック追加
            </remarks>
        </member>
        <member name="T:cklib.Log.Config.CommonConfig">
            <summary>
            共通設定
            </summary>
        </member>
        <member name="F:cklib.Log.Config.CommonConfig.fConfElm">
            <summary>
            設定ファイル情報
            </summary>
        </member>
        <member name="M:cklib.Log.Config.CommonConfig.#ctor(cklib.Log.Config.CommonConfigElement)">
            <summary>
            コンストラクタ
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:cklib.Log.Config.CommonConfig.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="P:cklib.Log.Config.CommonConfig.BackGround">
            <summary>
            BackGroundモード
            </summary>
        </member>
        <member name="F:cklib.Log.Config.CommonConfig.background">
            <summary>
            BackGroundモード
            </summary>
        </member>
        <member name="P:cklib.Log.Config.CommonConfig.QueueingSize">
            <summary>
            BackGroundモード時のキューイング数
            </summary>
        </member>
        <member name="F:cklib.Log.Config.CommonConfig.queueingSize">
            <summary>
            BackGroundモード時のキューイング数
            </summary>
        </member>
        <member name="P:cklib.Log.Config.CommonConfig.MessageFile">
            <summary>
            メッセージファイル定義
            </summary>
        </member>
        <member name="P:cklib.Log.Config.CommonConfig.LogLevelConfigurationPriority">
            <summary>
            ログレベルメッセージ設定優先モード
            </summary>
        </member>
        <member name="P:cklib.Log.Config.CommonConfig.LogCodeOffset">
            <summary>
            ログコードオフセット値
            </summary>
        </member>
        <member name="F:cklib.Log.Config.CommonConfig.logCodeOffset">
            <summary>
            ログコードオフセット値
            </summary>
        </member>
        <member name="P:cklib.Log.Config.CommonConfig.FlushDelay">
            <summary>
            ログフラッシュディレイ時間(ミリ秒)
            </summary>
        </member>
        <member name="P:cklib.Log.Config.CommonConfig.NotThrowExceptionInFormatError">
            <summary>
            ログメッセージ書式化異常時例外をスローしない)
            </summary>
        </member>
        <member name="T:cklib.Log.Config.CommonConfigElement">
            <summary>
            共通設定
            </summary>
        </member>
        <member name="M:cklib.Log.Config.CommonConfigElement.#ctor">
            <summary>
            デフォルトコンストラクタ
            </summary>
        </member>
        <member name="P:cklib.Log.Config.CommonConfigElement.Name">
            <summary>
            エレメント名
            </summary>
        </member>
        <member name="P:cklib.Log.Config.CommonConfigElement.BackGround">
            <summary>
            BackGroundモード
            </summary>
        </member>
        <member name="P:cklib.Log.Config.CommonConfigElement.QueueingSize">
            <summary>
            BackGroundモード時のキューイング数
            </summary>
        </member>
        <member name="P:cklib.Log.Config.CommonConfigElement.messagefile">
            <summary>
            メッセージファイル定義
            </summary>
        </member>
        <member name="P:cklib.Log.Config.CommonConfigElement.LogLevelConfigurationPriority">
            <summary>
            ログレベルメッセージ設定優先モード
            </summary>
        </member>
        <member name="P:cklib.Log.Config.CommonConfigElement.LogCodeOffset">
            <summary>
            ログコードオフセット値
            </summary>
        </member>
        <member name="P:cklib.Log.Config.CommonConfigElement.FlushDelay">
            <summary>
            ログフラッシュディレイ時間(ミリ秒)
            </summary>
        </member>
        <member name="P:cklib.Log.Config.CommonConfigElement.NotThrowExceptionInFormatError">
            <summary>
            ログメッセージ書式化異常時例外をスローしない)
            </summary>
        </member>
        <member name="T:cklib.Log.Config.ConfigInfo">
            <summary>
            ログ設定情報クラス
            </summary>
        </member>
        <member name="F:cklib.Log.Config.ConfigInfo.DefaultConfigSectionName">
            <summary>
            デフォルトのコンフィグレーションセクション名
            </summary>
        </member>
        <member name="F:cklib.Log.Config.ConfigInfo.SectionName">
            <summary>
            ログ設定セクション名
            </summary>
        </member>
        <member name="M:cklib.Log.Config.ConfigInfo.#ctor(System.Configuration.Configuration,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="conf">構成ファイル指定</param>
            <param name="sectionname">セクション名</param>
        </member>
        <member name="M:cklib.Log.Config.ConfigInfo.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="sectionname">セクション名</param>
        </member>
        <member name="M:cklib.Log.Config.ConfigInfo.IntializeLoggerConfig(cklib.Log.Config.LoggerConfig)">
            <summary>
            設定ファイルで初期化する
            </summary>
            <param name="lc"></param>
        </member>
        <member name="M:cklib.Log.Config.ConfigInfo.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="F:cklib.Log.Config.ConfigInfo.m_Common">
            <summary>
            共通ログ設定
            </summary>
        </member>
        <member name="P:cklib.Log.Config.ConfigInfo.Common">
            <summary>
            共通ログ設定
            </summary>
        </member>
        <member name="F:cklib.Log.Config.ConfigInfo.m_Console">
            <summary>
            コンソールログ設定
            </summary>
        </member>
        <member name="P:cklib.Log.Config.ConfigInfo.Console">
            <summary>
            コンソールログ設定
            </summary>
        </member>
        <member name="F:cklib.Log.Config.ConfigInfo.m_Extend">
            <summary>
            拡張ログ設定
            </summary>
        </member>
        <member name="P:cklib.Log.Config.ConfigInfo.Extend">
            <summary>
            拡張ログ設定
            </summary>
        </member>
        <member name="F:cklib.Log.Config.ConfigInfo.m_File">
            <summary>
            ファイルログ設定
            </summary>
        </member>
        <member name="P:cklib.Log.Config.ConfigInfo.File">
            <summary>
            ファイルログ設定
            </summary>
        </member>
        <member name="F:cklib.Log.Config.ConfigInfo.m_EventLog">
            <summary>
            イベントログ設定
            </summary>
        </member>
        <member name="P:cklib.Log.Config.ConfigInfo.EventLog">
            <summary>
            イベントログ設定
            </summary>
        </member>
        <member name="F:cklib.Log.Config.ConfigInfo.m_Syslog">
            <summary>
            syslog設定
            </summary>
        </member>
        <member name="P:cklib.Log.Config.ConfigInfo.Syslog">
            <summary>
            syslog設定
            </summary>
        </member>
        <member name="F:cklib.Log.Config.ConfigInfo.m_Default">
            <summary>
            デフォルトログ設定
            </summary>
            <remarks>
            書式指定のみ有効
            </remarks>
        </member>
        <member name="P:cklib.Log.Config.ConfigInfo.Default">
            <summary>
            デフォルトログ設定
            </summary>
            <remarks>
            書式指定のみ有効
            </remarks>
        </member>
        <member name="P:cklib.Log.Config.ConfigInfo.Message">
            <summary>
            ログメッセージ定義
            </summary>
        </member>
        <member name="M:cklib.Log.Config.ConfigInfo.SetMessageConfig(cklib.Log.Config.MessagesConfig)">
            <summary>
            ログメッセージ定義変更
            </summary>
        </member>
        <member name="F:cklib.Log.Config.ConfigInfo.m_Message">
            <summary>
            ログメッセージ定義
            </summary>
        </member>
        <member name="M:cklib.Log.Config.ConfigInfo.IsValidLevel(cklib.Log.LogLevel)">
            <summary>
            記録対象のログレベルのチェック
            </summary>
            <param name="level">レベル</param>
            <returns>記録対象ならtrue</returns>
        </member>
        <member name="F:cklib.Log.Config.ConfigInfo.ExtendLogInstance">
            <summary>
            ログ拡張モジュールクラスインスタンス
            </summary>
            <remarks>
            ExtendLogクラスの派生クラスを定義し設定する
            </remarks>
        </member>
        <member name="F:cklib.Log.Config.ConfigInfo.FormatterInstance">
            <summary>
            書式化モジュール
            </summary>
            <remarks>
            ログをフォーマットする書式化モジュール、標準機能以外の書式化が必要な場合はFormatterクラスを定義し設定する
            </remarks>
        </member>
        <member name="F:cklib.Log.Config.ConfigInfo.ScramblerInstance">
            <summary>
            暗号化モジュール
            </summary>
            <remarks>
            DES以外の暗号化方式を使用する場合は、Scramblerクラスを定義し設定する
            </remarks>
        </member>
        <member name="F:cklib.Log.Config.ConfigInfo.FileRotaterInstance">
            <summary>
            ログファイルローテータモジュール
            </summary>
            <remarks>
            基本のローテート方式以外を使用する場合FileRotaterクラスを定義し設定する
            </remarks>
        </member>
        <member name="F:cklib.Log.Config.ConfigInfo.ExceptionFormaterList">
            <summary>
            例外書式化モジュールの一覧
            </summary>
        </member>
        <member name="M:cklib.Log.Config.ConfigInfo.SetExceptionFormater(cklib.Log.ExceptionFormater)">
            <summary>
            例外書式化モジュールの追加
            </summary>
            <param name="ef"></param>
        </member>
        <member name="M:cklib.Log.Config.ConfigInfo.SetupDefaultExceptionFormaterList">
            <summary>
            デフォルト例外書式化モジュールのセットアップ
            </summary>
        </member>
        <member name="T:cklib.Log.Config.FileLogConfig">
            <summary>
            個別設定項目共通設定項目情報
            </summary>
        </member>
        <member name="M:cklib.Log.Config.FileLogConfig.#ctor(cklib.Log.Config.LoggerConfigElement)">
            <summary>
            コンストラクタ
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:cklib.Log.Config.FileLogConfig.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="P:cklib.Log.Config.FileLogConfig.Path">
            <summary>
            出力パス
            </summary>
        </member>
        <member name="F:cklib.Log.Config.FileLogConfig.logPath">
            <summary>
            出力パス
            </summary>
        </member>
        <member name="P:cklib.Log.Config.FileLogConfig.FileName">
            <summary>
            出力ファイル名
            </summary>
        </member>
        <member name="F:cklib.Log.Config.FileLogConfig.logFileName">
            <summary>
            出力ファイル名
            </summary>
        </member>
        <member name="P:cklib.Log.Config.FileLogConfig.FileLock">
            <summary>
            ログファイルロック
            </summary>
            <remarks>
            ログファイルを書き込みロックする<br/>
            マルチプロセスで同一ログファイルに書き込む際有効にする
            </remarks>
        </member>
        <member name="F:cklib.Log.Config.FileLogConfig.fileLock">
            <summary>
            ログファイルロック
            </summary>
        </member>
        <member name="P:cklib.Log.Config.FileLogConfig.FileLockWaitTime">
            <summary>
            ログファイルロックリトライインターバル(msec
            </summary>
            <remarks>
            ログファイルオープン時の排他ロックによるリトライ時間<br/>
            マルチプロセスで同一ログファイルに書き込む際有効にする
            </remarks>
        </member>
        <member name="F:cklib.Log.Config.FileLogConfig.fileLockWaitTime">
            <summary>
            ログファイルロックリトライインターバル(msec
            </summary>
        </member>
        <member name="P:cklib.Log.Config.FileLogConfig.FileLockTryLimit">
            <summary>
            ログファイルロックリトライ回数
            </summary>
            <remarks>
            ログファイルオープン時の排他ロックによるリトライ試行回数<br/>
            マルチプロセスで同一ログファイルに書き込む際有効にする
            </remarks>
        </member>
        <member name="P:cklib.Log.Config.FileLogConfig.MutexLockEnable">
            <summary>
            ログ排他制御Mutex有効
            </summary>
        </member>
        <member name="P:cklib.Log.Config.FileLogConfig.MutexLock">
            <summary>
            ログ排他制御Mutex名
            </summary>
            <remarks>
            ログ書き込みをMutexにより排他制御する。空文字の場合は無効
            </remarks>
        </member>
        <member name="P:cklib.Log.Config.FileLogConfig.MutexLockWaitTime">
            <summary>
            ログ排他制御Mutex待機時間(msec)
            </summary>
            <remarks>
            ログ排他制御Mutexをロック出来るまでの待機時間<br/>
            タイムオーバーした場合は、ログ書き込みは失敗する。
            </remarks>
        </member>
        <member name="P:cklib.Log.Config.FileLogConfig.Compress">
            <summary>
            ログを圧縮ファイルにする
            </summary>
        </member>
        <member name="F:cklib.Log.Config.FileLogConfig.compress">
            <summary>
            ログを圧縮ファイルにする
            </summary>
        </member>
        <member name="P:cklib.Log.Config.FileLogConfig.RotateDays">
            <summary>
            ログローテション保存日数
            </summary>
        </member>
        <member name="F:cklib.Log.Config.FileLogConfig.rotateDays">
            <summary>
            ログローテション保存日数
            </summary>
        </member>
        <member name="M:cklib.Log.Config.FileLogConfig.SetRotateSize(System.String)">
            <summary>
            ログローテションサイズ指定
            </summary>
            <param name="str">ローテーションサイズを文字列で指定する<bf/>K/M/Gの単位指定可</param>
        </member>
        <member name="F:cklib.Log.Config.FileLogConfig.rotateSizeStr">
            <summary>
            ログローテションサイズ指定
            </summary>
        </member>
        <member name="P:cklib.Log.Config.FileLogConfig.RotateSize">
            <summary>
            ログローテションサイズ指定
            </summary>
        </member>
        <member name="F:cklib.Log.Config.FileLogConfig.rotateSize">
            <summary>
            ログローテションサイズ指定
            </summary>
        </member>
        <member name="P:cklib.Log.Config.FileLogConfig.RotateFileName">
            <summary>
            ローテートログファイル名
            </summary>
            <remarks>
            項目番号　項目内容<br/>
            {0} ログファイル名<br/>
            {1} 日時<br/>
            {2} ㍉秒<br/>
            {3} 同日ログの通番<br/>
            通番と日時混在は不可
            通番は、編集を可変すると最大値抽出が困難となるので、位置固定とします。
            デフォルトは以下の書式<br/>
            {0}.{3}.log<br/>
            </remarks>
        </member>
        <member name="F:cklib.Log.Config.FileLogConfig.rotateFileName">
            <summary>
            ローテートログファイル名
            </summary>
        </member>
        <member name="P:cklib.Log.Config.FileLogConfig.ZipRotate">
            <summary>
            ZIPローテション
            </summary>
        </member>
        <member name="F:cklib.Log.Config.FileLogConfig.zipRotate">
            <summary>
            ZIPローテション
            </summary>
        </member>
        <member name="P:cklib.Log.Config.FileLogConfig.ZipRotateDays">
            <summary>
            ZIPローテション実施日数
            </summary>
        </member>
        <member name="F:cklib.Log.Config.FileLogConfig.zipRotateDays">
            <summary>
            ZIPローテション実施日数
            </summary>
        </member>
        <member name="P:cklib.Log.Config.FileLogConfig.ZipRotatePassword">
            <summary>
            ZIPローテションパスワード
            </summary>
        </member>
        <member name="F:cklib.Log.Config.FileLogConfig.zipRotatePassword">
            <summary>
            ZIPローテションパスワード
            </summary>
        </member>
        <member name="T:cklib.Log.Config.EventLogConfig">
            <summary>
            個別設定項目共通設定項目情報
            </summary>
        </member>
        <member name="M:cklib.Log.Config.EventLogConfig.#ctor(cklib.Log.Config.LoggerConfigElement)">
            <summary>
            コンストラクタ
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:cklib.Log.Config.EventLogConfig.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="P:cklib.Log.Config.EventLogConfig.EventSource">
            <summary>
            イベントソースの取得
            </summary>
        </member>
        <member name="F:cklib.Log.Config.EventLogConfig.eventSource">
            <summary>
            イベントソース
            </summary>
        </member>
        <member name="P:cklib.Log.Config.EventLogConfig.EventLogName">
            <summary>
            イベントログ名（アプリケーション・システム等）
            </summary>
        </member>
        <member name="F:cklib.Log.Config.EventLogConfig.eventLogName">
            <summary>
            イベントログ名（アプリケーション・システム等）
            </summary>
        </member>
        <member name="M:cklib.Log.Config.EventLogConfig.LogLevelToEventLogType(cklib.Log.LogLevel)">
            <summary>
            レベルをイベントログ種類に変換
            </summary>
            <param name="level">ログレベル</param>
            <returns>イベントログ種類</returns>
        </member>
        <member name="P:cklib.Log.Config.EventLogConfig.EventLogTRACE">
            <summary>
            イベントログ TRACEログレベルマップ
            </summary>
        </member>
        <member name="F:cklib.Log.Config.EventLogConfig.eventLogTRACE">
            <summary>
            ログレベルDEBUGのイベントログ種類
            </summary>
        </member>
        <member name="P:cklib.Log.Config.EventLogConfig.EventLogDEBUG">
            <summary>
            イベントログ Debugログレベルマップ
            </summary>
        </member>
        <member name="F:cklib.Log.Config.EventLogConfig.eventLogDEBUG">
            <summary>
            ログレベルDEBUGのイベントログ種類
            </summary>
        </member>
        <member name="P:cklib.Log.Config.EventLogConfig.EventLogINFO">
            <summary>
            イベントログ INFOログレベルマップ
            </summary>
        </member>
        <member name="F:cklib.Log.Config.EventLogConfig.eventLogINFO">
            <summary>
            ログレベルINFOのイベントログ種類
            </summary>
        </member>
        <member name="P:cklib.Log.Config.EventLogConfig.EventLogNOTE">
            <summary>
            イベントログ NOTEログレベルマップ
            </summary>
        </member>
        <member name="F:cklib.Log.Config.EventLogConfig.eventLogNOTE">
            <summary>
            ログレベルNOTEのイベントログ種類
            </summary>
        </member>
        <member name="P:cklib.Log.Config.EventLogConfig.EventLogWARN">
            <summary>
            イベントログ WARNログレベルマップ
            </summary>
        </member>
        <member name="F:cklib.Log.Config.EventLogConfig.eventLogWARN">
            <summary>
            ログレベルWARNのイベントログ種類
            </summary>
        </member>
        <member name="P:cklib.Log.Config.EventLogConfig.EventLogERROR">
            <summary>
            イベントログ ERRORログレベルマップ
            </summary>
        </member>
        <member name="F:cklib.Log.Config.EventLogConfig.eventLogERROR">
            <summary>
            ログレベルERRORのイベントログ種類
            </summary>
        </member>
        <member name="P:cklib.Log.Config.EventLogConfig.EventLogCRITICAL">
            <summary>
            イベントログ CRITICALログレベルマップ
            </summary>
        </member>
        <member name="F:cklib.Log.Config.EventLogConfig.eventLogCRIT">
            <summary>
            ログレベルCRITのイベントログ種類
            </summary>
        </member>
        <member name="P:cklib.Log.Config.EventLogConfig.EventLogALERT">
            <summary>
            イベントログ ALERTログレベルマップ
            </summary>
        </member>
        <member name="F:cklib.Log.Config.EventLogConfig.eventLogALERT">
            <summary>
            ログレベルALERTのイベントログ種類
            </summary>
        </member>
        <member name="P:cklib.Log.Config.EventLogConfig.EventLogEMERGENCY">
            <summary>
            イベントログ EMERGENCYログレベルマップ
            </summary>
        </member>
        <member name="F:cklib.Log.Config.EventLogConfig.eventLogEMERG">
            <summary>
            ログレベルEMERGのイベントログ種類
            </summary>
        </member>
        <member name="P:cklib.Log.Config.EventLogConfig.EventLogFATAL">
            <summary>
            イベントログ FATALログレベルマップ
            </summary>
        </member>
        <member name="F:cklib.Log.Config.EventLogConfig.eventLogFATAL">
            <summary>
            ログレベルFATALのイベントログ種類
            </summary>
        </member>
        <member name="M:cklib.Log.Config.EventLogConfig.EventLogTypeString(System.String)">
            <summary>
            文字列からイベントログのイベント種類に変換する
            </summary>
            <param name="type">イベント種類文字列</param>
            <returns></returns>
        </member>
        <member name="P:cklib.Log.Config.EventLogConfig.MessageMaxLength">
            <summary>
            メッセージ上限文字数
            </summary>
            <remarks>
            2016/08/23 イベントログ長さチェック追加
            </remarks>
        </member>
        <member name="T:cklib.Log.Config.SysLogConfig">
            <summary>
            個別設定項目共通設定項目情報
            </summary>
        </member>
        <member name="M:cklib.Log.Config.SysLogConfig.#ctor(cklib.Log.Config.LoggerConfigElement)">
            <summary>
            コンストラクタ
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:cklib.Log.Config.SysLogConfig.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="P:cklib.Log.Config.SysLogConfig.Host">
            <summary>
            syslogホスト
            </summary>
        </member>
        <member name="F:cklib.Log.Config.SysLogConfig.sysloghost">
            <summary>
            syslogホスト
            </summary>
        </member>
        <member name="P:cklib.Log.Config.SysLogConfig.Port">
            <summary>
            syslogポート番号
            </summary>
        </member>
        <member name="F:cklib.Log.Config.SysLogConfig.port">
            <summary>
            syslogポート番号
            </summary>
        </member>
        <member name="P:cklib.Log.Config.SysLogConfig.Facility">
            <summary>
            syslog ファシリティ
            </summary>
        </member>
        <member name="F:cklib.Log.Config.SysLogConfig.facility">
            <summary>
            syslog ファシリティ
            </summary>
        </member>
        <member name="P:cklib.Log.Config.SysLogConfig.OwnHostname">
            <summary>
            送信元ホスト名
            </summary>
        </member>
        <member name="F:cklib.Log.Config.SysLogConfig.ownHost">
            <summary>
            送信元ホスト名
            </summary>
        </member>
        <member name="T:cklib.Log.Config.LoggerConfig">
            <summary>
            システムログ機能ログ設定
            </summary>
        </member>
        <member name="M:cklib.Log.Config.LoggerConfig.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="F:cklib.Log.Config.LoggerConfig.CommonConfigElementName">
            <summary>
            Commonエレメント名
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfig.Common">
            <summary>
            Commonエレメント
            </summary>
        </member>
        <member name="F:cklib.Log.Config.LoggerConfig.MessageElementCollectionName">
            <summary>
            Messageエレメント名
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfig.Messages">
            <summary>
            Messageエレメント
            </summary>
        </member>
        <member name="F:cklib.Log.Config.LoggerConfig.ConsoleElementCollectionName">
            <summary>
            Consoleエレメント名
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfig.Console">
            <summary>
            Consoleエレメント
            </summary>
        </member>
        <member name="F:cklib.Log.Config.LoggerConfig.FileElementCollectionName">
            <summary>
            Fileエレメント名
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfig.File">
            <summary>
            Fileエレメント
            </summary>
        </member>
        <member name="F:cklib.Log.Config.LoggerConfig.SyslogElementCollectionName">
            <summary>
            Syslogエレメント名
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfig.Syslog">
            <summary>
            Syslogエレメント
            </summary>
        </member>
        <member name="F:cklib.Log.Config.LoggerConfig.EventLogElementCollectionName">
            <summary>
            EventLogエレメント名
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfig.EventLog">
            <summary>
            EventLogエレメント
            </summary>
        </member>
        <member name="F:cklib.Log.Config.LoggerConfig.ExtendElementCollectionName">
            <summary>
            Extendエレメント名
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfig.Extend">
            <summary>
            Extendエレメント
            </summary>
        </member>
        <member name="F:cklib.Log.Config.LoggerConfig.DefaultElementCollectionName">
            <summary>
            Defaultエレメント名
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfig.Default">
            <summary>
            Defaultエレメント
            </summary>
        </member>
        <member name="T:cklib.Log.Config.LoggerConfigElement">
            <summary>
            ログ設定エレメント定義クラス
            </summary>
        </member>
        <member name="M:cklib.Log.Config.LoggerConfigElement.#ctor">
            <summary>
            デフォルトコンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Log.Config.LoggerConfigElement.#ctor(System.String)">
            <summary>
            エレメント
            </summary>
            <param name="elementName"></param>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.Name">
            <summary>
            エレメント名
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.Enabled">
            <summary>
            ログの可否
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.Level">
            <summary>
            ログレベル
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.Path">
            <summary>
            ログファイル格納パス
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.FileName">
            <summary>
            ログファイル名
            </summary>
            <remarks>
            項目番号　項目内容<br/>
            {0} 日時<br/>
            デフォルトは以下の書式<br/>
            {0:yyyyMMdd}.log<br/>
            </remarks>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.FileLock">
            <summary>
            ログファイルロック
            </summary>
            <remarks>
            ログファイルを書き込みロックする<br/>
            マルチプロセスで同一ログファイルに書き込む際有効にする
            </remarks>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.FileLockWaitTime">
            <summary>
            ログファイルロックリトライインターバル(msec
            </summary>
            <remarks>
            ログファイルオープン時の排他ロックによるリトライ時間<br/>
            マルチプロセスで同一ログファイルに書き込む際有効にする
            </remarks>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.FileLockTryLimit">
            <summary>
            ログファイルロックリトライ回数
            </summary>
            <remarks>
            ログファイルオープン時の排他ロックによるリトライ試行回数<br/>
            マルチプロセスで同一ログファイルに書き込む際有効にする
            </remarks>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.MutexLock">
            <summary>
            ログ排他制御Mutex名
            </summary>
            <remarks>
            ログ書き込みをMutexにより排他制御する。空文字の場合は無効
            </remarks>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.MutexLockWaitTime">
            <summary>
            ログ排他制御Mutex待機時間(msec)
            </summary>
            <remarks>
            ログ排他制御Mutexをロック出来るまでの待機時間<br/>
            タイムオーバーした場合は、ログ書き込みは失敗する。
            </remarks>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.RotateDays">
            <summary>
            ログローテション保存日数
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.RotateSize">
            <summary>
            ログローテションサイズ指定
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.RotateFileName">
            <summary>
            ローテートログファイル名
            </summary>
            <remarks>
            項目番号　項目内容<br/>
            {0} ログファイル名<br/>
            {1} 日時<br/>
            {2} ㍉秒<br/>
            {3} 同日ログの通番<br/>
            通番と日時混在は不可
            通番は、編集を可変すると最大値抽出が困難となるので、位置固定とします。
            デフォルトは以下の書式<br/>
            {0}.{3}.log<br/>
            </remarks>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.Compress">
            <summary>
            ログを圧縮ファイルにする
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.ZipRotate">
            <summary>
            ZIPローテション
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.ZipRotateDays">
            <summary>
            ZIPローテション実施日数
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.ZipRotatePassword">
            <summary>
            ZIPローテションパスワード
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.Encoding">
            <summary>
            ログ文字コード設定
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.EventSource">
            <summary>
            イベントソース
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.EventLogName">
            <summary>
            イベントログ名
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.EventLogTRACE">
            <summary>
            イベントログ Debugログレベルマップ
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.EventLogDEBUG">
            <summary>
            イベントログ Debugログレベルマップ
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.EventLogINFO">
            <summary>
            イベントログ INFOログレベルマップ
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.EventLogNOTE">
            <summary>
            イベントログ NOTEログレベルマップ
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.EventLogWARN">
            <summary>
            イベントログ WARNログレベルマップ
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.EventLogERROR">
            <summary>
            イベントログ ERRORログレベルマップ
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.EventLogCRITICAL">
            <summary>
            イベントログ CRITICALログレベルマップ
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.EventLogALERT">
            <summary>
            イベントログ ALERTログレベルマップ
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.EventLogEMERGENCY">
            <summary>
            イベントログ EMERGENCYログレベルマップ
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.EventLogFATAL">
            <summary>
            イベントログ FATALログレベルマップ
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.MessageMaxLength">
            <summary>
            メッセージ上限文字数
            </summary>
            <remarks>
            2016/08/23 イベントログ長さチェック追加
            </remarks>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.Server">
            <summary>
            syslogサーバーのホスト名
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.Port">
            <summary>
            syslogサーバーのポート番号
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.Facility">
            <summary>
            syslogのfacility
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.hostname">
            <summary>
            syslog時の自ホスト名
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.Format">
            <summary>
            書式指定
            </summary>
            <remarks>
            項目番号　項目内容<br/>
            {0} 日時<br/>
            {1} 日時ミリ秒<br/>
            {2} レベル<br/>
            {3} ログコード（デバッグログ時およびログコードを未使用の場合は無視される<br/>
            {4} メッセージ<br/>
            {5} 事象の発生したソース<br/>
            {6} 事象の発生したクラス<br/>
            {7} 事象の発生したクラスメソッド<br/>
            {8} ソースファイルパス<br/>
            {9} ソースファイル名<br/>
            {10} ソース行番号<br/>
            {11} スレッドID<br/>
            デフォルトは以下の書式<br/>
            {0:yyyy/MM/dd HH:mm:ss}.{1:000} {11} {2,-6} {3:0000} {4} {5} {6}.{7} {8}{9}:{10}<br/>
            ※1 例外情報は改行後に付加される<br/>
            ※2 syslogには行単位で送信される<br/>
            </remarks>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.scramble">
            <summary>
            ログファイルの内容を暗号化する
            </summary>
        </member>
        <member name="P:cklib.Log.Config.LoggerConfigElement.scrambleKey">
            <summary>
            暗号化キー
            </summary>
        </member>
        <member name="M:cklib.Log.Config.LoggerConfigElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            エレメントデシリアライズ　
            </summary>
            <param name="reader"></param>
            <param name="serializeCollectionKey"></param>
        </member>
        <member name="M:cklib.Log.Config.LoggerConfigElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            エレメントシリアライズ
            </summary>
            <param name="writer"></param>
            <param name="serializeCollectionKey"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.Config.LoggerConfigElement.IsModified">
            <summary>
            変更の有無を返す
            </summary>
            <returns></returns>
        </member>
        <member name="T:cklib.Log.Config.MessagesConfig">
            <summary>
            ログメッセージ読み出しユーティリティクラス
            </summary>
        </member>
        <member name="T:cklib.Log.Config.MessagesConfig.MessageInfo">
            <summary>
            ログメッセージ情報
            </summary>
        </member>
        <member name="F:cklib.Log.Config.MessagesConfig.MessageInfo.Name">
            <summary>
            ログコード名(namespace.Class.フィール名)
            </summary>
        </member>
        <member name="F:cklib.Log.Config.MessagesConfig.MessageInfo.Code">
            <summary>
            ログコード
            </summary>
        </member>
        <member name="F:cklib.Log.Config.MessagesConfig.MessageInfo.Level">
            <summary>
            ログレベル
            </summary>
        </member>
        <member name="F:cklib.Log.Config.MessagesConfig.MessageInfo.Format">
            <summary>
            書式定義
            </summary>
        </member>
        <member name="F:cklib.Log.Config.MessagesConfig.MessageList">
            <summary>
            メッセージ一覧
            </summary>
        </member>
        <member name="F:cklib.Log.Config.MessagesConfig.NameMessageMapList">
            <summary>
            ログコード名マップ
            </summary>
        </member>
        <member name="M:cklib.Log.Config.MessagesConfig.#ctor">
            <summary>
            デフォルトコンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Log.Config.MessagesConfig.#ctor(cklib.Log.Config.MessageElementCollection)">
            <summary>
            ログ設定からメッセージ取得
            </summary>
            <param name="conf"></param>
        </member>
        <member name="M:cklib.Log.Config.MessagesConfig.#ctor(System.String)">
            <summary>
            メッセージファイル指定
            </summary>
            <param name="MessageFile">メッセージファイルパス</param>
        </member>
        <member name="M:cklib.Log.Config.MessagesConfig.SetMessageFile(System.String)">
            <summary>
            メッセージファイル指定
            </summary>
            <param name="MessageFile">メッセージファイルパス</param>
        </member>
        <member name="M:cklib.Log.Config.MessagesConfig.GetLogCode(cklib.Log.LogCodes)">
            <summary>
            ログコード名からログコードを取得する
            </summary>
            <param name="LogCode"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.Config.MessagesConfig.GetLogLevel(cklib.Log.LogCodes)">
            <summary>
            ログコード名からログレベルを取得する
            </summary>
            <param name="LogCode"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.Config.MessagesConfig.GetLogLevel(System.Int32)">
            <summary>
            ログコードからログレベルを取得する
            </summary>
            <param name="LogCode">ログコード値</param>
            <returns></returns>
        </member>
        <member name="P:cklib.Log.Config.MessagesConfig.Item(System.Int32)">
            <summary>
            ログコード参照
            </summary>
            <param name="LogCode">ログコード値</param>
            <returns></returns>
        </member>
        <member name="P:cklib.Log.Config.MessagesConfig.Item(cklib.Log.LogCodes)">
            <summary>
            ログコード名からメッセージを参照
            </summary>
            <param name="LogCode"></param>
            <returns></returns>
        </member>
        <member name="T:cklib.Log.ExceptionFormater">
            <summary>
            例外を書式化する
            </summary>
        </member>
        <member name="F:cklib.Log.ExceptionFormater.ExceptionType">
            <summary>
            フォーマッタが処理するクラスType
            </summary>
            <remarks>
            派生クラスのコンストラクタで初期化する
            </remarks>
        </member>
        <member name="M:cklib.Log.ExceptionFormater.#ctor(System.Type)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Log.ExceptionFormater.Format(System.Exception)">
            <summary>
            書式化元の例外
            </summary>
            <remarks>
            ToPrintメソッドにより出力されない、Exceotion固有の情報を書式化する<br/>
            ToPrintで出力される情報の前に出力される。
            </remarks>
            <param name="exp">例外インスタンス</param>
            <returns>書式化データ</returns>
        </member>
        <member name="T:cklib.Log.ExceptionFormters.IOExceptionFormater">
            <summary>
            SocketExceptionフォーマッタ
            </summary>
        </member>
        <member name="M:cklib.Log.ExceptionFormters.IOExceptionFormater.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Log.ExceptionFormters.IOExceptionFormater.Format(System.Exception)">
            <summary>
            書式化
            </summary>
            <param name="exp">例外インスタンス</param>
            <returns>書式化データ</returns>
        </member>
        <member name="T:cklib.Log.ExceptionFormters.SocketExceptionFormater">
            <summary>
            SocketExceptionフォーマッタ
            </summary>
        </member>
        <member name="M:cklib.Log.ExceptionFormters.SocketExceptionFormater.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Log.ExceptionFormters.SocketExceptionFormater.Format(System.Exception)">
            <summary>
            書式化
            </summary>
            <param name="exp">例外インスタンス</param>
            <returns>書式化データ</returns>
        </member>
        <member name="T:cklib.Log.ExceptionFormters.SqlExceptionFormater">
            <summary>
            SqlExceptionフォーマッタ
            </summary>
        </member>
        <member name="M:cklib.Log.ExceptionFormters.SqlExceptionFormater.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Log.ExceptionFormters.SqlExceptionFormater.Format(System.Exception)">
            <summary>
            書式化
            </summary>
            <param name="exp">例外インスタンス</param>
            <returns>書式化データ</returns>
        </member>
        <member name="T:cklib.Log.ExtendLog">
            <summary>
            ログ拡張モジュール規定クラス
            </summary>
        </member>
        <member name="F:cklib.Log.ExtendLog.engine">
            <summary>
            ロギングエンジン
            </summary>
        </member>
        <member name="M:cklib.Log.ExtendLog.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Log.ExtendLog.Start(cklib.Log.Config.ConfigInfo)">
            <summary>
            ログ開始処理
            </summary>
            <param name="config">ログ設定情報</param>
        </member>
        <member name="M:cklib.Log.ExtendLog.Terminate(cklib.Log.Config.ConfigInfo)">
            <summary>
            ログ終了処理
            </summary>
            <param name="config">ログ設定情報</param>
        </member>
        <member name="M:cklib.Log.ExtendLog.LogFlush(cklib.Log.Config.ConfigInfo)">
            <summary>
            ログアイドル時フラッシュ処理
            </summary>
            <param name="config">ログ設定情報</param>
        </member>
        <member name="M:cklib.Log.ExtendLog.Loging(System.String,cklib.Log.LogData,cklib.Log.Config.ConfigInfo)">
            <summary>
            ロギング処理メソッド
            </summary>
            <param name="formatedMessasge">編集済みメッセージ</param>
            <param name="Data">ロギング情報</param>
            <param name="Config">ログ設定情報</param>
        </member>
        <member name="T:cklib.Log.LogCodes">
            <summary>
            ログコード定義
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.InnerLogCodeBase">
            <summary>
            内部ログコード基準値
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.LogCodeTable">
            <summary>
            ログコード管理テーブル
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.InnerLogCode">
            <summary>
            内部ログコード
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.UseInstanceLogCode">
            <summary>
            内部ログコードを使用する
            </summary>
        </member>
        <member name="P:cklib.Log.LogCodes.Name">
            <summary>
            ログコード名を取得
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.m_LogCode">
            <summary>
            ログコード（設定ファイルにより定義等されていないデフォルト値)
            </summary>
        </member>
        <member name="P:cklib.Log.LogCodes.LogCode">
            <summary>
            ログコード（設定ファイルにより定義等されていないデフォルト値)
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.LogLevel">
            <summary>
            ログレベル（設定ファイルにより定義等されていないデフォルト値)
            </summary>
        </member>
        <member name="M:cklib.Log.LogCodes.#ctor(System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="LogCode">内部ログコード</param>
        </member>
        <member name="M:cklib.Log.LogCodes.#ctor(System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="LogCode">内部ログコード</param>
            <param name="UseInnerLogCode">ログ出力時に内部ログコードを使用する</param>
        </member>
        <member name="M:cklib.Log.LogCodes.#ctor(cklib.Log.LogLevel,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="LogLevel">内部ログレベル</param>
            <param name="LogCode">内部ログコード</param>
        </member>
        <member name="M:cklib.Log.LogCodes.#ctor(cklib.Log.LogLevel,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="LogLevel">内部ログレベル</param>
            <param name="LogCode">内部ログコード</param>
            <param name="UseInnerLogCode">ログ出力時に内部ログコードを使用する</param>
        </member>
        <member name="M:cklib.Log.LogCodes.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Log.LogCodes.LookupName">
            <summary>
            名前の抽出
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogCodes.GetHashCode">
            <summary>
            内部ログコードを返す
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogCodes.Equals(System.Object)">
            <summary>
            LogCodeの一致確認
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogCodes.ToString">
            <summary>
            ログコード名を返す
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogCodes.GetLogCodesFromInnerLogCode(System.Int32)">
            <summary>
            内部ログコードからログコードインスタンスを取得する
            </summary>
            <param name="logcodes"></param>
            <returns></returns>
        </member>
        <member name="F:cklib.Log.LogCodes.SystemError">
            <summary>
            システムエラー
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.ProgramError">
            <summary>
            プログラムエラー
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.ConfigError">
            <summary>
            設定エラー
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.ParamError">
            <summary>
            パラメータエラー
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.LogInitializeError">
            <summary>
            ログ初期化エラー
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.LogConfigError">
            <summary>
            ログ設定エラー
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.LogError">
            <summary>
            ログエラー
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.BootUpStart">
            <summary>
            起動開始
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.BootUpTerminate">
            <summary>
            起動終了
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.BootUpAbort">
            <summary>
            起動中止
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.BootUpError">
            <summary>
            起動エラー
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.ShutdownStart">
            <summary>
            停止開始
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.ShutdownTerminate">
            <summary>
            停止終了
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.ShutdownError">
            <summary>
            停止エラー
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.ForceTerminate">
            <summary>
            強制停止終了
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.UnhandleExceptionTerminate">
            <summary>
            Unhandle例外による停止終了
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.ConsoleCloseTerminate">
            <summary>
            コンソールクローズによる停止終了
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.ThreadPoolWorkerStartError">
            <summary>
            スレッドプールワーカー起動エラー
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.ThreadPoolWorkerAliveTimeoutDetect">
            <summary>
            スレッドプールワーカー実行タイムアウト検出
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.ThreadPoolWorkerAliveTimeout">
            <summary>
            スレッドプールワーカー実行タイムアウトエラー
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.ThreadPoolWorkerUnhandleException">
            <summary>
            スレッドプールワーカー未処理例外
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.DBConnectError">
            <summary>
            DB接続エラー
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.DBError">
            <summary>
            DBエラー
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.DBDeadLock">
            <summary>
            DBデッドロックエラー
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.DBDeadLockRetryOver">
            <summary>
            DBデッドロックリトライオーバーエラー
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.DBTimeout">
            <summary>
            DBタイムアウトエラー
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.DBTimeoutRetryOver">
            <summary>
            DBタイムアウトリトライオーバーエラー
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.MQOpenError">
            <summary>
            MQオープンエラー
            </summary>
        </member>
        <member name="F:cklib.Log.LogCodes.MQError">
            <summary>
            MQエラー
            </summary>
        </member>
        <member name="T:cklib.Log.LogData">
            <summary>
            LogData の概要の説明です。
            </summary>
        </member>
        <member name="F:cklib.Log.LogData.Time">
            <summary>
            ログ事象発生時間
            </summary>
        </member>
        <member name="F:cklib.Log.LogData.level">
            <summary>
            ログレベル
            </summary>
        </member>
        <member name="F:cklib.Log.LogData.Code">
            <summary>
            ログコード
            </summary>
        </member>
        <member name="F:cklib.Log.LogData.Message">
            <summary>
            ログメッセージ
            </summary>
        </member>
        <member name="F:cklib.Log.LogData.SourceName">
            <summary>
            ソースファイル情報
            </summary>
        </member>
        <member name="F:cklib.Log.LogData.ClassName">
            <summary>
            クラス名
            </summary>
        </member>
        <member name="F:cklib.Log.LogData.Method">
            <summary>
            メソッド名
            </summary>
        </member>
        <member name="F:cklib.Log.LogData.SourceFile">
            <summary>
            ソースファイル情報
            </summary>
        </member>
        <member name="F:cklib.Log.LogData.SourceLine">
            <summary>
            ソースファイル行
            </summary>
        </member>
        <member name="F:cklib.Log.LogData.Exp">
            <summary>
            例外情報
            </summary>
        </member>
        <member name="F:cklib.Log.LogData.TraceBuffer">
            <summary>
            通信トレースバイナリデータ
            </summary>
        </member>
        <member name="F:cklib.Log.LogData.TraceBufferLength">
            <summary>
            通信トレースバイナリデータ長
            </summary>
        </member>
        <member name="F:cklib.Log.LogData.ThreadID">
            <summary>
            ログ記録スレッドID
            </summary>
        </member>
        <member name="T:cklib.Log.Logger">
            <summary>
            ログ書き込みインスタンス
            </summary>
        </member>
        <member name="F:cklib.Log.Logger.MngKey">
            <summary>
            ログマネージャインスタンス
            </summary>
        </member>
        <member name="F:cklib.Log.Logger.SourceName">
            <summary>
            ソース名
            </summary>
        </member>
        <member name="F:cklib.Log.Logger.CallStackDepth">
            <summary>
            コールスタックを取り出しネスト
            </summary>
        </member>
        <member name="M:cklib.Log.Logger.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Log.Logger.#ctor(System.Type)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Log.Logger.#ctor(System.Type,System.String)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Log.Logger.#ctor(System.Type,cklib.Log.LogManagerEx)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Log.Logger.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Log.Logger.#ctor(cklib.Log.LogManagerEx)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Log.Logger.SetSourceName">
            <summary>
            スタックフレームから呼び出し元のソース名を抽出する
            </summary>
        </member>
        <member name="M:cklib.Log.Logger.Write(System.String)">
            <summary>
            Writeメッセージ
            </summary>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Write(System.String,System.Exception)">
            <summary>
            Writeメッセージ
            </summary>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.Write(System.Int32,System.String)">
            <summary>
            Writeメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Write(System.Int32,System.String,System.Exception)">
            <summary>
            Writeメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.WriteFormat(System.String,System.Object[])">
            <summary>
            Writeメッセージ
            </summary>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.WriteFormat(System.Int32,System.String,System.Object[])">
            <summary>
            Writeメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.WriteMessage(System.Int32)">
            <summary>
            Writeメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.WriteMessage(System.Int32,System.Exception)">
            <summary>
            Writeメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.WriteFormatMessage(System.Int32,System.Object[])">
            <summary>
            Writeメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Write(cklib.Log.LogCodes,System.String)">
            <summary>
            Writeメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Write(cklib.Log.LogCodes,System.String,System.Exception)">
            <summary>
            Writeメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.WriteFormat(cklib.Log.LogCodes,System.String,System.Object[])">
            <summary>
            Writeメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.WriteMessage(cklib.Log.LogCodes)">
            <summary>
            Writeメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.WriteMessage(cklib.Log.LogCodes,System.Exception)">
            <summary>
            Writeメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.WriteFormatMessage(cklib.Log.LogCodes,System.Object[])">
            <summary>
            Writeメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Trace(System.String)">
            <summary>
            TRACEメッセージ
            </summary>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Trace(System.String,System.Exception)">
            <summary>
            TRACEメッセージ
            </summary>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.Trace(System.Int32,System.String)">
            <summary>
            TRACEメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Trace(System.Int32,System.String,System.Exception)">
            <summary>
            TRACEメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceFormat(System.String,System.Object[])">
            <summary>
            TRACEメッセージ
            </summary>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceFormat(System.Int32,System.String,System.Object[])">
            <summary>
            TRACEメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceMessage(System.Int32)">
            <summary>
            TRACEメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceMessage(System.Int32,System.Exception)">
            <summary>
            TRACEメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceFormatMessage(System.Int32,System.Object[])">
            <summary>
            TRACEメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Trace(cklib.Log.LogCodes,System.String)">
            <summary>
            TRACEメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Trace(cklib.Log.LogCodes,System.String,System.Exception)">
            <summary>
            TRACEメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceFormat(cklib.Log.LogCodes,System.String,System.Object[])">
            <summary>
            TRACEメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceMessage(cklib.Log.LogCodes)">
            <summary>
            TRACEメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceMessage(cklib.Log.LogCodes,System.Exception)">
            <summary>
            TRACEメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceFormatMessage(cklib.Log.LogCodes,System.Object[])">
            <summary>
            TRACEメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Debug(System.String)">
            <summary>
            DEBUGメッセージ
            </summary>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Debug(System.String,System.Exception)">
            <summary>
            DEBUGメッセージ
            </summary>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.Debug(System.Int32,System.String)">
            <summary>
            DEBUGメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Debug(System.Int32,System.String,System.Exception)">
            <summary>
            DEBUGメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.DebugFormat(System.String,System.Object[])">
            <summary>
            DEBUGメッセージ
            </summary>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.DebugFormat(System.Int32,System.String,System.Object[])">
            <summary>
            DEBUGメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.DebugMessage(System.Int32)">
            <summary>
            DEBUGメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.DebugMessage(System.Int32,System.Exception)">
            <summary>
            DEBUGメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.DebugFormatMessage(System.Int32,System.Object[])">
            <summary>
            DEBUGメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Debug(cklib.Log.LogCodes,System.String)">
            <summary>
            DEBUGメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Debug(cklib.Log.LogCodes,System.String,System.Exception)">
            <summary>
            DEBUGメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.DebugFormat(cklib.Log.LogCodes,System.String,System.Object[])">
            <summary>
            DEBUGメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.DebugMessage(cklib.Log.LogCodes)">
            <summary>
            DEBUGメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.DebugMessage(cklib.Log.LogCodes,System.Exception)">
            <summary>
            DEBUGメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.DebugFormatMessage(cklib.Log.LogCodes,System.Object[])">
            <summary>
            DEBUGメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Info(System.String)">
            <summary>
            情報メッセージ
            </summary>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Info(System.String,System.Exception)">
            <summary>
            情報メッセージ
            </summary>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.Info(System.Int32,System.String)">
            <summary>
            情報メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Info(System.Int32,System.String,System.Exception)">
            <summary>
            情報メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.InfoFormat(System.String,System.Object[])">
            <summary>
            情報メッセージ
            </summary>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.InfoFormat(System.Int32,System.String,System.Object[])">
            <summary>
            情報メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.InfoMessage(System.Int32)">
            <summary>
            INFOメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.InfoMessage(System.Int32,System.Exception)">
            <summary>
            INFOメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.InfoFormatMessage(System.Int32,System.Object[])">
            <summary>
            INFOメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Info(cklib.Log.LogCodes,System.String)">
            <summary>
            情報メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Info(cklib.Log.LogCodes,System.String,System.Exception)">
            <summary>
            情報メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.InfoFormat(cklib.Log.LogCodes,System.String,System.Object[])">
            <summary>
            情報メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.InfoMessage(cklib.Log.LogCodes)">
            <summary>
            INFOメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.InfoMessage(cklib.Log.LogCodes,System.Exception)">
            <summary>
            INFOメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.InfoFormatMessage(cklib.Log.LogCodes,System.Object[])">
            <summary>
            INFOメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Note(System.String)">
            <summary>
            通知メッセージ
            </summary>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Note(System.String,System.Exception)">
            <summary>
            通知メッセージ
            </summary>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.Note(System.Int32,System.String)">
            <summary>
            通知メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Note(System.Int32,System.String,System.Exception)">
            <summary>
            通知メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.NoteFormat(System.String,System.Object[])">
            <summary>
            通知メッセージ
            </summary>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.NoteFormat(System.Int32,System.String,System.Object[])">
            <summary>
            通知メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.NoteMessage(System.Int32)">
            <summary>
            NOTEメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.NoteMessage(System.Int32,System.Exception)">
            <summary>
            NOTEメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.NoteFormatMessage(System.Int32,System.Object[])">
            <summary>
            NOTEメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Note(cklib.Log.LogCodes,System.String)">
            <summary>
            通知メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Note(cklib.Log.LogCodes,System.String,System.Exception)">
            <summary>
            通知メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.NoteFormat(cklib.Log.LogCodes,System.String,System.Object[])">
            <summary>
            通知メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.NoteMessage(cklib.Log.LogCodes)">
            <summary>
            NOTEメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.NoteMessage(cklib.Log.LogCodes,System.Exception)">
            <summary>
            NOTEメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.NoteFormatMessage(cklib.Log.LogCodes,System.Object[])">
            <summary>
            NOTEメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Warn(System.String)">
            <summary>
            警告メッセージ
            </summary>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Warn(System.String,System.Exception)">
            <summary>
            警告メッセージ
            </summary>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.Warn(System.Int32,System.String)">
            <summary>
            警告メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Warn(System.Int32,System.String,System.Exception)">
            <summary>
            警告メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.WarnFormat(System.String,System.Object[])">
            <summary>
            警告メッセージ
            </summary>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.WarnFormat(System.Int32,System.String,System.Object[])">
            <summary>
            警告メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.WarnMessage(System.Int32)">
            <summary>
            WARNメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.WarnMessage(System.Int32,System.Exception)">
            <summary>
            WARNメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.WarnFormatMessage(System.Int32,System.Object[])">
            <summary>
            WARNメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Warn(cklib.Log.LogCodes,System.String)">
            <summary>
            警告メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Warn(cklib.Log.LogCodes,System.String,System.Exception)">
            <summary>
            警告メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.WarnFormat(cklib.Log.LogCodes,System.String,System.Object[])">
            <summary>
            警告メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.WarnMessage(cklib.Log.LogCodes)">
            <summary>
            WARNメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.WarnMessage(cklib.Log.LogCodes,System.Exception)">
            <summary>
            WARNメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.WarnFormatMessage(cklib.Log.LogCodes,System.Object[])">
            <summary>
            WARNメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Error(System.String)">
            <summary>
            エラーメッセージ
            </summary>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Error(System.String,System.Exception)">
            <summary>
            エラーメッセージ
            </summary>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.Error(System.Int32,System.String)">
            <summary>
            エラーメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Error(System.Int32,System.String,System.Exception)">
            <summary>
            エラーメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.ErrorFormat(System.String,System.Object[])">
            <summary>
            エラーメッセージ
            </summary>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.ErrorFormat(System.Int32,System.String,System.Object[])">
            <summary>
            エラーメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.ErrorMessage(System.Int32)">
            <summary>
            ERRORメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.ErrorMessage(System.Int32,System.Exception)">
            <summary>
            ERRORメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.ErrorFormatMessage(System.Int32,System.Object[])">
            <summary>
            ERRORメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Error(cklib.Log.LogCodes,System.String)">
            <summary>
            エラーメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Error(cklib.Log.LogCodes,System.String,System.Exception)">
            <summary>
            エラーメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.ErrorFormat(cklib.Log.LogCodes,System.String,System.Object[])">
            <summary>
            エラーメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.ErrorMessage(cklib.Log.LogCodes)">
            <summary>
            ERRORメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.ErrorMessage(cklib.Log.LogCodes,System.Exception)">
            <summary>
            ERRORメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.ErrorFormatMessage(cklib.Log.LogCodes,System.Object[])">
            <summary>
            ERRORメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Critical(System.String)">
            <summary>
            Criticalメッセージ
            </summary>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Critical(System.String,System.Exception)">
            <summary>
            Criticalメッセージ
            </summary>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.Critical(System.Int32,System.String)">
            <summary>
            Criticalメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Critical(System.Int32,System.String,System.Exception)">
            <summary>
            Criticalメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.CriticalFormat(System.String,System.Object[])">
            <summary>
            Criticalメッセージ
            </summary>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.CriticalFormat(System.Int32,System.String,System.Object[])">
            <summary>
            Criticalメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.CriticalMessage(System.Int32)">
            <summary>
            Criticalメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.CriticalMessage(System.Int32,System.Exception)">
            <summary>
            Criticalメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.CriticalFormatMessage(System.Int32,System.Object[])">
            <summary>
            Criticalメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Critical(cklib.Log.LogCodes,System.String)">
            <summary>
            Criticalメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Critical(cklib.Log.LogCodes,System.String,System.Exception)">
            <summary>
            Criticalメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.CriticalFormat(cklib.Log.LogCodes,System.String,System.Object[])">
            <summary>
            Criticalメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.CriticalMessage(cklib.Log.LogCodes)">
            <summary>
            Criticalメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.CriticalMessage(cklib.Log.LogCodes,System.Exception)">
            <summary>
            Criticalメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.CriticalFormatMessage(cklib.Log.LogCodes,System.Object[])">
            <summary>
            Criticalメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Alert(System.String)">
            <summary>
            警戒メッセージ
            </summary>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Alert(System.String,System.Exception)">
            <summary>
            警戒メッセージ
            </summary>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.Alert(System.Int32,System.String)">
            <summary>
            警戒メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Alert(System.Int32,System.String,System.Exception)">
            <summary>
            警戒メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.AlertFormat(System.String,System.Object[])">
            <summary>
            警戒メッセージ
            </summary>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.AlertFormat(System.Int32,System.String,System.Object[])">
            <summary>
            警戒メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.AlertMessage(System.Int32)">
            <summary>
            ALERTメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.AlertMessage(System.Int32,System.Exception)">
            <summary>
            ALERTメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.AlertFormatMessage(System.Int32,System.Object[])">
            <summary>
            ALERTメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Alert(cklib.Log.LogCodes,System.String)">
            <summary>
            警戒メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Alert(cklib.Log.LogCodes,System.String,System.Exception)">
            <summary>
            警戒メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.AlertFormat(cklib.Log.LogCodes,System.String,System.Object[])">
            <summary>
            警戒メッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.AlertMessage(cklib.Log.LogCodes)">
            <summary>
            ALERTメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.AlertMessage(cklib.Log.LogCodes,System.Exception)">
            <summary>
            ALERTメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.AlertFormatMessage(cklib.Log.LogCodes,System.Object[])">
            <summary>
            ALERTメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Emergency(System.String)">
            <summary>
            致命的エラーメッセージ
            </summary>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Emergency(System.String,System.Exception)">
            <summary>
            致命的エラーメッセージ
            </summary>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.Emergency(System.Int32,System.String)">
            <summary>
            致命的エラーメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Emergency(System.Int32,System.String,System.Exception)">
            <summary>
            致命的エラーメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.EmergencyFormat(System.String,System.Object[])">
            <summary>
            致命的エラーメッセージ
            </summary>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.EmergencyFormat(System.Int32,System.String,System.Object[])">
            <summary>
            致命的エラーメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.EmergencyMessage(System.Int32)">
            <summary>
            EMERGメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.EmergencyMessage(System.Int32,System.Exception)">
            <summary>
            EMERGメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.EmergencyFormatMessage(System.Int32,System.Object[])">
            <summary>
            EMERGメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Emergency(cklib.Log.LogCodes,System.String)">
            <summary>
            致命的エラーメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Emergency(cklib.Log.LogCodes,System.String,System.Exception)">
            <summary>
            致命的エラーメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.EmergencyFormat(cklib.Log.LogCodes,System.String,System.Object[])">
            <summary>
            致命的エラーメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.EmergencyMessage(cklib.Log.LogCodes)">
            <summary>
            EMERGメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.EmergencyMessage(cklib.Log.LogCodes,System.Exception)">
            <summary>
            EMERGメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.EmergencyFormatMessage(cklib.Log.LogCodes,System.Object[])">
            <summary>
            EMERGメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Fatal(System.String)">
            <summary>
            致命的エラーメッセージ
            </summary>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Fatal(System.String,System.Exception)">
            <summary>
            致命的エラーメッセージ
            </summary>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.Fatal(System.Int32,System.String)">
            <summary>
            致命的エラーメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Fatal(System.Int32,System.String,System.Exception)">
            <summary>
            致命的エラーメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.FatalFormat(System.String,System.Object[])">
            <summary>
            致命的エラーメッセージ
            </summary>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.FatalFormat(System.Int32,System.String,System.Object[])">
            <summary>
            致命的エラーメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.FatalMessage(System.Int32)">
            <summary>
            FATALメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.FatalMessage(System.Int32,System.Exception)">
            <summary>
            FATALメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.FatalFormatMessage(System.Int32,System.Object[])">
            <summary>
            FATALメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Fatal(cklib.Log.LogCodes,System.String)">
            <summary>
            致命的エラーメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:cklib.Log.Logger.Fatal(cklib.Log.LogCodes,System.String,System.Exception)">
            <summary>
            致命的エラーメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.FatalFormat(cklib.Log.LogCodes,System.String,System.Object[])">
            <summary>
            致命的エラーメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="message">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.FatalMessage(cklib.Log.LogCodes)">
            <summary>
            FATALメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
        </member>
        <member name="M:cklib.Log.Logger.FatalMessage(cklib.Log.LogCodes,System.Exception)">
            <summary>
            FATALメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.FatalFormatMessage(cklib.Log.LogCodes,System.Object[])">
            <summary>
            FATALメッセージ
            </summary>
            <param name="LogCode">ログコード</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.InnerLogFormat(cklib.Log.LogLevel,System.Int32,System.String,System.Object[])">
            <summary>
            内部基本Logingメソッド(書式編集版)
            </summary>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="formatmsg">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.InnerLog(cklib.Log.LogLevel,System.Int32,System.String,System.Exception)">
            <summary>
            内部基本Logingメソッド
            </summary>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.InnerLogFormat(cklib.Log.LogLevel,cklib.Log.LogCodes,System.String,System.Object[])">
            <summary>
            内部基本Logingメソッド(書式編集版)
            </summary>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="formatmsg">書式メッセージ</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.Formating(System.String,System.Object[])">
            <summary>
            メッセージの書式化
            </summary>
            <param name="formatmsg">書式化文字列</param>
            <param name="prms">パラメータ</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.Logger.InnerLog(cklib.Log.LogLevel,cklib.Log.LogCodes,System.String,System.Exception)">
            <summary>
            内部基本Logingメソッド
            </summary>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.Log(cklib.Log.LogLevel,cklib.Log.LogCodes,System.String,System.Diagnostics.StackFrame,System.Exception)">
            <summary>
            基本ログメソッド
            </summary>
            <remarks>
            書き込み情報を加工するなど共通のメソッド経由で呼び出す際に呼び出し元のCallStackを指定する
            </remarks>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="CallStack">スタックフレーム</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.Log(cklib.Log.LogLevel,System.Int32,System.String,System.Diagnostics.StackFrame,System.Exception)">
            <summary>
            基本ログメソッド
            </summary>
            <remarks>
            書き込み情報を加工するなど共通のメソッド経由で呼び出す際に呼び出し元のCallStackを指定する
            </remarks>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="CallStack">スタックフレーム</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.Log(cklib.Log.LogLevel,cklib.Log.LogCodes,System.String,System.Exception)">
            <summary>
            基本ログメソッド
            </summary>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.Log(cklib.Log.LogLevel,System.Int32,System.String,System.Exception)">
            <summary>
            基本ログメソッド
            </summary>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="exp">例外情報</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceLog(cklib.Log.LogLevel,cklib.Log.LogCodes,System.String,System.Byte[],System.Int32)">
            <summary>
            トレースログメソッド
            </summary>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="buffer">トレースバッファ</param>
            <param name="bufferleng">トレースデータ長</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceLog(cklib.Log.LogLevel,cklib.Log.LogCodes,System.Byte[],System.Int32,System.Object[])">
            <summary>
            トレースログメソッド
            </summary>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="buffer">トレースバッファ</param>
            <param name="bufferleng">トレースデータ長</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceLog(cklib.Log.LogLevel,cklib.Log.LogCodes,System.Byte[],System.Int32)">
            <summary>
            トレースログメソッド
            </summary>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="buffer">トレースバッファ</param>
            <param name="bufferleng">トレースデータ長</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceLog(cklib.Log.LogLevel,System.Int32,System.String,System.Byte[],System.Int32)">
            <summary>
            トレースログメソッド
            </summary>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="buffer">トレースバッファ</param>
            <param name="bufferleng">トレースデータ長</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceLog(cklib.Log.LogLevel,System.Int32,System.Byte[],System.Int32,System.Object[])">
            <summary>
            トレースログメソッド
            </summary>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="buffer">トレースバッファ</param>
            <param name="bufferleng">トレースデータ長</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceLog(cklib.Log.LogLevel,System.Int32,System.Byte[],System.Int32)">
            <summary>
            トレースログメソッド
            </summary>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="buffer">トレースバッファ</param>
            <param name="bufferleng">トレースデータ長</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceLog``1(cklib.Log.LogLevel,cklib.Log.LogCodes,System.String,``0,System.Int32)">
            <summary>
            トレースログメソッド
            </summary>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="buffer">トレースバッファ</param>
            <param name="bufferleng">トレースデータ長</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceLog``1(cklib.Log.LogLevel,cklib.Log.LogCodes,``0,System.Int32,System.Object[])">
            <summary>
            トレースログメソッド
            </summary>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="buffer">トレースバッファ</param>
            <param name="bufferleng">トレースデータ長</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceLog``1(cklib.Log.LogLevel,cklib.Log.LogCodes,``0,System.Int32)">
            <summary>
            トレースログメソッド
            </summary>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="buffer">トレースバッファ</param>
            <param name="bufferleng">トレースデータ長</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceLog``1(cklib.Log.LogLevel,System.Int32,System.String,``0,System.Int32)">
            <summary>
            トレースログメソッド
            </summary>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="buffer">トレースバッファ</param>
            <param name="bufferleng">トレースデータ長</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceLog``1(cklib.Log.LogLevel,System.Int32,``0,System.Int32,System.Object[])">
            <summary>
            トレースログメソッド
            </summary>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="buffer">トレースバッファ</param>
            <param name="bufferleng">トレースデータ長</param>
            <param name="prms">編集データ</param>
        </member>
        <member name="M:cklib.Log.Logger.TraceLog``1(cklib.Log.LogLevel,System.Int32,``0,System.Int32)">
            <summary>
            トレースログメソッド
            </summary>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="buffer">トレースバッファ</param>
            <param name="bufferleng">トレースデータ長</param>
        </member>
        <member name="M:cklib.Log.Logger.LogStore``1(cklib.Log.LogLevel,cklib.Log.LogCodes,System.String,System.Diagnostics.StackFrame,System.Exception,``0,System.Int32)">
            <summary>
            ログを書き込む
            </summary>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="CallStack">スタックフレーム</param>
            <param name="exp">例外情報</param>
            <param name="buffer">トレースバッファ</param>
            <param name="bufferleng">トレースデータ長</param>
        </member>
        <member name="M:cklib.Log.Logger.LogStore``1(cklib.Log.LogLevel,System.Int32,System.String,System.Diagnostics.StackFrame,System.Exception,``0,System.Int32)">
            <summary>
            ログを書き込む
            </summary>
            <param name="level">ログレベル</param>
            <param name="LogCode">ログコード</param>
            <param name="message">メッセージ</param>
            <param name="CallStack">スタックフレーム</param>
            <param name="exp">例外情報</param>
            <param name="buffer">トレースバッファ</param>
            <param name="bufferleng">トレースデータ長</param>
        </member>
        <member name="M:cklib.Log.Logger.LogManagerLogStore(cklib.Log.LogData)">
            <summary>
            ログマネージャにログ情報を引き渡す
            </summary>
            <param name="ld">ログ情報</param>
        </member>
        <member name="M:cklib.Log.Logger.IsValidLevel(cklib.Log.LogLevel)">
            <summary>
            記録対象のログレベルのチェック
            </summary>
            <param name="level">レベル</param>
            <returns>記録対象ならtrue</returns>
        </member>
        <member name="M:cklib.Log.Logger.GetDefaultLogCode(System.String)">
            <summary>
            デフォルトログコードを取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.Logger.GetMessage(System.Int32)">
            <summary>
            ログメッセージを取得する
            </summary>
            <param name="LogCode">ログコード</param>
            <returns>メッセージ</returns>
        </member>
        <member name="M:cklib.Log.Logger.GetMessage(cklib.Log.LogCodes)">
            <summary>
            ログメッセージを取得する
            </summary>
            <param name="LogCode">ログコード</param>
            <returns>メッセージ</returns>
        </member>
        <member name="M:cklib.Log.Logger.GetLogCode(cklib.Log.LogCodes)">
            <summary>
            ログコードを取得する
            </summary>
            <param name="LogCode">ログコードクラスインスタンス</param>
            <returns>ログコード</returns>
        </member>
        <member name="M:cklib.Log.Logger.GetLogLevel(cklib.Log.LogCodes,cklib.Log.LogLevel)">
            <summary>
            ログレベルを取得する
            </summary>
            <param name="LogCode">ログコードクラスインスタンス</param>
            <param name="Level">ログレベル</param>
            <returns>ログコード</returns>
        </member>
        <member name="M:cklib.Log.Logger.GetLogLevel(System.Int32,cklib.Log.LogLevel)">
            <summary>
            ログレベルを取得する
            </summary>
            <param name="LogCode">ログコードクラスインスタンス</param>
            <param name="Level">ログレベル</param>
            <returns>ログコード</returns>
        </member>
        <member name="T:cklib.Log.LogEngineError">
            <summary>
            ログエンジン異常通知デリゲート
            </summary>
            <param name="level">レベル Fatal時エンジンは停止する通常Error</param>
            <param name="msg">異常検出メッセージ</param>
            <param name="exp">Exception情報</param>
        </member>
        <member name="T:cklib.Log.LogEngineError2">
            <summary>
            ログエンジン異常通知デリゲート2
            </summary>
            <param name="lex">ログマネージャインスタンス</param>
            <param name="level">レベル Fatal時エンジンは停止する通常Error</param>
            <param name="msg">異常検出メッセージ</param>
            <param name="exp">Exception情報</param>
        </member>
        <member name="T:cklib.Log.LogingEngine">
            <summary>
            ロギングエンジン
            </summary>
        </member>
        <member name="F:cklib.Log.LogingEngine.ELog">
            <summary>
            イベントログインスタンス
            </summary>
        </member>
        <member name="F:cklib.Log.LogingEngine.FLog">
            <summary>
            ファイル出力先インスタンス
            </summary>
        </member>
        <member name="F:cklib.Log.LogingEngine.SysLog">
            <summary>
            Syslog出力先インスタンス
            </summary>
        </member>
        <member name="F:cklib.Log.LogingEngine.CurrentLogDate">
            <summary>
            ログファイル日付
            </summary>
        </member>
        <member name="F:cklib.Log.LogingEngine.LogMessage">
            <summary>
            出力メッセージ
            </summary>
        </member>
        <member name="F:cklib.Log.LogingEngine.config">
            <summary>
            初期設定情報
            </summary>
        </member>
        <member name="P:cklib.Log.LogingEngine.Config">
            <summary>
            初期設定情報
            </summary>
        </member>
        <member name="F:cklib.Log.LogingEngine.LogEngineErrorEvent">
            <summary>
            ログエンジンエラーイベントインスタンス
            </summary>
        </member>
        <member name="F:cklib.Log.LogingEngine.LogEngineErrorEvent2">
            <summary>
            ログエンジンエラーイベントインスタンス
            </summary>
        </member>
        <member name="F:cklib.Log.LogingEngine.lex">
            <summary>
            ログマネージャインスタンス
            </summary>
        </member>
        <member name="P:cklib.Log.LogingEngine.LogManagerEx">
            <summary>
            ログマネージャインスタンス
            </summary>
        </member>
        <member name="F:cklib.Log.LogingEngine.FileLockMutex">
            <summary>
            ファイルロック用Mutex
            </summary>
        </member>
        <member name="M:cklib.Log.LogingEngine.#ctor(cklib.Log.Config.ConfigInfo,cklib.Log.LogManagerEx)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Log.LogingEngine.ReleseResorce">
            <summary>
            リソースの開放
            </summary>
        </member>
        <member name="F:cklib.Log.LogingEngine.fThreadMode">
            <summary>
            マルチスレッドモード識別
            </summary>
        </member>
        <member name="M:cklib.Log.LogingEngine.Start">
            <summary>
            ログエンジンスレッド起動
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.InitInstanse">
            <summary>
            インスタンスの初期化
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.ExitInstance">
            <summary>
            スレッドの終了処理
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.AfterIdle">
            <summary>
            イベント発生後処理
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.GetWaitTime">
            <summary>
            待機タイムアウト時間をミリ秒で返す
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.EventTimeout">
            <summary>
            イベント発生タイムアウト時の処理
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.ExceptionPrint(cklib.Log.LogLevel,System.String,System.Exception)">
            <summary>
            内部エラーエラー出力
            </summary>
            <param name="level">エラーレベル</param>
            <param name="msg">エラーメッセージ</param>
            <param name="exp">例外</param>
        </member>
        <member name="M:cklib.Log.LogingEngine.LogEngineErrorEventCallback(System.IAsyncResult)">
            <summary>
            非同期デリゲート結果を受け取る
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:cklib.Log.LogingEngine.LogEngineErrorEventCallback2(System.IAsyncResult)">
            <summary>
            非同期デリゲート結果を受け取る
            </summary>
            <remarks>
            追加  2014/02/19 BugFix
            </remarks>
            <param name="ar"></param>
        </member>
        <member name="M:cklib.Log.LogingEngine.WaitError(System.Exception)">
            <summary>
            待機中の例外発生時の処理
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.EventError(System.Exception)">
            <summary>
            イベント処理中の例外発生時処理
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.ThreadError(System.Exception)">
            <summary>
            catchされていない例外発生時処理
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.EventData(cklib.Framework.EventDataTypeBase{cklib.Framework.EventCode,System.Object})">
            <summary>
            データイベント
            </summary>
            <param name="ed"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.LogForeWrite(cklib.Log.LogData)">
            <summary>
            ログをフォアグラウンド書き込み処理
            </summary>
            <param name="data">ログデータ</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.LogWrite(cklib.Log.LogData)">
            <summary>
            ログ書き込み
            </summary>
            <param name="data">ログデータ</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.LogFlush">
            <summary>
            ログの出力を確定させる
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.LogConsole(cklib.Log.LogData)">
            <summary>
            コンソール出力
            </summary>
            <param name="data">メッセージソース</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.LogFile(cklib.Log.LogData)">
            <summary>
            ログファイル出力
            </summary>
            <param name="data">メッセージソース</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.OpenLogFile(cklib.Log.LogData)">
            <summary>
            ログファイルを開く
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.CloseLogFile">
            <summary>
            ログファイルのクローズ
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.CreateLogFileDirectory">
            <summary>
            ログファイルディレクトリ
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.LogRotation">
            <summary>
            ログローテーション
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.LogEventLog(cklib.Log.LogData)">
            <summary>
            イベントログ出力
            </summary>
            <param name="Data">メッセージソース</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.OpenEventLog">
            <summary>
            イベントログを開く
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.CloseEventLog">
            <summary>
            イベントログを閉じる
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.LogSyslog(cklib.Log.LogData)">
            <summary>
            syslog出力
            </summary>
            <param name="data">メッセージソース</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.OpenSyslog">
            <summary>
            syslog開く
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.CloseSyslog">
            <summary>
            syslogクローズ
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.LogExtendStart">
            <summary>
            拡張ログ開始
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.LogExtendTerminate">
            <summary>
            拡張ログ開始
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.LogExtendFlush">
            <summary>
            アイドル時フラッシュ処理
            </summary>
        </member>
        <member name="M:cklib.Log.LogingEngine.LogExtend(cklib.Log.LogData)">
            <summary>
            拡張ログ出力
            </summary>
            <param name="Data">メッセージソース</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.GenerateMessage(cklib.Log.LogData,cklib.Log.Config.BasicLogConfig)">
            <summary>
            メッセージの生成(エンコード済みbyte配列で出力)
            </summary>
            <param name="Data">ログデータ</param>
            <param name="conf">設定データ</param>
            <returns>書式化後データ</returns>
        </member>
        <member name="M:cklib.Log.LogingEngine.GenerateMessageToString(cklib.Log.LogData,cklib.Log.Config.BasicLogConfig)">
            <summary>
            メッセージの生成
            </summary>
            <param name="Data">ログデータ</param>
            <param name="conf">設定データ</param>
            <returns>書式化後データ</returns>
        </member>
        <member name="T:cklib.Log.LogLevel">
            <summary>
            LogLevel の概要の説明です。
            </summary>
        </member>
        <member name="F:cklib.Log.LogLevel.TRACE">
            <summary>
            TRACEレベルデバッグ
            </summary>
        </member>
        <member name="F:cklib.Log.LogLevel.DEBUG">
            <summary>
            デバッグ
            </summary>
        </member>
        <member name="F:cklib.Log.LogLevel.INFO">
            <summary>
            情報
            </summary>
        </member>
        <member name="F:cklib.Log.LogLevel.NOTE">
            <summary>
            通知
            </summary>
        </member>
        <member name="F:cklib.Log.LogLevel.WARN">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:cklib.Log.LogLevel.ERROR">
            <summary>
            エラー
            </summary>
        </member>
        <member name="F:cklib.Log.LogLevel.CRIT">
            <summary>
            危機的
            </summary>
        </member>
        <member name="F:cklib.Log.LogLevel.ALERT">
            <summary>
            警戒
            </summary>
        </member>
        <member name="F:cklib.Log.LogLevel.EMERG">
            <summary>
            緊急
            </summary>
        </member>
        <member name="F:cklib.Log.LogLevel.FATAL">
            <summary>
            致命的エラー
            </summary>
        </member>
        <member name="F:cklib.Log.LogLevel.Undefine">
            <summary>
            未定義
            </summary>
        </member>
        <member name="T:cklib.Log.LogManager">
            <summary>
            ログ機能を管理する
            </summary>
        </member>
        <member name="F:cklib.Log.LogManager.log">
            <summary>
            ログインスタンス
            </summary>
        </member>
        <member name="F:cklib.Log.LogManager.CriticalSection">
            <summary>
            排他制御用
            </summary>
        </member>
        <member name="P:cklib.Log.LogManager.Config">
            <summary>
            初期設定情報
            </summary>
        </member>
        <member name="P:cklib.Log.LogManager.DefaultLogCode">
            <summary>
            デフォルトログコード
            </summary>
            <remarks>
            デバッグログ及びログコードなしのログに使用されるログコード<br/>
            イベントログを使用している場合は、コード割り当てが必須なので適切なコードを割り当てる必要がある<br/>
            </remarks>
        </member>
        <member name="F:cklib.Log.LogManager.LogEngineErrorEvent">
            <summary>
            ログエンジンエラーイベントインスタンス
            </summary>
        </member>
        <member name="M:cklib.Log.LogManager.Initialize">
            <summary>
            初期化アプリケーション設定をロードする
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogManager.Initialize(cklib.Log.Config.ConfigInfo)">
            <summary>
            初期化アプリケーション設定をロードする
            </summary>
            <param name="conf">設定情報インスタンス</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogManager.ReStart">
            <summary>
            再起動
            </summary>
            <returns>初期化結果</returns>
        </member>
        <member name="M:cklib.Log.LogManager.ReStart(cklib.Log.Config.ConfigInfo)">
            <summary>
            再起動
            </summary>
            <param name="conf">設定情報インスタンス</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogManager.Terminate">
            <summary>
            ログエンジンの停止
            </summary>
        </member>
        <member name="T:cklib.Log.LogManagerStarter">
            <summary>
            ログマネージャを初期化起動するインスタンスを生成する
            </summary>
        </member>
        <member name="F:cklib.Log.LogManagerStarter.mng">
            <summary>
            ログマネージャインスタンス
            </summary>
        </member>
        <member name="M:cklib.Log.LogManagerStarter.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Log.LogManagerStarter.#ctor(cklib.Log.Config.ConfigInfo)">
            <summary>
            コンストラクタ
            </summary>
            <param name="conf">初期化パラメータ</param>
        </member>
        <member name="M:cklib.Log.LogManagerStarter.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="section">設定セクション名</param>
        </member>
        <member name="M:cklib.Log.LogManagerStarter.Finalize">
            <summary>
            ディストラクタ
            </summary>
        </member>
        <member name="F:cklib.Log.LogManagerStarter.disposed">
            <summary>
            Dispose完了フラグ
            </summary>
        </member>
        <member name="M:cklib.Log.LogManagerStarter.Dispose">
            <summary>
            Disposeメソッド
            </summary>
        </member>
        <member name="M:cklib.Log.LogManagerStarter.Dispose(System.Boolean)">
            <summary>
            Dispose処理の実装
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:cklib.Log.LogManagerStarter.ReleseResorce">
            <summary>
            リソース解放処理
            </summary>
        </member>
        <member name="T:cklib.Log.LogManagerEx">
            <summary>
            ログ機能を管理する
            </summary>
        </member>
        <member name="F:cklib.Log.LogManagerEx.fInitialize">
            <summary>
            初期化参照数
            </summary>
        </member>
        <member name="P:cklib.Log.LogManagerEx.IsInitialized">
            <summary>
            初期化状態フラグ
            </summary>
        </member>
        <member name="F:cklib.Log.LogManagerEx.config">
            <summary>
            初期設定情報
            </summary>
        </member>
        <member name="P:cklib.Log.LogManagerEx.Config">
            <summary>
            初期設定情報
            </summary>
        </member>
        <member name="F:cklib.Log.LogManagerEx.LogEngineErrorEvent">
            <summary>
            ログエンジンエラーイベントインスタンス
            </summary>
        </member>
        <member name="F:cklib.Log.LogManagerEx.LogEngineErrorEvent2">
            <summary>
            ログエンジンエラーイベントインスタンス
            </summary>
        </member>
        <member name="F:cklib.Log.LogManagerEx.DefaultLogCode">
            <summary>
            デフォルトログコード
            </summary>
            <remarks>
            デバッグログ及びログコードなしのログに使用されるログコード<br/>
            イベントログを使用している場合は、コード割り当てが必須なので適切なコードを割り当てる必要がある<br/>
            </remarks>
        </member>
        <member name="F:cklib.Log.LogManagerEx.Engines">
            <summary>
            ロギング処理エンジンをログマネージャ毎に保持する
            </summary>
        </member>
        <member name="F:cklib.Log.LogManagerEx.Managers">
            <summary>
            ロギング処理エンジンをログマネージャ毎に保持する
            </summary>
        </member>
        <member name="M:cklib.Log.LogManagerEx.LookupLogManagerEx(System.String)">
            <summary>
            指定されキーのマネジャークラスインスタンスを取得する
            </summary>
            <param name="key">キー文字列</param>
            <returns></returns>
        </member>
        <member name="F:cklib.Log.LogManagerEx.DefaultManagerKey">
            <summary>
            デフォルトのマネージャーキー
            </summary>
        </member>
        <member name="F:cklib.Log.LogManagerEx.ManagerKey">
            <summary>
            インスタンスを識別するキー情報
            </summary>
        </member>
        <member name="M:cklib.Log.LogManagerEx.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Log.LogManagerEx.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Log.LogManagerEx.Finalize">
            <summary>
            ディストラクタ
            </summary>
        </member>
        <member name="F:cklib.Log.LogManagerEx.disposed">
            <summary>
            Dispose完了フラグ
            </summary>
        </member>
        <member name="M:cklib.Log.LogManagerEx.Dispose">
            <summary>
            Disposeメソッド
            </summary>
        </member>
        <member name="M:cklib.Log.LogManagerEx.Dispose(System.Boolean)">
            <summary>
            Dispose処理の実装
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:cklib.Log.LogManagerEx.ReleseResorce">
            <summary>
            リソース解放処理
            </summary>
        </member>
        <member name="M:cklib.Log.LogManagerEx.ReleseManagedResorce">
            <summary>
            マネージドリソース解放処理（明示的呼び出し時のみ実行される）
            </summary>
        </member>
        <member name="M:cklib.Log.LogManagerEx.Initialize">
            <summary>
            初期化アプリケーション設定をロードする
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogManagerEx.Initialize(cklib.Log.Config.ConfigInfo)">
            <summary>
            初期化アプリケーション設定をロードする
            </summary>
            <param name="conf">設定情報インスタンス</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogManagerEx.InitializeSub">
            <summary>
            初期化サブ処理
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogManagerEx.ReStart">
            <summary>
            再起動
            </summary>
            <returns>初期化結果</returns>
        </member>
        <member name="M:cklib.Log.LogManagerEx.ReStart(cklib.Log.Config.ConfigInfo)">
            <summary>
            再起動
            </summary>
            <param name="conf">設定情報インスタンス</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Log.LogManagerEx.EngineGarbaged">
            <summary>
            ログエンジンのガベージ
            </summary>
            <remarks>
            Web等アプリケーションの制御と無関係にログエンジンがガベージされてしまった場合にログエンジンより呼び出しつじつまを合わせる
            </remarks>
        </member>
        <member name="M:cklib.Log.LogManagerEx.Terminate">
            <summary>
            ログエンジンの停止
            </summary>
        </member>
        <member name="M:cklib.Log.LogManagerEx.LogStore(cklib.Log.LogData)">
            <summary>
            ログの書き込み
            </summary>
            <param name="data">ログデータ</param>
            <returns></returns>
        </member>
        <member name="T:cklib.Log.Scrambler">
            <summary>
            ログ内容の暗号化モジュール
            </summary>
        </member>
        <member name="M:cklib.Log.Scrambler.EncryptToString(System.Byte[],cklib.Log.Config.BasicLogConfig,cklib.Log.LogingEngine)">
            <summary>
            暗号処理（
            </summary>
            <remarks>
            デフォルトではDES暗号が適応される(ScrambleKeyへ要設定)<br/>
            他のスクランブルを使用する場合はオーバーロードする
            </remarks>
            <param name="msg">暗号元メッセージ</param>
            <param name="Config">設定情報</param>
            <param name="engine">ログエンジンインスタンス</param>
            <returns>暗号化メッセージ(文字列エンコードする）</returns>
        </member>
        <member name="M:cklib.Log.Scrambler.Encrypt(System.Byte[],cklib.Log.Config.BasicLogConfig,cklib.Log.LogingEngine)">
            <summary>
            暗号処理
            </summary>
            <remarks>
            デフォルトではDES暗号が適応される(ScrambleKeyへ要設定)<br/>
            他のスクランブルを使用する場合はオーバーロードする
            </remarks>
            <param name="msg">暗号元メッセージ</param>
            <param name="Config">設定情報</param>
            <param name="engine">ログエンジンインスタンス</param>
            <returns>暗号化メッセージ(文字列エンコードする）</returns>
        </member>
        <member name="M:cklib.Log.Scrambler.Decrypt(System.Byte[],System.String)">
            <summary>
            複合化処理
            </summary>
            <param name="bsrc"><see cref="M:cklib.Log.Scrambler.Encrypt(System.Byte[],cklib.Log.Config.BasicLogConfig,cklib.Log.LogingEngine)"/>で生成された暗号データのBase64エンコードを解除したもの</param>
            <param name="ScrambleKey">暗号化キー文字列</param>
            <returns>複合されたデータ</returns>
        </member>
        <member name="M:cklib.Log.Scrambler.Decrypt(System.String,System.String)">
            <summary>
            複合化処理
            </summary>
            <param name="scramblestr"><see cref="M:cklib.Log.Scrambler.Encrypt(System.Byte[],cklib.Log.Config.BasicLogConfig,cklib.Log.LogingEngine)"/>で生成された暗号データ</param>
            <param name="ScrambleKey">暗号化キー文字列</param>
            <returns>複合されたデータ</returns>
        </member>
        <member name="M:cklib.Log.Scrambler.IsNeedNL(cklib.Log.Config.BasicLogConfig)">
            <summary>
            行末改行の要否
            </summary>
            <param name="conf">該当出力先のログ設定</param>
            <returns>true必要</returns>
        </member>
        <member name="T:cklib.Log.FileRotater">
            <summary>
            ファイルログをローテーションする
            </summary>
        </member>
        <member name="M:cklib.Log.FileRotater.Rotate(cklib.Log.Config.FileLogConfig)">
            <summary>
            ローテーション処理
            </summary>
            <remarks>
            以下のタイミングで呼び出される<br/>
            ログ起動時、ログ記録が無い待機状態で日替わり発生時、ログ日付が変更した時<br/>
            デフォルトの実装では、RoteteDayを超えたファイルを削除と圧縮ファイル化する
            </remarks>
            <param name="Config">設定情報</param>
            <returns>成功時true</returns>
        </member>
        <member name="M:cklib.Log.FileRotater.SizeRotate(cklib.Log.Config.FileLogConfig,System.DateTime)">
            <summary>
            ファイルサイズローテーション処理
            </summary>
            <remarks>
            以下のタイミングで呼び出される<br/>
            ログ書き込み時に指定サイズを超える可能性がある場合
            デフォルトの実装では、RoteteDayを超えたファイルを削除と圧縮ファイル化する
            ファイルサイズローテートの追加によりRotateSizeを超えるログ発生時にも呼び出される。
            </remarks>
            <param name="Config">設定情報</param>
            <param name="LogTime">SizeRotateに必要なログ日時</param>
            <returns>成功時true</returns>
        </member>
        <member name="T:cklib.Log.Formatter">
            <summary>
            ログ内容を書式化する
            </summary>
        </member>
        <member name="M:cklib.Log.Formatter.Format(cklib.Log.LogData,cklib.Log.Config.BasicLogConfig,cklib.Log.LogingEngine)">
            <summary>
            書式化処理(バイト配列出力)
            </summary>
            <param name="Data">ログデータ</param>
            <param name="conf">該当出力先のログ設定</param>
            <param name="engine">ログエンジンインスタンス</param>
            <returns>書式化後データ</returns>
        </member>
        <member name="M:cklib.Log.Formatter.FormatString(cklib.Log.LogData,cklib.Log.Config.BasicLogConfig,cklib.Log.LogingEngine)">
            <summary>
            書式化処理(文字列出力)
            </summary>
            <param name="Data">ログデータ</param>
            <param name="conf">該当出力先のログ設定</param>
            <param name="engine">ログエンジンインスタンス</param>
            <returns>書式化後データ</returns>
        </member>
        <member name="M:cklib.Log.Formatter.AppendExceptionData(cklib.Log.LogData,System.Text.StringBuilder@,cklib.Log.LogingEngine)">
            <summary>
            例外文字列の追加
            </summary>
            <param name="Data">ログデータ</param>
            <param name="stb">編集中ログメッセージバッファー</param>
            <param name="engine">ログエンジンインスタンス</param>
        </member>
        <member name="M:cklib.Log.Formatter.IsNeedNL(cklib.Log.Config.BasicLogConfig)">
            <summary>
            行末改行の要否
            </summary>
            <param name="conf">該当出力先のログ設定</param>
            <returns>true必要</returns>
        </member>
        <member name="T:cklib.Log.TraceFormatter">
            <summary>
            通信トレースログ内容を書式化する
            </summary>
        </member>
        <member name="M:cklib.Log.TraceFormatter.Format(cklib.Log.LogData,cklib.Log.Config.BasicLogConfig,cklib.Log.LogingEngine)">
            <summary>
            書式化処理(バイト配列出力)
            </summary>
            <param name="Data">ログデータ</param>
            <param name="conf">該当出力先のログ設定</param>
            <param name="engine">ログエンジンインスタンス</param>
            <returns>書式化後データ</returns>
        </member>
        <member name="M:cklib.Log.TraceFormatter.FormatString(cklib.Log.LogData,cklib.Log.Config.BasicLogConfig,cklib.Log.LogingEngine)">
            <summary>
            書式化処理(文字列出力)
            </summary>
            <param name="Data">ログデータ</param>
            <param name="conf">該当出力先のログ設定</param>
            <param name="engine">ログエンジンインスタンス</param>
            <returns>書式化後データ</returns>
        </member>
        <member name="T:cklib.Util.ArrayTool">
            <summary>
            Arrayユーティリティ
            </summary>
        </member>
        <member name="M:cklib.Util.ArrayTool.Equals``1(``0[],System.Int32,``0[],System.Int32,System.Int32)">
            <summary>
            配列の一致検査を行う
            </summary>
            <remarks>
            配列の有効長がlengthに満たない場合は、比較可能な範囲で比較を行う。<br/>
            但し、配列1,2で比較可能長が異なる場合は、配列が不一致なので比較を中止しfalseを返す
            </remarks>
            <param name="p1">配列1</param>
            <param name="p1_start">配列1のチェック開始先頭位置</param>
            <param name="p2">配列2</param>
            <param name="p2_start">配列2のチェック開始先頭位置</param>
            <param name="length">比較を行う長さ</param>
            <returns>true:一致</returns>
        </member>
        <member name="M:cklib.Util.ArrayTool.Equals``1(``0[],``0[],System.Int32)">
            <summary>
            配列の一致検査を行う
            </summary>
            <remarks>
            配列の有効長がlengthに満たない場合は、比較可能な範囲で比較を行う。<br/>
            但し、配列1,2で比較可能長が異なる場合は、配列が不一致なので比較を中止しfalseを返す
            </remarks>
            <param name="p1">配列1</param>
            <param name="p2">配列2</param>
            <param name="length">比較を行う長さ</param>
            <returns>true:一致</returns>
        </member>
        <member name="T:cklib.Util.ByteArray.ConvertBase">
            <summary>
            バイナリデータ並び順変換基本クラス
            </summary>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.FromNumeric``2(``0,System.Byte[]@,System.Int32)">
            <summary>
            T型→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToNumeric``2(System.Byte[],System.Int32,``0@)">
            <summary>
            byte配列→T型変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.FromLong(System.Int64,System.Byte[]@,System.Int32)">
            <summary>
            long→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.FromLong(System.Int64,System.Byte[]@)">
            <summary>
            long→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToLong(System.Byte[],System.Int32,System.Int64@)">
            <summary>
            byte配列→long変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToLong(System.Byte[],System.Int64@)">
            <summary>
            byte配列→long変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToLong(System.Byte[],System.Int32)">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToLong(System.Byte[])">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.FromULong(System.UInt64,System.Byte[]@,System.Int32)">
            <summary>
            ulong→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.FromULong(System.UInt64,System.Byte[]@)">
            <summary>
            ulong→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToULong(System.Byte[],System.Int32,System.UInt64@)">
            <summary>
            byte配列→ulong変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToULong(System.Byte[],System.UInt64@)">
            <summary>
            byte配列→ulong変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToULong(System.Byte[],System.Int32)">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToULong(System.Byte[])">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.FromInt(System.Int32,System.Byte[]@,System.Int32)">
            <summary>
            int→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.FromInt(System.Int32,System.Byte[]@)">
            <summary>
            int→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToInt(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToInt(System.Byte[],System.Int32@)">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToInt(System.Byte[],System.Int32)">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToInt(System.Byte[])">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.FromUInt(System.UInt32,System.Byte[]@,System.Int32)">
            <summary>
            uint→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.FromUInt(System.UInt32,System.Byte[]@)">
            <summary>
            uint→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToUInt(System.Byte[],System.Int32,System.UInt32@)">
            <summary>
            byte配列→uint変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToUInt(System.Byte[],System.UInt32@)">
            <summary>
            byte配列→uint変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToUInt(System.Byte[],System.Int32)">
            <summary>
            byte配列→uint変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToUInt(System.Byte[])">
            <summary>
            byte配列→uint変換
            </summary>
            <param name="src">変換元配列</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.FromShort(System.Int16,System.Byte[]@,System.Int32)">
            <summary>
            short→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.FromShort(System.Int16,System.Byte[]@)">
            <summary>
            short→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToShort(System.Byte[],System.Int32,System.Int16@)">
            <summary>
            byte配列→short変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToShort(System.Byte[],System.Int16@)">
            <summary>
            byte配列→short変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToShort(System.Byte[],System.Int32)">
            <summary>
            byte配列→short変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToShort(System.Byte[])">
            <summary>
            byte配列→short変換
            </summary>
            <param name="src">変換元配列</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.FromUShort(System.UInt16,System.Byte[]@,System.Int32)">
            <summary>
            ushort→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.FromUShort(System.UInt16,System.Byte[]@)">
            <summary>
            ushort→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToUShort(System.Byte[],System.Int32,System.UInt16@)">
            <summary>
            byte配列→ushort変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToUShort(System.Byte[],System.UInt16@)">
            <summary>
            byte配列→ushort変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToUShort(System.Byte[],System.Int32)">
            <summary>
            byte配列→ushort変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.ConvertBase.ToUShort(System.Byte[])">
            <summary>
            byte配列→ushort変換
            </summary>
            <param name="src">変換元配列</param>
            <returns>変換結果</returns>
        </member>
        <member name="T:cklib.Util.ByteArray.ICalculator`1">
            <summary>
            演算インターフェース
            </summary>
            <typeparam name="T">型指定</typeparam>
        </member>
        <member name="M:cklib.Util.ByteArray.ICalculator`1.SetZero">
            <summary>
            値のクリア
            </summary>
        </member>
        <member name="M:cklib.Util.ByteArray.ICalculator`1.SetValue(`0)">
            <summary>
            値設定
            </summary>
            <param name="value">設定する値</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ICalculator`1.GetValue">
            <summary>
            値の取得
            </summary>
            <returns>データ</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.ICalculator`1.SetByte(System.Byte,System.Int32)">
            <summary>
            指定位置に値をセット
            </summary>
            <param name="b">設定する値</param>
            <param name="i">設定する位置</param>
        </member>
        <member name="M:cklib.Util.ByteArray.ICalculator`1.ByteData(System.Int32)">
            <summary>
            ビットシフト
            </summary>
            <param name="offset">オフセット</param>
            <returns>シフト後のデータ</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.ICalculator`1.Size">
            <summary>
            型Tのbyte幅
            </summary>
            <returns>バイト幅数</returns>
        </member>
        <member name="T:cklib.Util.ByteArray.IntCalculator">
            <summary>
            int型用計算クラス
            </summary>
        </member>
        <member name="T:cklib.Util.ByteArray.UIntCalculator">
            <summary>
            uint型用計算クラス
            </summary>
        </member>
        <member name="T:cklib.Util.ByteArray.ShortCalculator">
            <summary>
            short型用計算クラス
            </summary>
        </member>
        <member name="T:cklib.Util.ByteArray.UShortCalculator">
            <summary>
            ushort型用計算クラス
            </summary>
        </member>
        <member name="T:cklib.Util.ByteArray.LongCalculator">
            <summary>
            short型用計算クラス
            </summary>
        </member>
        <member name="T:cklib.Util.ByteArray.ULongCalculator">
            <summary>
            ulong型用計算クラス
            </summary>
        </member>
        <member name="T:cklib.Util.ByteArray.IntelOrder">
            <summary>
            Intelオーダー（下位先順）変換クラス
            </summary>
        </member>
        <member name="M:cklib.Util.ByteArray.IntelOrder.FromNumeric``2(``0,System.Byte[]@,System.Int32)">
            <summary>
            T型→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.IntelOrder.ToNumeric``2(System.Byte[],System.Int32,``0@)">
            <summary>
            byte配列→T型変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="T:cklib.Util.ByteArray.NetOrder">
            <summary>
            Networkオーダー(上位先順）変換クラス
            </summary>
        </member>
        <member name="M:cklib.Util.ByteArray.NetOrder.FromNumeric``2(``0,System.Byte[]@,System.Int32)">
            <summary>
            T型→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.NetOrder.ToNumeric``2(System.Byte[],System.Int32,``0@)">
            <summary>
            byte配列→T型変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="T:cklib.Util.ByteArray.Intel">
            <summary>
            byte配列変換ユーティリティ(リトルエンディアン用)
            </summary>
        </member>
        <member name="F:cklib.Util.ByteArray.Intel.cnv">
            <summary>
            変換クラスインスタンス
            </summary>
        </member>
        <member name="P:cklib.Util.ByteArray.Intel.Converter">
            <summary>
            変換クラスインスタンス
            </summary>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.FromLong(System.Int64,System.Byte[]@,System.Int32)">
            <summary>
            long→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.FromLong(System.Int64,System.Byte[]@)">
            <summary>
            long→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToLong(System.Byte[],System.Int32,System.Int64@)">
            <summary>
            byte配列→long変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToLong(System.Byte[],System.Int64@)">
            <summary>
            byte配列→long変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToLong(System.Byte[],System.Int32)">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToLong(System.Byte[])">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.FromULong(System.UInt64,System.Byte[]@,System.Int32)">
            <summary>
            ulong→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.FromULong(System.UInt64,System.Byte[]@)">
            <summary>
            ulong→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToULong(System.Byte[],System.Int32,System.UInt64@)">
            <summary>
            byte配列→ulong変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToULong(System.Byte[],System.UInt64@)">
            <summary>
            byte配列→ulong変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToULong(System.Byte[],System.Int32)">
            <summary>
            byte配列→ulong変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToULong(System.Byte[])">
            <summary>
            byte配列→ulong変換
            </summary>
            <param name="src">変換元配列</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.FromInt(System.Int32,System.Byte[]@,System.Int32)">
            <summary>
            int→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.FromInt(System.Int32,System.Byte[]@)">
            <summary>
            int→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToInt(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToInt(System.Byte[],System.Int32@)">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToInt(System.Byte[],System.Int32)">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToInt(System.Byte[])">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.FromUInt(System.UInt32,System.Byte[]@,System.Int32)">
            <summary>
            uint→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.FromUInt(System.UInt32,System.Byte[]@)">
            <summary>
            uint→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToUInt(System.Byte[],System.Int32,System.UInt32@)">
            <summary>
            byte配列→uint変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToUInt(System.Byte[],System.UInt32@)">
            <summary>
            byte配列→uint変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToUInt(System.Byte[],System.Int32)">
            <summary>
            byte配列→uint変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToUInt(System.Byte[])">
            <summary>
            byte配列→uint変換
            </summary>
            <param name="src">変換元配列</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.FromShort(System.Int16,System.Byte[]@,System.Int32)">
            <summary>
            short→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.FromShort(System.Int16,System.Byte[]@)">
            <summary>
            short→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToShort(System.Byte[],System.Int32,System.Int16@)">
            <summary>
            byte配列→short変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToShort(System.Byte[],System.Int16@)">
            <summary>
            byte配列→short変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToShort(System.Byte[],System.Int32)">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToShort(System.Byte[])">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.FromUShort(System.UInt16,System.Byte[]@,System.Int32)">
            <summary>
            ushort→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.FromUShort(System.UInt16,System.Byte[]@)">
            <summary>
            ushort→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToUShort(System.Byte[],System.Int32,System.UInt16@)">
            <summary>
            byte配列→ushort変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToUShort(System.Byte[],System.UInt16@)">
            <summary>
            byte配列→ushort変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToUShort(System.Byte[],System.Int32)">
            <summary>
            byte配列→ushort変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Intel.ToUShort(System.Byte[])">
            <summary>
            byte配列→ushort変換
            </summary>
            <param name="src">変換元配列</param>
            <returns>変換結果</returns>
        </member>
        <member name="T:cklib.Util.ByteArray.Net">
            <summary>
            byte配列変換ユーティリティ(ビックエンディアン用)
            </summary>
        </member>
        <member name="F:cklib.Util.ByteArray.Net.cnv">
            <summary>
            変換クラスインスタンス
            </summary>
        </member>
        <member name="P:cklib.Util.ByteArray.Net.Converter">
            <summary>
            変換クラスインスタンス
            </summary>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.FromLong(System.Int64,System.Byte[]@,System.Int32)">
            <summary>
            long→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.FromLong(System.Int64,System.Byte[]@)">
            <summary>
            long→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToLong(System.Byte[],System.Int32,System.Int64@)">
            <summary>
            byte配列→long変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToLong(System.Byte[],System.Int64@)">
            <summary>
            byte配列→long変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToLong(System.Byte[],System.Int32)">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToLong(System.Byte[])">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.FromULong(System.UInt64,System.Byte[]@,System.Int32)">
            <summary>
            ulong→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.FromULong(System.UInt64,System.Byte[]@)">
            <summary>
            ulong→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToULong(System.Byte[],System.Int32,System.UInt64@)">
            <summary>
            byte配列→ulong変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToULong(System.Byte[],System.UInt64@)">
            <summary>
            byte配列→ulong変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToULong(System.Byte[],System.Int32)">
            <summary>
            byte配列→ulong変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToULong(System.Byte[])">
            <summary>
            byte配列→ulong変換
            </summary>
            <param name="src">変換元配列</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.FromInt(System.Int32,System.Byte[]@,System.Int32)">
            <summary>
            int→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.FromInt(System.Int32,System.Byte[]@)">
            <summary>
            int→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToInt(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToInt(System.Byte[],System.Int32@)">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToInt(System.Byte[],System.Int32)">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToInt(System.Byte[])">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.FromUInt(System.UInt32,System.Byte[]@,System.Int32)">
            <summary>
            uint→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.FromUInt(System.UInt32,System.Byte[]@)">
            <summary>
            uint→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToUInt(System.Byte[],System.Int32,System.UInt32@)">
            <summary>
            byte配列→uint変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToUInt(System.Byte[],System.UInt32@)">
            <summary>
            byte配列→uint変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToUInt(System.Byte[],System.Int32)">
            <summary>
            byte配列→uint変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToUInt(System.Byte[])">
            <summary>
            byte配列→uint変換
            </summary>
            <param name="src">変換元配列</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.FromShort(System.Int16,System.Byte[]@,System.Int32)">
            <summary>
            short→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.FromShort(System.Int16,System.Byte[]@)">
            <summary>
            short→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToShort(System.Byte[],System.Int32,System.Int16@)">
            <summary>
            byte配列→short変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToShort(System.Byte[],System.Int16@)">
            <summary>
            byte配列→short変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToShort(System.Byte[],System.Int32)">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToShort(System.Byte[])">
            <summary>
            byte配列→int変換
            </summary>
            <param name="src">変換元配列</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.FromUShort(System.UInt16,System.Byte[]@,System.Int32)">
            <summary>
            ushort→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
            <param name="Offset">格納先添え字オフセット</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.FromUShort(System.UInt16,System.Byte[]@)">
            <summary>
            ushort→byte配列変換
            </summary>
            <param name="src">変換元</param>
            <param name="dest">変換結果格納配列</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToUShort(System.Byte[],System.Int32,System.UInt16@)">
            <summary>
            byte配列→ushort変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToUShort(System.Byte[],System.UInt16@)">
            <summary>
            byte配列→ushort変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="dest">変換結果格納先</param>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToUShort(System.Byte[],System.Int32)">
            <summary>
            byte配列→ushort変換
            </summary>
            <param name="src">変換元配列</param>
            <param name="Offset">変換元添え字オフセット</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.ByteArray.Net.ToUShort(System.Byte[])">
            <summary>
            byte配列→ushort変換
            </summary>
            <param name="src">変換元配列</param>
            <returns>変換結果</returns>
        </member>
        <member name="T:cklib.Util.Config.KeyValuePairElement">
            <summary>
            KeyValuePair定義コレクション
            </summary>
        </member>
        <member name="M:cklib.Util.Config.KeyValuePairElement.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="P:cklib.Util.Config.KeyValuePairElement.Key">
            <summary>
            ログコード指定
            </summary>
        </member>
        <member name="P:cklib.Util.Config.KeyValuePairElement.Value">
            <summary>
            メッセージフォーマット
            </summary>
        </member>
        <member name="T:cklib.Util.Config.KeyValuePairElementCollection">
            <summary>
            KeyValuePair設定コレクション
            </summary>
        </member>
        <member name="M:cklib.Util.Config.KeyValuePairElementCollection.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Util.Config.KeyValuePairElementCollection.Get(System.Int32)">
            <summary>
            項目抽出
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Config.KeyValuePairElementCollection.Get(System.String)">
            <summary>
            ConfigurationElementCollection 内の ConfigurationElement をキーから取得
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:cklib.Util.Config.KeyValuePairElementCollection.Item(System.Int32)">
            <summary>
            配列アクセス
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:cklib.Util.Config.KeyValuePairElementCollection.Item(System.String)">
            <summary>
            配列アクセス
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Config.KeyValuePairElementCollection.Contains(System.String)">
            <summary>
            ConfigurationElementCollection 内に指定したキーの ConfigurationElement があるか
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Config.KeyValuePairElementCollection.CreateNewElement">
            <summary>
            新しい ConfigurationElement を作成
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Config.KeyValuePairElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            指定した構成要素の要素キーを取得
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:cklib.Util.Config.KeyValuePairSection">
            <summary>
            KeyValuePair設定Section
            </summary>
        </member>
        <member name="M:cklib.Util.Config.KeyValuePairSection.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="F:cklib.Util.Config.KeyValuePairSection.ElementCollectionName">
            <summary>
            KeyValuePair設定Sectionエレメント名
            </summary>
        </member>
        <member name="P:cklib.Util.Config.KeyValuePairSection.KeyValuePairElements">
            <summary>
            KeyValuePair設定Section情報エレメント
            </summary>
        </member>
        <member name="T:cklib.Util.Config.Profile">
            <summary>
            プロファイル操作
            </summary>
        </member>
        <member name="M:cklib.Util.Config.Profile.GetPrivateProfileString(System.String,System.String,System.String,System.Byte[],System.UInt32,System.String)">
            <summary>
            指定したプライベートプロファイルから設定をリードする
            </summary>
            <param name="lpAppName">セクション名</param>
            <param name="lpKeyName">キー名</param>
            <param name="lpDefault">デフォルト値</param>
            <param name="lpReturnedString">情報が格納されるバッファ</param>
            <param name="nSize">情報バッファのサイズ</param>
            <param name="lpFileName"> .ini ファイルの名前</param>
            <returns>バッファに格納された文字数</returns>
        </member>
        <member name="M:cklib.Util.Config.Profile.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            指定したプライベートプロファイルへ書き込む
            </summary>
            <param name="lpAppName">セクション名</param>
            <param name="lpKeyName">キー名</param>
            <param name="lpString"></param>
            <param name="lpFileName"> .ini ファイルの名前</param>
            <returns>成功時true</returns>
        </member>
        <member name="F:cklib.Util.Config.Profile.Name">
            <summary>
            プロファイル名
            </summary>
        </member>
        <member name="M:cklib.Util.Config.Profile.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="path">プロファイル名</param>
        </member>
        <member name="M:cklib.Util.Config.Profile.GetString(System.String,System.String,System.String)">
            <summary>
            文字列の取得
            </summary>
            <param name="section">セクション名</param>
            <param name="key">キー</param>
            <param name="defaultvalue">デフォルト値</param>
            <returns>取得文字列</returns>
        </member>
        <member name="M:cklib.Util.Config.Profile.SetString(System.String,System.String,System.String)">
            <summary>
            設定の書き込み
            </summary>
            <param name="section">セクション名</param>
            <param name="key">キー</param>
            <param name="value">設定値</param>
        </member>
        <member name="P:cklib.Util.Config.Profile.Item(System.String)">
            <summary>
            インデクサ
            </summary>
            <param name="section">セクション名</param>
            <returns>セクションインスタンス</returns>
        </member>
        <member name="T:cklib.Util.Config.Profile.Section">
            <summary>
            セクションへのアクセス
            </summary>
        </member>
        <member name="F:cklib.Util.Config.Profile.Section.profile">
            <summary>
            プロファイルインスタンス
            </summary>
        </member>
        <member name="F:cklib.Util.Config.Profile.Section.Name">
            <summary>
            セクション名
            </summary>
        </member>
        <member name="M:cklib.Util.Config.Profile.Section.#ctor(cklib.Util.Config.Profile,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="profile">プロファイル</param>
            <param name="SectionName"></param>
        </member>
        <member name="M:cklib.Util.Config.Profile.Section.GetString(System.String,System.String)">
            <summary>
            文字列の取得
            </summary>
            <param name="key">キー</param>
            <param name="defaultvalue">デフォルト値</param>
            <returns>取得文字列</returns>
        </member>
        <member name="M:cklib.Util.Config.Profile.Section.SetString(System.String,System.String)">
            <summary>
            設定の書き込み
            </summary>
            <param name="key">キー</param>
            <param name="value">設定値</param>
        </member>
        <member name="M:cklib.Util.Config.Profile.Section.GetInt(System.String,System.Int32)">
            <summary>
            数値の取得
            </summary>
            <param name="key">キー</param>
            <param name="defaultvalue">デフォルト値</param>
            <returns>取得数値</returns>
        </member>
        <member name="M:cklib.Util.Config.Profile.Section.SetInt(System.String,System.Int32)">
            <summary>
            数値設定の書き込み
            </summary>
            <param name="key">キー</param>
            <param name="value">設定値</param>
        </member>
        <member name="P:cklib.Util.Config.Profile.Section.Item(System.String)">
            <summary>
            インデクサ
            </summary>
            <param name="key">キー</param>
            <returns>設定値</returns>
        </member>
        <member name="T:cklib.Util.Console">
            <summary>
            コンソール制御
            </summary>
        </member>
        <member name="M:cklib.Util.Console.GenerateConsoleCtrlEvent(System.Int32,System.Int32)">
            <summary>
            呼び出し側プロセスのコンソールを共有するコンソールプロセスグループに、指定した信号を送信します。
            </summary>
            <param name="CtlEvent">送信する信号の種類を指定します。次のいずれかの定数を指定します。<br/>
            CTRL_C_EVENT	CTRL+C 信号を送信します。<br/>
            CTRL_BREAK_EVENT	CTRL+BREAK 信号を送信します。</param>
            <param name="ProcessID">信号の送信先プロセスグループの識別子を指定します。
            CreateProcess 関数を呼び出すときに CREATE_NEW_PROCESS_GROUP フラグをセットすると、
            プロセスグループが作成されます。新しいプロセスのプロセス識別子が新しいプロセスグループの
            プロセスグループ識別子にもなります。プロセスグループには、ルートプロセスの子孫となるすべてのプロセスが含まれます。
            信号を受け取るのは、グループ内の、呼び出し側プロセスと同じコンソールを共有するプロセスだけです。
            つまり、グループ内のあるプロセスが新しいコンソールを作成すると、そのプロセスは信号を受け取りません。
            そのプロセスの子孫も信号を受け取りません。
            dwProcessGroupId パラメータに 0 を指定すると、呼び出し側プロセスのコンソールを共有するすべてのプロセスに
            信号が送信されます。 </param>
            <returns>関数が成功すると、0 以外の値が返ります。
            関数が失敗すると、0 が返ります。拡張エラー情報を取得するには、GetLastError 関数を使います。</returns>
        </member>
        <member name="M:cklib.Util.Console.GetConsoleCP">
            <summary>
            呼び出し側プロセスのコンソールが使う入力コードページを返します。
            コンソールはその入力コードページを使って、キーボード入力を対応する文字値に変換します。
            </summary>
            <returns>コードページの識別コードが返ります。></returns>
        </member>
        <member name="M:cklib.Util.Console.SetConsoleCP(System.Int32)">
            <summary>
            呼び出し側プロセスのコンソールが使う入力コードページを設定します。
            コンソールはその入力コードページを使って、キーボード入力を対応する文字値に変換します。
            </summary>
            <param name="cp">設定するコードページの識別子を指定します。
            ローカルコンピュータで利用できるコードページの識別子がレジストリの次のキーに格納されています。
            HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Nls\CodePage </param>
            <returns>関数が成功すると、0 以外の値が返ります。
            関数が失敗すると、0 が返ります。拡張エラー情報を取得するには、GetLastError 関数を使います。</returns>
        </member>
        <member name="T:cklib.Util.Console.HandlerRoutine">
            <summary>
            コンソールコールバックハンドラ定義
            </summary>
            <param name="dwDevice"></param>
        </member>
        <member name="F:cklib.Util.Console.handler">
            <summary>
            コールバックイベントハンドラ
            </summary>
        </member>
        <member name="M:cklib.Util.Console.GetLastError">
            <summary>
            エラーコード取得
            </summary>
            <returns>Win32エラーコード</returns>
        </member>
        <member name="T:cklib.Util.Console.structBase">
            <summary>
            構造体定義基本クラス
            </summary>
        </member>
        <member name="M:cklib.Util.Console.structBase.GetBytes(System.Byte[]@,System.Int32)">
            <summary>
            指定バッファに書き込む
            </summary>
            <param name="b">バイト配列</param>
            <param name="offset">配列へのオフセット</param>
        </member>
        <member name="M:cklib.Util.Console.structBase.GetBytes(System.Byte[]@)">
            <summary>
            指定バッファに書き込む
            </summary>
            <param name="b">バイト配列</param>
        </member>
        <member name="M:cklib.Util.Console.structBase.SetBytes(System.Byte[],System.Int32)">
            <summary>
            指定バッファからセットする
            </summary>
            <param name="b">バイト配列</param>
            <param name="offset">配列へのオフセット</param>
        </member>
        <member name="M:cklib.Util.Console.structBase.SetBytes(System.Byte[])">
            <summary>
            指定バッファからセットする
            </summary>
            <param name="b">バイト配列</param>
        </member>
        <member name="P:cklib.Util.Console.structBase.Length">
            <summary>
            構造体の長さ
            </summary>
        </member>
        <member name="T:cklib.Util.Console.COORD">
            <summary>
            coordinates of a character cell
            </summary>
        </member>
        <member name="F:cklib.Util.Console.COORD.x">
            <summary>
            水平位置または幅
            </summary>
        </member>
        <member name="F:cklib.Util.Console.COORD.y">
            <summary>
            垂直位置または高さ
            </summary>
        </member>
        <member name="M:cklib.Util.Console.COORD.GetBytes(System.Byte[]@,System.Int32)">
            <summary>
            指定バッファに書き込む
            </summary>
            <param name="b">バイト配列</param>
            <param name="offset">配列へのオフセット</param>
        </member>
        <member name="M:cklib.Util.Console.COORD.SetBytes(System.Byte[],System.Int32)">
            <summary>
            指定バッファからセットする
            </summary>
            <param name="b">バイト配列</param>
            <param name="offset">配列へのオフセット</param>
        </member>
        <member name="P:cklib.Util.Console.COORD.Length">
            <summary>
            構造体の長さ
            </summary>
        </member>
        <member name="T:cklib.Util.Console.SMALL_RECT">
            <summary>
            coordinates of the upper left and lower right corners of a rectangle.
            </summary>
        </member>
        <member name="F:cklib.Util.Console.SMALL_RECT.Left">
            <summary>
            左端
            </summary>
        </member>
        <member name="F:cklib.Util.Console.SMALL_RECT.Top">
            <summary>
            上端
            </summary>
        </member>
        <member name="F:cklib.Util.Console.SMALL_RECT.Right">
            <summary>
            右端
            </summary>
        </member>
        <member name="F:cklib.Util.Console.SMALL_RECT.Bottom">
            <summary>
            下端
            </summary>
        </member>
        <member name="M:cklib.Util.Console.SMALL_RECT.GetBytes(System.Byte[]@,System.Int32)">
            <summary>
            指定バッファに書き込む
            </summary>
            <param name="b">バイト配列</param>
            <param name="offset">配列へのオフセット</param>
        </member>
        <member name="M:cklib.Util.Console.SMALL_RECT.SetBytes(System.Byte[],System.Int32)">
            <summary>
            指定バッファからセットする
            </summary>
            <param name="b">バイト配列</param>
            <param name="offset">配列へのオフセット</param>
        </member>
        <member name="P:cklib.Util.Console.SMALL_RECT.Length">
            <summary>
            構造体の長さ
            </summary>
        </member>
        <member name="T:cklib.Util.Console.CONSOLE_SCREEN_BUFFER_INFO">
            <summary>
            contains information about a console screen buffer.
            </summary>
        </member>
        <member name="F:cklib.Util.Console.CONSOLE_SCREEN_BUFFER_INFO.dwSize">
            <summary>
            contains the size of the console screen buffer
            </summary>
        </member>
        <member name="F:cklib.Util.Console.CONSOLE_SCREEN_BUFFER_INFO.dwCursorPosition">
            <summary>
            column and row coordinates of the cursor in the console screen buffer
            </summary>
        </member>
        <member name="F:cklib.Util.Console.CONSOLE_SCREEN_BUFFER_INFO.wAttributes">
            <summary>
            Attributes of the characters written to a screen buffer 
            </summary>
        </member>
        <member name="F:cklib.Util.Console.CONSOLE_SCREEN_BUFFER_INFO.srWindow">
            <summary>
            console screen buffer coordinates of the upper-left and lower-right corners of the display window. 
            </summary>
        </member>
        <member name="F:cklib.Util.Console.CONSOLE_SCREEN_BUFFER_INFO.dwMaximumWindowSize">
            <summary>
            contains the maximum size 
            </summary>
        </member>
        <member name="M:cklib.Util.Console.CONSOLE_SCREEN_BUFFER_INFO.GetBytes(System.Byte[]@,System.Int32)">
            <summary>
            指定バッファに書き込む
            </summary>
            <param name="b">バイト配列</param>
            <param name="offset">配列へのオフセット</param>
        </member>
        <member name="M:cklib.Util.Console.CONSOLE_SCREEN_BUFFER_INFO.SetBytes(System.Byte[],System.Int32)">
            <summary>
            指定バッファからセットする
            </summary>
            <param name="b">バイト配列</param>
            <param name="offset">配列へのオフセット</param>
        </member>
        <member name="P:cklib.Util.Console.CONSOLE_SCREEN_BUFFER_INFO.Length">
            <summary>
            構造体の長さ
            </summary>
        </member>
        <member name="M:cklib.Util.Console.Alloc">
            <summary>
            コンソールを開く
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Console.Attach(System.Int32)">
            <summary>
            コンソールにアタッチする
            </summary>
            <param name="ProcessID">アタッチするコンソールを所有するプロセス</param>
            <returns></returns>
        </member>
        <member name="F:cklib.Util.Console.ATTACH_PARENT_PROCESS">
            <summary>
            親プロセスコンソールにアタッチする場合
            </summary>
        </member>
        <member name="M:cklib.Util.Console.Close">
            <summary>
            コンソールを閉じる
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Console.ConsoleHandlerRoutine(System.UInt32)">
            <summary>
            コンソールコールバックハンドラ
            </summary>
            <param name="dwDevice"></param>
        </member>
        <member name="T:cklib.Util.Console.ConsoleHandlerEventRoutine">
            <summary>
            コンソールイベントデリゲート定義
            </summary>
            <param name="reason">イベント理由<br/>0:CTRL+C<BR/>1:CTRL+BREAK<BR/>2:CLOSE<BR/>5:LogOff<BR/>6:ShutDown<BR/></param>
        </member>
        <member name="F:cklib.Util.Console.ConsoleEventHandler">
            <summary>
            コンソールイベントデリゲート
            </summary>
        </member>
        <member name="M:cklib.Util.Console.GetDisplayMode">
            <summary>
            コンソールモードの取得
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Console.SetDisplayMode(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            コンソールモード設定
            </summary>
            <param name="dwFlags">1 フルスクリーンモード<br/>2 ウインドウモード</param>
            <param name="x">スクリーンバッファ桁数</param>
            <param name="y">スクリーンバッファ行数</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Console.SetDisplayMode(System.Int32)">
            <summary>
            コンソールモード設定
            </summary>
            <param name="dwFlags">1 フルスクリーンモード<br/>2 ウインドウモード</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Console.GetCursorInfo(System.Int32@,System.Boolean@)">
            <summary>
            カーソル情報の取得
            </summary>
            <param name="size">サイズ</param>
            <param name="visible">表示状態</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Console.SetCursorInfo(System.Int32,System.Boolean)">
            <summary>
            カーソル情報の設定
            </summary>
            <param name="size">サイズ</param>
            <param name="visible">表示状態</param>
            <returns></returns>
        </member>
        <member name="F:cklib.Util.Console.CONSOLE_MODE_ENABLE_ECHO_INPUT">
            <summary>
            Characters read by the ReadFile or ReadConsole function are written to
            the active screen buffer as they are read.
            This mode can be used only if the ENABLE_LINE_INPUT mode is also enabled. 
            </summary>
        </member>
        <member name="F:cklib.Util.Console.CONSOLE_MODE_ENABLE_INSERT_MODE">
            <summary>
            When enabled, text entered in a console window will be inserted at the
            current cursor location and all text following that location will not 
            be overwritten. When disabled, all following text will be overwritten.
            An OR operation must be performed with this flag and the ENABLE_EXTENDED_FLAGS flag
            to enable this functionality. 
            </summary>
        </member>
        <member name="F:cklib.Util.Console.CONSOLE_MODE_ENABLE_LINE_INPUT">
            <summary>
            The ReadFile or ReadConsole function returns only when a carriage return 
            character is read. If this mode is disabled, the functions return when 
            one or more characters are available
            </summary>
        </member>
        <member name="F:cklib.Util.Console.CONSOLE_MODE_ENABLE_MOUSE_INPUT">
            <summary>
            If the mouse pointer is within the borders of the console window and the 
            window has the keyboard focus, mouse events generated by mouse movement 
            and button presses are placed in the input buffer.
            These events are discarded by ReadFile or ReadConsole, even when this mode is enabled. 
            </summary>
        </member>
        <member name="F:cklib.Util.Console.CONSOLE_MODE_ENABLE_PROCESSED_INPUT">
            <summary>
            CTRL+C is processed by the system and is not placed in the input buffer.
            If the input buffer is being read by ReadFile or ReadConsole, other control
            keys are processed by the system and are not returned in the ReadFile or 
            ReadConsole buffer. If the ENABLE_LINE_INPUT mode is also enabled, backspace,
            carriage return, and linefeed characters are handled by the system. 
            </summary>
        </member>
        <member name="F:cklib.Util.Console.CONSOLE_MODE_ENABLE_QUICK_EDIT_MODE">
            <summary>
            This flag enables the user to use the mouse to select and edit text. 
            To enable this option, use the OR to combine this flag with ENABLE_EXTENDED_FLAGS.  
            </summary>
        </member>
        <member name="F:cklib.Util.Console.CONSOLE_MODE_ENABLE_WINDOW_INPUT">
            <summary>
            User interactions that change the size of the console screen buffer are 
            reported in the console's input buffer. Information about these events can 
            be read from the input buffer by applications using the ReadConsoleInput function, 
            but not by those using ReadFile or ReadConsole. 
            </summary>
        </member>
        <member name="F:cklib.Util.Console.CONSOLE_MODE_ENABLE_PROCESSED_OUTPUT">
            <summary>
            Characters written by the WriteFile or WriteConsole function or echoed by the ReadFile 
            or ReadConsole function are examined for ASCII control sequences and the correct action 
            is performed. Backspace, tab, bell, carriage return, and linefeed characters are processed. 
            </summary>
        </member>
        <member name="F:cklib.Util.Console.CONSOLE_MODE_ENABLE_WRAP_AT_EOL_OUTPUT">
            <summary>
            When writing with WriteFile or WriteConsole or echoing with ReadFile or ReadConsole,
            the cursor moves to the beginning of the next row when it reaches the end of the current row.
            This causes the rows displayed in the console window to scroll up automatically when the cursor
            advances beyond the last row in the window. It also causes the contents of the console screen 
            buffer to scroll up (discarding the top row of the console screen buffer) when the cursor advances
            beyond the last row in the console screen buffer. If this mode is disabled, the last character 
            in the row is overwritten with any subsequent characters.
            Windows Me/98/95:  This value is not supported. 
            </summary>
        </member>
        <member name="M:cklib.Util.Console.SetInputMode(System.Int32)">
            <summary>
            入力モード設定
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Console.GetInputMode">
            <summary>
            入力モード設定
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Console.SetOutputMode(System.Int32)">
            <summary>
            出力モード設定
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Console.GetOutputMode">
            <summary>
            出力モード設定
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Console.GetCurrentConsoleFont(System.Boolean,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            現在のコンソールのフォントとフォントサイズを取得する
            </summary>
            <param name="bMaximumWindow">If this parameter is TRUE, font information is retrieved for the maximum window size.
            If this parameter is FALSE, font information is retrieved for the current window size.
            このパラメータがtrueの場合、フォント情報は、最大ウィンドウサイズのために取得されます。
            このパラメータがFALSEの場合、フォント情報は、現在のウィンドウサイズのために取得されます。</param>
            <param name="nFont">フォントサイズ</param>
            <param name="w">フォント幅</param>
            <param name="h">フォント高</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Console.GetTitle">
            <summary>
            コンソールタイトルの取得
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Console.SetTitle(System.String)">
            <summary>
            コンソールタイトルを設定する
            </summary>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Console.SetScreenBufferSize(System.Int32,System.Int32)">
            <summary>
            スクリーンバッファの設定
            </summary>
            <param name="w">幅</param>
            <param name="h">高さ</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Console.GetScreenBufferInfo(cklib.Util.Console.CONSOLE_SCREEN_BUFFER_INFO@)">
            <summary>
            スクリーンバッファ情報の取得
            </summary>
            <param name="info">情報構造体</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Console.SetWindowInfo(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            ウインドウ情報設定
            </summary>
            <param name="left">左端</param>
            <param name="top">上端</param>
            <param name="right">右端</param>
            <param name="bottom">下端</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Console.SetWindowInfo(System.Int32,System.Int32)">
            <summary>
            ウインドウ情報設定
            </summary>
            <param name="width">幅</param>
            <param name="height">高</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Console.SetWindowInfo(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            ウインドウ情報設定
            </summary>
            <param name="bAbsolute">左端指定の有無</param>
            <param name="left">左端</param>
            <param name="top">上端</param>
            <param name="right">右端</param>
            <param name="bottom">下端</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Console.GetLargestConsoleWindowSize">
            <summary>
            最大ウインドウサイズの取得
            </summary>
            <returns></returns>
        </member>
        <member name="F:cklib.Util.Console.STD_INPUT_HANDLE">
            <summary>
            Handle to the standard input device. Initially, this is a handle to the console input buffer, CONIN$. 
            </summary>
        </member>
        <member name="F:cklib.Util.Console.STD_OUTPUT_HANDLE">
            <summary>
            Handle to the standard output device. Initially, this is a handle to the active console screen buffer, CONOUT$. 
            </summary>
        </member>
        <member name="F:cklib.Util.Console.STD_ERROR_HANDLE">
            <summary>
            Handle to the standard error device. Initially, this is a handle to the active console screen buffer, CONOUT$. 
            </summary>
        </member>
        <member name="M:cklib.Util.Console.GetSTDINHandle">
            <summary>
            標準入力ハンドラを取得
            </summary>
            <remarks>
            CONIN$デバイス、コンソール入力バッファ
            </remarks>
            <returns>標準入力</returns>
        </member>
        <member name="M:cklib.Util.Console.GetSTDOutHandle">
            <summary>
            標準出力ハンドラを取得
            </summary>
            <remarks>
            CONOUT$デバイス、コンソールスクリーンバッファ
            </remarks>
            <returns>標準入力</returns>
        </member>
        <member name="M:cklib.Util.Console.GetSTDErrHandle">
            <summary>
            標準エラーハンドラを取得
            </summary>
            <remarks>
            CONOUT$デバイス、コンソールスクリーンバッファ
            </remarks>
            <returns>標準入力</returns>
        </member>
        <member name="T:cklib.Util.CSVDecoder">
            <summary>
            CSVファイルロード
            </summary>
            <remarks>
            rfc4180　http://www.ietf.org/rfc/rfc4180.txt/>
            </remarks>
        </member>
        <member name="F:cklib.Util.CSVDecoder.ItemList">
            <summary>
            項目一覧
            </summary>
        </member>
        <member name="F:cklib.Util.CSVDecoder.LineList">
            <summary>
            行一覧
            </summary>
        </member>
        <member name="M:cklib.Util.CSVDecoder.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <remarks>文字列から生成する</remarks>
            <param name="str">CSVイメージのテキスト</param>
        </member>
        <member name="M:cklib.Util.CSVDecoder.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            コンストラクタ
            </summary>
            <remarks>エンコーディングを指定してファイルをロードする</remarks>
            <param name="strm">ロードするファイルストリームス</param>
            <param name="encoding">文字エンコード</param>
        </member>
        <member name="T:cklib.Util.CSVDecoder.AnalizePhase">
            <summary>
            解析フェーズ
            </summary>
        </member>
        <member name="F:cklib.Util.CSVDecoder.aPhase">
            <summary>
            解析フェーズ値
            </summary>
        </member>
        <member name="F:cklib.Util.CSVDecoder.currentLine">
            <summary>
            現在行
            </summary>
        </member>
        <member name="F:cklib.Util.CSVDecoder.currentField">
            <summary>
            現在の項目
            </summary>
        </member>
        <member name="F:cklib.Util.CSVDecoder.currentItems">
            <summary>
            現在行の項目一覧
            </summary>
        </member>
        <member name="M:cklib.Util.CSVDecoder.InitializeAnalize">
            <summary>
            解析初期化
            </summary>
        </member>
        <member name="M:cklib.Util.CSVDecoder.TerminateAnalize">
            <summary>
            解析終了処理
            </summary>
        </member>
        <member name="M:cklib.Util.CSVDecoder.InitalizeLine">
            <summary>
            行解析の初期化
            </summary>
        </member>
        <member name="M:cklib.Util.CSVDecoder.LineCommit">
            <summary>
            行解析完了する
            </summary>
        </member>
        <member name="M:cklib.Util.CSVDecoder.StoreChar(System.Char)">
            <summary>
            文字をストアする
            </summary>
            <param name="ch"></param>
        </member>
        <member name="T:cklib.Util.Errors">
            <summary>
            エラー情報関連
            </summary>
        </member>
        <member name="M:cklib.Util.Errors.GetHResultFromIOException(System.IO.IOException)">
            <summary>
            IOExceptionからHResult値を取得する
            </summary>
            <remarks>
             WinError.hより<br/>
             #define FACILITY_WIN32                   7<br/>
             #define __HRESULT_FROM_WIN32(x) ((HRESULT)(x) &gt;= 0 ? ((HRESULT)(x)) : ((HRESULT) (((x) &amp; 0x0000FFFF) | (FACILITY_WIN32 &gt;&gt; 16) | 0x80000000)))<br/>
             #define ERROR_SHARING_VIOLATION          32L    →  0x80070020<br/>
             #define ERROR_LOCK_VIOLATION             33L    →  0x80070021<br/>
            </remarks>
            <param name="exp">IOExceptionのインスタンス</param>
            <returns>HResult</returns>
        </member>
        <member name="M:cklib.Util.Errors.GetWin32ErrorCodeFromIOException(System.IO.IOException)">
            <summary>
            IOExceptionからWin32エラー値を取得する
            </summary>
            <remarks>
             WinError.hより<br/>
             #define FACILITY_WIN32                   7<br/>
             #define __HRESULT_FROM_WIN32(x) ((HRESULT)(x) &gt; 0 ? ((HRESULT)(x)) : ((HRESULT) (((x) &amp; 0x0000FFFF) | (FACILITY_WIN32 &gt;&gt; 16) | 0x80000000)))<br/>
             #define ERROR_SHARING_VIOLATION          32L    →  0x80070020<br/>
             #define ERROR_LOCK_VIOLATION             33L    →  0x80070021<br/>
            </remarks>
            <param name="exp">IOExceptionのインスタンス</param>
            <returns>HResult</returns>
        </member>
        <member name="M:cklib.Util.Errors.IsWin32ErrorHResult(System.UInt32)">
            <summary>
            HResultがWin32エラーか判別する
            </summary>
            <param name="hResult">hResult値</param>
            <returns>true Win32エラー</returns>
        </member>
        <member name="M:cklib.Util.Errors.HResultToWin32ErrorCode(System.UInt32)">
            <summary>
            HResultをWin32エラーコードに変換する
            </summary>
            <param name="hResult">hResult値</param>
            <returns>Win32エラーコード</returns>
        </member>
        <member name="M:cklib.Util.Errors.GetLastError">
            <summary>
            Win32エラーコードの取得
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Errors.FormatMessage(System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.Text.StringBuilder,System.Int32,System.IntPtr)">
            <summary>
            エラーメッセージの取得
            </summary>
            <param name="dwFlags"></param>
            <param name="lpSource"></param>
            <param name="dwMessageId"></param>
            <param name="dwLanguageId"></param>
            <param name="lpBuffer"></param>
            <param name="nSize"></param>
            <param name="Arguments"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Errors.GetSystemErrorMessage(System.UInt32)">
            <summary>
            Win32エラーメッセージの取得
            </summary>
            <param name="ecode">Win32エラーコード</param>
            <returns>エラーメッセージ</returns>
        </member>
        <member name="T:cklib.Util.Printer.DevMode">
            <summary>
            DevMode のロードサーブ処理
            </summary>
        </member>
        <member name="M:cklib.Util.Printer.DevMode.Save(System.IntPtr,System.String,System.String)">
            <summary>
            DEVMODE構造体の保存(Wide型からAscii型に変換し保存する)
            </summary>
            <param name="hDevMode">DEVMODEへのグローバルハンドル</param>
            <param name="SavePathA">保存先ファイル名(アスキーコードモード）</param>
            <param name="SavePathW">保存先ファイル名(Unicodeモード)</param>
            <returns>成功時true</returns>
        </member>
        <member name="M:cklib.Util.Printer.DevMode.Load(System.String)">
            <summary>
            DevModeのロード
            </summary>
            <param name="LoadPath">DevModeファイルパス</param>
            <returns>DevModへのポインタ</returns>
        </member>
        <member name="T:cklib.Util.ConfigErrorEventArgs">
            <summary>
            ConfigErrorEventArgs<br/>
            設定情報取得エラー時発生イベント情報
            </summary>
        </member>
        <member name="F:cklib.Util.ConfigErrorEventArgs.errExp">
            <summary>
            例外情報
            </summary>
        </member>
        <member name="P:cklib.Util.ConfigErrorEventArgs.Exception">
            <summary>
            例外情報
            </summary>
        </member>
        <member name="F:cklib.Util.ConfigErrorEventArgs.configName">
            <summary>
            取得データ名
            </summary>
        </member>
        <member name="P:cklib.Util.ConfigErrorEventArgs.ConfigName">
            <summary>
            取得データ名
            </summary>
        </member>
        <member name="F:cklib.Util.ConfigErrorEventArgs.defaultValue">
            <summary>
            デフォルトデータ値
            </summary>
        </member>
        <member name="P:cklib.Util.ConfigErrorEventArgs.DefaultValue">
            <summary>
            デフォルトデータ値
            </summary>
        </member>
        <member name="M:cklib.Util.ConfigErrorEventArgs.#ctor(System.String,System.String,System.Exception)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="T:cklib.Util.ConfigUtil">
            <summary>
            設定情報の取得
            </summary>
        </member>
        <member name="T:cklib.Util.ConfigUtil.ConfigErrorEventHandler">
            <summary>
            設定値取得エラーイベントハンドラ定義
            </summary>
        </member>
        <member name="E:cklib.Util.ConfigUtil.ConfigErrorEvent">
            <summary>
            設定値取得エラーイベントハンドラ定義
            </summary>
        </member>
        <member name="M:cklib.Util.ConfigUtil.GetConfigObject(System.String,System.Object)">
            <summary>
            設定情報の取得
            </summary>
            <param name="name">キー名</param>
            <param name="defaultvalue">未設定時のデフォルト値</param>
            <returns>取得されたオブジェクト</returns>
        </member>
        <member name="M:cklib.Util.ConfigUtil.GetConfigString(System.String,System.String)">
            <summary>
            設定文字列の取得
            </summary>
            <param name="name">キー名</param>
            <param name="defaultvalue">未設定時のデフォルト値</param>
            <returns>取得された文字列</returns>
        </member>
        <member name="M:cklib.Util.ConfigUtil.GetConfigInt(System.String,System.Int32)">
            <summary>
            設定数値の取得
            </summary>
            <param name="name">キー名</param>
            <param name="defaultvalue">未設定時のデフォルト値</param>
            <returns>取得された数値</returns>
        </member>
        <member name="T:cklib.Util.ConfigUtil.ExtendConfig">
            <summary>
            外部設定情報クラス
            ※DotNet1.1互換用クラス
            </summary>
        </member>
        <member name="F:cklib.Util.ConfigUtil.ExtendConfig.section">
            <summary>
            セクション名
            </summary>
        </member>
        <member name="F:cklib.Util.ConfigUtil.ExtendConfig.dic">
            <summary>
            セクション情報取得データ
            </summary>
        </member>
        <member name="M:cklib.Util.ConfigUtil.ExtendConfig.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="sectionname">セクション名</param>
        </member>
        <member name="M:cklib.Util.ConfigUtil.ExtendConfig.GetConfigObject(System.String,System.Object)">
            <summary>
            設定情報の取得
            </summary>
            <param name="name">キー名</param>
            <param name="defaultvalue">未設定時のデフォルト値</param>
            <returns>取得されたオブジェクト</returns>
        </member>
        <member name="M:cklib.Util.ConfigUtil.ExtendConfig.GetConfigString(System.String,System.String)">
            <summary>
            設定文字列の取得
            </summary>
            <param name="name">キー名</param>
            <param name="defaultvalue">未設定時のデフォルト値</param>
            <returns>取得された文字列</returns>
        </member>
        <member name="M:cklib.Util.ConfigUtil.ExtendConfig.GetConfigInt(System.String,System.Int32)">
            <summary>
            設定数値の取得
            </summary>
            <param name="name">キー名</param>
            <param name="defaultvalue">未設定時のデフォルト値</param>
            <returns>取得された数値</returns>
        </member>
        <member name="T:cklib.Util.ConfigUtil.ExtendListTypeConfig">
            <summary>
            Default付一覧形式の拡張設定情報参照クラス
            </summary>
        </member>
        <member name="M:cklib.Util.ConfigUtil.ExtendListTypeConfig.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="sectionname">セクション名</param>
        </member>
        <member name="P:cklib.Util.ConfigUtil.ExtendListTypeConfig.Item(System.String)">
            <summary>
            バージョンからURLを取得する
            指定されたバージョンが存在しない場合は、"Default"設定をロードする
            </summary>
        </member>
        <member name="T:cklib.Util.ConfigUtil.EnumrateConfig">
            <summary>
            列挙定義参照クラス
            </summary>
        </member>
        <member name="F:cklib.Util.ConfigUtil.EnumrateConfig.msgs">
            <summary>
            定義データの配列
            </summary>
        </member>
        <member name="M:cklib.Util.ConfigUtil.EnumrateConfig.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="sectionname">セクション名</param>
        </member>
        <member name="P:cklib.Util.ConfigUtil.EnumrateConfig.Item(System.Int32)">
            <summary>
            設定の配列アクセス
            </summary>
        </member>
        <member name="P:cklib.Util.ConfigUtil.EnumrateConfig.Count">
            <summary>
            定義数の取得
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.ConfigUtil.EnumrateConfig.GetEnumerator">
            <summary>
            IEnumerable実装メンバ
            </summary>
            <returns></returns>
        </member>
        <member name="T:cklib.Util.ConfigUtil.EnumrateConfig.TokenEnumerator">
            <summary>
            IEnumerator実装クラス
            </summary>
        </member>
        <member name="M:cklib.Util.ConfigUtil.EnumrateConfig.TokenEnumerator.#ctor(cklib.Util.ConfigUtil.EnumrateConfig)">
            <summary>
            コンストラクタ
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:cklib.Util.ConfigUtil.EnumrateConfig.TokenEnumerator.MoveNext">
            <summary>
            ポジション移動
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.ConfigUtil.EnumrateConfig.TokenEnumerator.Reset">
            <summary>
            ポジションリセット
            </summary>
        </member>
        <member name="P:cklib.Util.ConfigUtil.EnumrateConfig.TokenEnumerator.Current">
            <summary>
            現在のポジションのオブジェクトの取得
            </summary>
        </member>
        <member name="T:cklib.Util.ConfigXml">
            <summary>
            ConfigXml<br/>
            XML形式設定ファイル用アクセスユーティリティ
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:cklib.Util.ConfigXml.XmlDoc">
            <summary>
            XMLドキュメントインスタンス
            </summary>
        </member>
        <member name="F:cklib.Util.ConfigXml.FilePath">
            <summary>
            ファイルパス
            </summary>
        </member>
        <member name="F:cklib.Util.ConfigXml.fUpdate">
            <summary>
            設定値更新フラグ
            </summary>
        </member>
        <member name="P:cklib.Util.ConfigXml.IsUpdate">
            <summary>
            設定更新フラグ
            </summary>
        </member>
        <member name="M:cklib.Util.ConfigXml.#ctor">
            <summary>
            デフォルトコンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Util.ConfigXml.#ctor(System.String)">
            <summary>
            コンストラクタ	ファイル指定
            </summary>
            <param name="FilePath">XMLファイルパス</param>
        </member>
        <member name="M:cklib.Util.ConfigXml.Load(System.String)">
            <summary>
            ファイルのロード
            </summary>
            <param name="FilePath">XMLファイルパス</param>
        </member>
        <member name="M:cklib.Util.ConfigXml.Save">
            <summary>
            ファイルの保存
            </summary>
        </member>
        <member name="M:cklib.Util.ConfigXml.Save(System.String)">
            <summary>
            ファイルの保存
            </summary>
        </member>
        <member name="M:cklib.Util.ConfigXml.Finalize">
            <summary>
            ディストラクタ
            </summary>
        </member>
        <member name="F:cklib.Util.ConfigXml.disposed">
            <summary>
            Dispose完了フラグ
            </summary>
        </member>
        <member name="M:cklib.Util.ConfigXml.Dispose">
            <summary>
            Dispose処理の実装
            Queとイベントオブジェクトを破棄する
            </summary>
        </member>
        <member name="M:cklib.Util.ConfigXml.Dispose(System.Boolean)">
            <summary>
            Dispose処理の実装
            </summary>
            <param name="disposing">手動開放かディストラクタかの識別</param>
        </member>
        <member name="M:cklib.Util.ConfigXml.Select(System.String)">
            <summary>
            XPathによるオブジェクトの参照
            </summary>
            <param name="path">XPath指定</param>
            <returns>取得されたオブジェクト</returns>
        </member>
        <member name="M:cklib.Util.ConfigXml.Selects(System.String)">
            <summary>
            XPathによるオブジェクトの参照
            </summary>
            <param name="path">XPath指定</param>
            <returns>取得されたオブジェクト</returns>
        </member>
        <member name="M:cklib.Util.ConfigXml.Select(System.String,System.Object)">
            <summary>
            XPathによるオブジェクトの更新
            </summary>
            <param name="path">XPath指定</param>
            <param name="val">登録するデータ</param>
        </member>
        <member name="M:cklib.Util.ConfigXml.SelectUpdate(System.String,System.Object)">
            <summary>
            XPathによるオブジェクトの更新
            </summary>
            <param name="path">XPath指定</param>
            <param name="val">登録するデータ</param>
        </member>
        <member name="M:cklib.Util.ConfigXml.SelectAdd(System.String,System.Object)">
            <summary>
            XPathによるオブジェクトの追加
            </summary>
            <param name="path">XPath指定</param>
            <param name="val">登録するデータ</param>
        </member>
        <member name="M:cklib.Util.ConfigXml.SelectString(System.String)">
            <summary>
            XPathによる文字列の取得
            </summary>
        </member>
        <member name="M:cklib.Util.ConfigXml.SelectString(System.String,System.Int32)">
            <summary>
            XPathによる文字列の取得(配列アクセス)
            </summary>
            <param name="path">XPath指定</param>
            <param name="idx">添え字</param>
            <returns>取得された文字列</returns>
        </member>
        <member name="M:cklib.Util.ConfigXml.SelectString(System.String,System.String)">
            <summary>
            XPathによる文字列の取得
            </summary>
            <param name="path">XPath指定</param>
            <param name="DefaultValue">データがない場合のディフォルト値</param>
            <returns>取得された文字列</returns>
        </member>
        <member name="M:cklib.Util.ConfigXml.SelectString(System.String,System.Int32,System.String)">
            <summary>
             XPathによる文字列の取得(配列アクセス)
            </summary>
            <returns></returns>
            <param name="path">XPath指定</param>
            <param name="idx">添え字</param>
            <param name="DefaultValue">データがない場合のディフォルト値</param>
            <returns>取得された文字列</returns>
        </member>
        <member name="M:cklib.Util.ConfigXml.SelectInt(System.String)">
            <summary>
            XPathによる数値(int)の取得
            </summary>
            <param name="path">XPath指定</param>
            <returns>取得された数値</returns>
        </member>
        <member name="M:cklib.Util.ConfigXml.SelectInt(System.String,System.Int32)">
            <summary>
            XPathによる数値(int)の取得
            </summary>
            <param name="path">XPath指定</param>
            <param name="DefaultValue">データがない場合のディフォルト値</param>
            <returns>取得された数値</returns>
        </member>
        <member name="M:cklib.Util.ConfigXml.SelectInt(System.String,System.Int32,System.Int32)">
            <summary>
            XPathによる数値の取得(配列アクセス)
            </summary>
            <param name="path">XPath指定</param>
            <param name="idx">添え字</param>
            <param name="DefaultValue">データがない場合のディフォルト値</param>
            <returns>取得された文字列</returns>
        </member>
        <member name="M:cklib.Util.ConfigXml.Count(System.String)">
            <summary>
            XPathによるで指定したエレメントの数の取得
            </summary>
            <param name="path">XPath指定</param>
            <returns>エレメントの数</returns>
        </member>
        <member name="T:cklib.Util.File">
            <summary>
            File ファイル操作関連のユーティリティ。
            </summary>
        </member>
        <member name="M:cklib.Util.File.CloseHandle(System.IntPtr)">
            <summary>
            ハンドルを閉じる
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.File.GetLastError">
            <summary>
            Win32エラーコードの取得
            </summary>
            <returns></returns>
        </member>
        <member name="F:cklib.Util.File.AccessMode_GENERIC_READ">
            <summary>
            読み取りアクセス
            </summary>
        </member>
        <member name="F:cklib.Util.File.AccessMode_GENERIC_WRITE">
            <summary>
            書き込みアクセス
            </summary>
        </member>
        <member name="F:cklib.Util.File.AccessMode_GENERIC_EXECUTE">
            <summary>
            実行アクセス
            </summary>
        </member>
        <member name="F:cklib.Util.File.AccessMode_GENERIC_ALL">
            <summary>
            すべてのアクセス
            </summary>
        </member>
        <member name="F:cklib.Util.File.ShareMode_FILE_SHARE_READ">
            <summary>
            読み取り共有
            </summary>
        </member>
        <member name="F:cklib.Util.File.ShareMode_FILE_SHARE_WRITE">
            <summary>
            書き込み共有
            </summary>
        </member>
        <member name="F:cklib.Util.File.ShareMode_FILE_SHARE_DELETE">
            <summary>
            削除共有
            </summary>
        </member>
        <member name="F:cklib.Util.File.CREATE_NEW">
            <summary>
            新しいファイルを作成します。指定したファイルが既に存在している場合、この関数は失敗します。
            </summary>
        </member>
        <member name="F:cklib.Util.File.CREATE_ALWAYS">
            <summary>
            新しいファイルを作成します。指定したファイルが既に存在している場合、そのファイルを上書きし、既存の属性を消去します。
            </summary>
        </member>
        <member name="F:cklib.Util.File.OPEN_EXISTING">
            <summary>
            ファイルを開きます。指定したファイルが存在していない場合、この関数は失敗します。 
            </summary>
        </member>
        <member name="F:cklib.Util.File.OPEN_ALWAYS">
            <summary>
            ファイルが存在している場合、そのファイルを開きます。指定したファイルが存在していない場合、この関数は dwCreationDisposition パラメータで CREATE_NEW が指定されていたと仮定して新しいファイルを作成します。
            </summary>
        </member>
        <member name="F:cklib.Util.File.TRUNCATE_EXISTING">
            <summary>
            ファイルを開き、ファイルのサイズを 0 バイトにします。呼び出し側プロセスは、dwDesiredAccess パラメータで、少なくとも GENERIC_WRITE アクセス権を指定しなければなりません。指定したファイルが存在していない場合、この関数は失敗します。
            </summary>
        </member>
        <member name="F:cklib.Util.File.FILE_ATTRIBUTE_READONLY">
            <summary>
            	このファイルは読み取り専用です。アプリケーションはこのファイルの読み取りを行えますが、書き込みや削除はできません。
            </summary>
        </member>
        <member name="F:cklib.Util.File.FILE_ATTRIBUTE_HIDDEN">
            <summary>
            このファイルは隠しファイルです。通常のディレクトリリスティングでは表示されません。
            </summary>
        </member>
        <member name="F:cklib.Util.File.FILE_ATTRIBUTE_SYSTEM">
            <summary>
            このファイルは、オペレーティングシステムの一部、またはオペレーティングシステム専用のファイルです。
            </summary>
        </member>
        <member name="F:cklib.Util.File.FILE_ATTRIBUTE_DIRECTORY">
            <summary>
            指定されたハンドルは、ディレクトリに関連しています。
            </summary>
        </member>
        <member name="F:cklib.Util.File.FILE_ATTRIBUTE_ARCHIVE">
            <summary>
            このファイルをアーカイブするべきです。アプリケーションはこの属性を、
            ファイルのバックアップや削除のためのマークとして使います。
            </summary>
        </member>
        <member name="F:cklib.Util.File.FILE_ATTRIBUTE_DEVICE">
            <summary>
            予約済み。使わないでください。
            </summary>
        </member>
        <member name="F:cklib.Util.File.FILE_ATTRIBUTE_NORMAL">
            <summary>
            このファイルに特に属性を設定しません。単独で指定した場合にのみ、この属性は有効です。
            </summary>
        </member>
        <member name="F:cklib.Util.File.FILE_ATTRIBUTE_TEMPORARY">
            <summary>
            このファイルは、一時ファイルとして使われています。ファイルシステムは、
            データをハードディスクのような大容量記憶装置へ書き込む代わりに、高速なアクセスが行えるよう、
            すべてのデータをメモリ内に維持することを試みます。アプリケーションは、
            必要がなくなった段階で一時ファイルをすぐに削除するべきです。
            </summary>
        </member>
        <member name="F:cklib.Util.File.FILE_ATTRIBUTE_SPARSE_FILE">
            <summary>
            	このファイルは、スパースファイル（疎なファイル、未使用の領域が多い、または同じ値が長く続くファイル）です。
            </summary>
        </member>
        <member name="F:cklib.Util.File.FILE_ATTRIBUTE_REPARSE_POINT">
            <summary>
            このファイルには、再解析ポイントが関連付けられています。
            </summary>
        </member>
        <member name="F:cklib.Util.File.FILE_ATTRIBUTE_COMPRESSED">
            <summary>
            指定されたファイルまたはディレクトリは圧縮されています。ファイルの場合、
            ファイル内の全データが圧縮されていることを意味します。ディレクトリの場合、
            そのディレクトリ内に新しく作成されるファイルまたはサブディレクトリが、
            既定で圧縮状態になることを意味します。
            </summary>
        </member>
        <member name="F:cklib.Util.File.FILE_ATTRIBUTE_OFFLINE">
            <summary>
            Windows 2000：このファイルのデータは、すぐには利用できません。
            この属性は、このファイルのデータがオフライン記憶装置へ物理的に移動されたことを示します。
            この属性は、Windows 2000 の階層記憶管理ソフトウェアである「リモート記憶域」が利用するものです。
            アプリケーションは、任意にこの属性を変更するべきではありません。
            </summary>
        </member>
        <member name="F:cklib.Util.File.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED">
            <summary>
            	Windows 2000：このファイルを、「インデックスサービス」の対象にしません。
            </summary>
        </member>
        <member name="F:cklib.Util.File.FILE_ATTRIBUTE_ENCRYPTED">
            <summary>
            このファイルまたはディレクトリを暗号化するよう指示します。
            ファイルに対して指定した場合、そのファイル内のすべてのデータを暗号化することを意味します。
            ディレクトリに対して指示した場合、その中に新しく作成されるファイルとサブディレクトリに対して、
            既定で暗号化を行うことを意味します。FILE_ATTRIBUTE_SYSTEM と共に指定すると、
            FILE_ATTRIBUTE_ENCRYPTED フラグは無効になります。
            </summary>
        </member>
        <member name="M:cklib.Util.File.GetVolumeInformation(System.String,System.String@,System.Int32@,System.Int32@,System.Int32@,System.String@)">
            <summary>
            ボリューム情報の取得
            </summary>
            <param name="drive">ドライブ名を示す文字列 ex)c:\</param>
            <param name="VolumeName">ボリューム名の受け取りバッファ</param>
            <param name="VolumeSerialNumber">ボリュームシリアル番号</param>
            <param name="MaximumComponentLength">ファイル名の上限</param>
            <param name="FileSystemFlags">ファイルシステムフラグ</param>
            <param name="FileSystemName">ファイルシステム名</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.File.CreateFile(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            CreateFile-ファイル等のオープン
            </summary>
            <param name="path">ファイル等のパス</param>
            <param name="AccessMode"></param>
            <param name="ShareMode"></param>
            <param name="CreationDisposition"></param>
            <param name="FlagsAndAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.File.IsSupportCompressFile(System.String)">
            <summary>
            圧縮ファイルをサポートしているかチェックする
            </summary>
            <param name="drive">ドライブレター</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.File.FileCompress(System.String)">
            <summary>
            ファイルの圧縮属性指定
            </summary>
            <param name="file">ファイルパス</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.File.ParsePathToDrive(System.String)">
            <summary>
            ファイルパスの正規化
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.File.GetTempFileName(System.String,System.String,System.UInt32)">
            <summary>
            テンポラリファイル生成
            </summary>
            <remarks>
            詳細はWin32SDK GetTempFileNameの記述を参照
            </remarks>
            <param name="Path">ディレクトリ名</param>
            <param name="Prefix">ディレクトリ名</param>
            <param name="Unique">整数</param>
            <returns>生成されたファイルのファイル名</returns>
        </member>
        <member name="T:cklib.Util.HT_EBCDIC">
            <summary>
            日立系EBCDICコード変換（DP/MTIS用)
            </summary>
        </member>
        <member name="F:cklib.Util.HT_EBCDIC.Jis8ToEbicdic">
            <summary>
            JIS8→EBCDIC変換テーブル
            </summary>
        </member>
        <member name="F:cklib.Util.HT_EBCDIC.EbcdicToJis8">
            <summary>
            EBCDIC→JIS8変換テーブル
            </summary>
        </member>
        <member name="M:cklib.Util.HT_EBCDIC.ToString(System.Byte[])">
            <summary>
            EBCDIC→String変換
            </summary>
            <param name="cb">EBCDICデータ</param>
            <returns>string</returns>
        </member>
        <member name="M:cklib.Util.HT_EBCDIC.ToString(System.Byte[],System.Int32)">
            <summary>
            EBCDIC→String変換
            </summary>
            <param name="cb">EBCDICデータ</param>
            <param name="offset">変換開始位置</param>
            <returns>string</returns>
        </member>
        <member name="M:cklib.Util.HT_EBCDIC.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            EBCDIC→String変換
            </summary>
            <param name="cb">EBCDICデータ</param>
            <param name="offset">変換開始位置</param>
            <param name="length">変換長</param>
            <returns>string</returns>
        </member>
        <member name="M:cklib.Util.HT_EBCDIC.ToEbcdic(System.String)">
            <summary>
            string→EBCDIC変換
            </summary>
            <param name="str">変換元文字列</param>
            <returns>変換結果バイト配列</returns>
        </member>
        <member name="M:cklib.Util.HT_EBCDIC.ToEbcdic(System.String,System.Byte[]@,System.Int32,System.Int32,System.Byte)">
            <summary>
            string→EBCDIC変換
            </summary>
            <param name="str">変換元文字列</param>
            <param name="dest">変換結果バイト配列</param>
            <param name="offset">変換結果格納位置</param>
            <param name="leng">変換結果格納サイズ</param>
            <param name="pad">変換結果が格納サイズに満たない場合のパディング</param>
        </member>
        <member name="M:cklib.Util.HT_EBCDIC.ToEbcdic(System.String,System.Byte[]@,System.Int32,System.Int32,System.String)">
            <summary>
            string→EBCDIC変換
            </summary>
            <param name="str">変換元文字列</param>
            <param name="dest">変換結果バイト配列</param>
            <param name="offset">変換結果格納位置</param>
            <param name="leng">変換結果格納サイズ</param>
            <param name="pad">変換結果が格納サイズに満たない場合のパディング</param>
        </member>
        <member name="M:cklib.Util.HT_EBCDIC.ToEbcdic(System.String,System.Byte[]@,System.Int32)">
            <summary>
            string→EBCDIC変換
            </summary>
            <param name="str">変換元文字列</param>
            <param name="dest">変換結果バイト配列</param>
            <param name="offset">変換結果格納位置</param>
        </member>
        <member name="M:cklib.Util.HT_EBCDIC.ToEbcdic(System.String,System.Byte[]@)">
            <summary>
            string→EBCDIC変換
            </summary>
            <param name="str">変換元文字列</param>
            <param name="dest">変換結果バイト配列</param>
        </member>
        <member name="T:cklib.Util.Privileges">
            <summary>
            特権取得ユーティリティ
            </summary>
        </member>
        <member name="T:cklib.Util.Privileges.LUID_AND_ATTRIBUTES">
            <summary>
            typedef struct _LUID_AND_ATTRIBUTES { 
               LUID   Luid;
               DWORD  Attributes;
            } LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES;
            </summary>
        </member>
        <member name="F:cklib.Util.Privileges.LUID_AND_ATTRIBUTES.Luid">
            <summary>
            Specifies an LUID value.
            </summary>
        </member>
        <member name="F:cklib.Util.Privileges.LUID_AND_ATTRIBUTES.Attributes">
            <summary>
            Specifies attributes of the LUID. 
            This value contains up to 32 one-bit flags. 
            Its meaning is dependent on the definition and use of the LUID.
            </summary>
        </member>
        <member name="T:cklib.Util.Privileges.TOKEN_PRIVILEGES">
            <summary>
            typedef struct _TOKEN_PRIVILEGES {
                DWORD PrivilegeCount;
                LUID_AND_ATTRIBUTES Privileges[];
            } TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES; 
            </summary>
        </member>
        <member name="F:cklib.Util.Privileges.TOKEN_PRIVILEGES.PrivilegeCount">
            <summary>
            This must be set to the number of entries in the Privileges array.
            </summary>
        </member>
        <member name="F:cklib.Util.Privileges.TOKEN_PRIVILEGES.Privileges">
            <summary>
            Specifies an array of LUID_AND_ATTRIBUTES structures.
            Each structure contains the LUID and attributes of a privilege.
            To get the name of the privilege associated with a LUID, 
            call the LookupPrivilegeName function, passing the address of the LUID as the value of the lpLuid parameter.
            </summary>
        </member>
        <member name="M:cklib.Util.Privileges.OpenProcessToken(System.IntPtr,System.Int32,System.IntPtr@)">
            <summary>
            プロセスに関連付けられているアクセストークンを開きます。
            </summary>
            <param name="ProcessHandle">プロセスのハンドル</param>
            <param name="DesiredAccess">プロセスに対して希望するアクセス権</param>
            <param name="TokenHandle">開かれたアクセストークンのハンドルへのポインタ</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Privileges.LookupPrivilegeValue(System.String,System.String,System.Int64@)">
            <summary>
            指定されたシステムで使われているローカル一意識別子（LUID）を取得し、
            指定された特権名をローカルで表現します。
            </summary>
            <param name="lpSystemName">システムを指定する文字列のアドレス</param>
            <param name="lpName">特権を指定する文字列のアドレス</param>
            <param name="lpLuid">ローカル一意識別子のアドレス</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Privileges.AdjustTokenPrivileges(System.IntPtr,System.Boolean,cklib.Util.Privileges.TOKEN_PRIVILEGES@,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            指定したアクセストークン内の特権を有効または無効にします。
            TOKEN_ADJUST_PRIVILEGES アクセス権が必要です。
            </summary>
            <param name="TokenHandle">特権を保持するトークンのハンドル</param>
            <param name="DisableAllPrivileges">すべての特権を無効にするためのフラグ</param>
            <param name="NewState">新しい特権情報へのポインタ</param>
            <param name="BufferLength">PreviousState バッファのバイト単位のサイズ</param>
            <param name="PreviousState">変更を加えられた特権の元の状態を受け取る</param>
            <param name="ReturnLength">PreviousState バッファが必要とするサイズを受け取る</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Privileges.SetPrivilege(System.String)">
            <summary>
            特権を取得する
            </summary>
            <param name="Privilege_NAME">取得する特権の名称</param>
        </member>
        <member name="T:cklib.Util.RTCTimeoutControlList`1">
            <summary>
            時計時刻によるタイムアウト監視
            </summary>
            <typeparam name="TKEY">監視対象オブジェクトclass</typeparam>
        </member>
        <member name="M:cklib.Util.RTCTimeoutControlList`1.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Util.RTCTimeoutControlList`1.CalcWaitTime(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            待ち時間の計算
            </summary>
            <param name="target">タイムアウト時間</param>
            <param name="nw">現在時間</param>
            <param name="prewt">待ち時間</param>
            <returns>待ち時間</returns>
        </member>
        <member name="M:cklib.Util.RTCTimeoutControlList`1.IsTimeout(System.DateTime,System.DateTime)">
            <summary>
            タイムアウトしているか判定する
            </summary>
            <param name="target">タイムアウト時間</param>
            <param name="nw">現在時間</param>
            <returns>タイムアウト時true</returns>
        </member>
        <member name="M:cklib.Util.RTCTimeoutControlList`1.GetNow">
            <summary>
            現在時間の取得
            </summary>
            <returns>現在時間</returns>
        </member>
        <member name="P:cklib.Util.RTCTimeoutControlList`1.Comarer">
            <summary>
            時刻を比較するDelegateインスタンスを取得するCompareメソッドと同一の仕様
            </summary>
            <returns></returns>
        </member>
        <member name="P:cklib.Util.RTCTimeoutControlList`1.UnlimitTime">
            <summary>
            待ち時間最大値の計算の為に使用する
            </summary>
        </member>
        <member name="M:cklib.Util.RTCTimeoutControlList`1.CalcTargetTime(System.TimeSpan,System.DateTime)">
            <summary>
            タイムアウト時間の計算
            </summary>
            <param name="wt">待ち時間</param>
            <param name="nw">現在時間</param>
            <returns>タイムアウト時間</returns>
        </member>
        <member name="M:cklib.Util.RTCTimeoutControlList`1.GetNextIntervalTime(cklib.Util.TimeoutControlList{`0,System.DateTime,System.TimeSpan}.TimeoutControl_Information)">
            <summary>
            インターバルタイマーの次回タイマーを取得する
            </summary>
            <param name="info">前回タイマー情報</param>
            <returns>次回タイマー情報</returns>
        </member>
        <member name="T:cklib.Util.ExitWindows">
            <summary>
            ExitWindowsユーティリティ
            </summary>
        </member>
        <member name="T:cklib.Util.ExitWindows.ExitWindows_uFlags">
            <summary>
            シャットダウンを行う
            </summary>
        </member>
        <member name="F:cklib.Util.ExitWindows.ExitWindows_uFlags.EWX_LOGOFF">
            <summary>
            ログオフ
            </summary>
        </member>
        <member name="F:cklib.Util.ExitWindows.ExitWindows_uFlags.EWX_SHUTDOWN">
            <summary>
            シャットダウン
            </summary>
        </member>
        <member name="F:cklib.Util.ExitWindows.ExitWindows_uFlags.EWX_REBOOT">
            <summary>
            再起動
            </summary>
        </member>
        <member name="F:cklib.Util.ExitWindows.ExitWindows_uFlags.EWX_POWEROFF">
            <summary>
            電源オフ
            </summary>
        </member>
        <member name="F:cklib.Util.ExitWindows.ExitWindows_uFlags.EWX_RESTARTAPPS">
            <summary>
            シャットダウン後再起動
            </summary>
        </member>
        <member name="F:cklib.Util.ExitWindows.ExitWindows_uFlags.EWX_FORCE">
            <summary>
            強制終了（WM_QUERYENDSESSION を送信しない)
            </summary>
        </member>
        <member name="F:cklib.Util.ExitWindows.ExitWindows_uFlags.EWX_FORCEIFHUNG">
            <summary>
            強制終了　WM_QUERYENDSESSION、WM_ENDSESSIONの応答を待たない
            </summary>
        </member>
        <member name="M:cklib.Util.ExitWindows.ExitWindowsEx(cklib.Util.ExitWindows.ExitWindows_uFlags,System.Int32)">
            <summary>
            ExitWindowsEx
            </summary>
            <param name="uFlags">停止指定コード</param>
            <param name="dwReason">Reserve</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.ExitWindows.ExitWindowsEx(cklib.Util.ExitWindows.ExitWindows_uFlags,System.Boolean,System.Boolean)">
            <summary>
            ログオフ
            </summary>
            <param name="uFlags"></param>
            <param name="Force">WM_QUERYENDSESSION を送信しない</param>
            <param name="ForceIfHung">WM_QUERYENDSESSION、WM_ENDSESSIONの応答を待たない</param>
        </member>
        <member name="M:cklib.Util.ExitWindows.Logoff(System.Boolean,System.Boolean)">
            <summary>
            ログオフ
            </summary>
            <param name="Force">WM_QUERYENDSESSION を送信しない</param>
            <param name="ForceIfHung">WM_QUERYENDSESSION、WM_ENDSESSIONの応答を待たない</param>
        </member>
        <member name="M:cklib.Util.ExitWindows.Shutdown(System.Boolean,System.Boolean)">
            <summary>
            シャットダウン
            </summary>
            <param name="Force">WM_QUERYENDSESSION を送信しない</param>
            <param name="ForceIfHung">WM_QUERYENDSESSION、WM_ENDSESSIONの応答を待たない</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.ExitWindows.Reboot(System.Boolean,System.Boolean)">
            <summary>
            再起動
            </summary>
            <param name="Force">WM_QUERYENDSESSION を送信しない</param>
            <param name="ForceIfHung">WM_QUERYENDSESSION、WM_ENDSESSIONの応答を待たない</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.ExitWindows.PowerOff(System.Boolean,System.Boolean)">
            <summary>
            電源断
            </summary>
            <param name="Force">WM_QUERYENDSESSION を送信しない</param>
            <param name="ForceIfHung">WM_QUERYENDSESSION、WM_ENDSESSIONの応答を待たない</param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.ExitWindows.RestartApps(System.Boolean,System.Boolean)">
            <summary>
            シャットダウン後再起動
            </summary>
            <param name="Force">WM_QUERYENDSESSION を送信しない</param>
            <param name="ForceIfHung">WM_QUERYENDSESSION、WM_ENDSESSIONの応答を待たない</param>
            <returns></returns>
        </member>
        <member name="T:cklib.Util.ServiceInstaller">
            <summary>
            サービスインストーラ
            </summary>
        </member>
        <member name="T:cklib.Util.ServiceInstaller.ServiceType">
            <summary>
            サービス種類
            </summary>
        </member>
        <member name="F:cklib.Util.ServiceInstaller.ServiceType.KERNEL_DRIVER">
            <summary>
            ドライバサービスを指定します。
            </summary>
        </member>
        <member name="F:cklib.Util.ServiceInstaller.ServiceType.FILE_SYSTEM_DRIVER">
            <summary>
            ファイルシステムのドライバサービスを指定します。
            </summary>
        </member>
        <member name="F:cklib.Util.ServiceInstaller.ServiceType.ADAPTER">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:cklib.Util.ServiceInstaller.ServiceType.RECOGNIZER_DRIVER">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:cklib.Util.ServiceInstaller.ServiceType.DRIVER">
             <summary>
            
             </summary>
        </member>
        <member name="F:cklib.Util.ServiceInstaller.ServiceType.Win32_OWN_PROCESS">
            <summary>
            サービスアプリケーションがそのアプリケーション専用のプロセス内で動作することを指定します。
            </summary>
        </member>
        <member name="F:cklib.Util.ServiceInstaller.ServiceType.Win32_SHARE_PROCESS">
            <summary>
            サービスアプリケーションが 1 つのプロセスを他のサービスと共有することを指定します。
            </summary>
        </member>
        <member name="F:cklib.Util.ServiceInstaller.ServiceType.Win32">
            <summary>
            
            </summary>
        </member>
        <member name="F:cklib.Util.ServiceInstaller.ServiceType.INTERACTIVE_PROCESS">
            <summary>
            
            </summary>
        </member>
        <member name="F:cklib.Util.ServiceInstaller.ServiceType.TYPE_ALL">
            <summary>
            すべてのタイプ
            </summary>
        </member>
        <member name="T:cklib.Util.ServiceInstaller.StartType">
            <summary>
            開始種類
            </summary>
        </member>
        <member name="F:cklib.Util.ServiceInstaller.StartType.BOOT_START">
            <summary>
            システムローダーが開始するデバイスドライバを指定します。この値は、ドライバサービスにのみ有効です。
            </summary>
        </member>
        <member name="F:cklib.Util.ServiceInstaller.StartType.SYSTEM_START">
            <summary>
            IoInitSystem 関数が開始するデバイスドライバを指定します。この値は、ドライバサービスにのみ有効です。
            </summary>
        </member>
        <member name="F:cklib.Util.ServiceInstaller.StartType.AUTO_START">
            <summary>
            システムの起動時にサービス制御マネージャが自動的に開始するサービスを指定します。
            </summary>
        </member>
        <member name="F:cklib.Util.ServiceInstaller.StartType.DEMAND_START">
            <summary>
            プロセスが StartService 関数を呼び出したときにサービス制御マネージャが開始するサービスを指定します。
            </summary>
        </member>
        <member name="F:cklib.Util.ServiceInstaller.StartType.DISABLED">
            <summary>
            開始できなくするサービスを指定します。
            </summary>
        </member>
        <member name="T:cklib.Util.ServiceInstaller.ErrorControlType">
            <summary>
            エラー制御種類
            </summary>
        </member>
        <member name="F:cklib.Util.ServiceInstaller.ErrorControlType.ERROR_IGNORE">
            <summary>
            開始プログラムはエラーをログに記録しますが、開始操作を続行します。
            </summary>
        </member>
        <member name="F:cklib.Util.ServiceInstaller.ErrorControlType.ERROR_NORMAL">
            <summary>
            開始プログラムはエラーをログに記録し、メッセージボックスをポップアップ表示しますが、開始操作を続行します。
            </summary>
        </member>
        <member name="F:cklib.Util.ServiceInstaller.ErrorControlType.ERROR_SEVERE">
            <summary>
            開始プログラムはエラーをログに記録します。直前に利用したときは正常であったことがわかっている構成を使って開始操作を行っている場合は、その開始操作を続行します。それ以外の場合、直前に利用したときは正常であった構成を使ってシステムを再起動します。
            </summary>
        </member>
        <member name="F:cklib.Util.ServiceInstaller.ErrorControlType.ERROR_CRITICAL">
            <summary>
            可能であれば、開始プログラムはエラーをログに記録します。直前に利用したときは正常であったことがわかっている構成を使って開始操作を行っている場合は、その開始操作は失敗します。それ以外の場合、直前に利用したときは正常であった構成を使ってシステムを再起動します。
            </summary>
        </member>
        <member name="M:cklib.Util.ServiceInstaller.Install(System.String,System.String,System.String,System.String,cklib.Util.ServiceInstaller.ServiceType,cklib.Util.ServiceInstaller.StartType,cklib.Util.ServiceInstaller.ErrorControlType,System.String,System.String)">
            <summary>
            サービスの登録
            </summary>
            <param name="serviceName">サービス名</param>
            <param name="servicedispName">サービス表示名</param>
            <param name="Description">サービスの説明</param>
            <param name="serviceExe">サービス実行プログラムパス</param>
            <param name="type">サービス種類</param>
            <param name="start">起動種類</param>
            <param name="errCtl">エラー制御種類</param>
            <param name="dependes">依存サービス</param>
            <param name="acount">サービスアカウント</param>
        </member>
        <member name="M:cklib.Util.ServiceInstaller.Remove(System.String)">
            <summary>
            サービスの削除
            </summary>
            <param name="serviceName">サービス名</param>
        </member>
        <member name="T:cklib.Util.String">
            <summary>
            String
            </summary>
            <remarks>
            文字列操作ユーティリティ
            </remarks>
        </member>
        <member name="M:cklib.Util.String.LookupLine(System.String@,System.String@,System.Int32@)">
            <summary>
            文字列から行を切り出す
            </summary>
            <param name="src">切り出し元文字列</param>
            <param name="line">切り出された文字列</param>
            <param name="start">切り出し開始位置</param>
            <returns>改行が含まれない場合falseを返す</returns>
        </member>
        <member name="M:cklib.Util.String.AnkToWide(System.String@)">
            <summary>
            半角→全角変換
            </summary>
            <param name="src">変換元文字列</param>
            <returns>変換結果文字列</returns>
        </member>
        <member name="M:cklib.Util.String.WideToAnk(System.String@)">
            <summary>
            全角→半角変換
            </summary>
            <param name="src">変換元文字列</param>
            <returns>変換結果文字列</returns>
        </member>
        <member name="M:cklib.Util.String.GetPadingString(System.String,System.Int32)">
            <summary>
            指定したカラム数の指定文字列を生成する
            </summary>
            <remarks>
            桁数が指定文字列の桁数の倍数で無い場合は、近似する指定桁数以下の最大数となる。
            </remarks>
            <param name="pad">指定文字列</param>
            <param name="column">桁数</param>
            <returns>生成文字列</returns>
        </member>
        <member name="M:cklib.Util.String.AddPading(System.String,System.String,System.Int32)">
            <summary>
            指定したパディング文字を結合して指定カラム数の文字列を生成する
            </summary>
            <param name="src">結合元文字列</param>
            <param name="pad">パディング文字列</param>
            <param name="column">桁数</param>
            <returns>生成文字列</returns>
        </member>
        <member name="M:cklib.Util.String.GetColumn(System.String)">
            <summary>
            指定した文字列のカラム数を取得する
            </summary>
            <param name="str">チェックする文字列</param>
            <returns>カラム数</returns>
        </member>
        <member name="M:cklib.Util.String.SplitColumn(System.String,System.Int32,System.String@)">
            <summary>
            指定したカラムで文字列を分割する
            </summary>
            <remarks>
            分割位置が全角文字を分割する位置となる場合分割位置を１カラム前半に変更し分割する。
            </remarks>
            <param name="str">分割元文字列</param>
            <param name="column">桁数</param>
            <param name="after">分割位置より後半文字列</param>
            <returns>分割位置の前半文字列</returns>
        </member>
        <member name="M:cklib.Util.String.SplitColumnLeft(System.String,System.Int32)">
            <summary>
            指定したカラムで文字列を分割した左側を取得する
            </summary>
            <remarks>
            分割位置が全角文字を分割する位置となる場合分割位置を１カラム前半に変更し分割する。
            </remarks>
            <param name="str">分割元文字列</param>
            <param name="column">桁数</param>
            <returns>分割位置左側文字列</returns>
        </member>
        <member name="M:cklib.Util.String.SplitColumnRight(System.String,System.Int32)">
            <summary>
            指定したカラムで文字列を分割した右側を取得する
            </summary>
            <remarks>
            分割位置が全角文字を分割する位置となる場合分割位置を１カラム前半に変更し分割する。
            </remarks>
            <param name="str">分割元文字列</param>
            <param name="column">桁数</param>
            <returns>分割位置右側文字列</returns>
        </member>
        <member name="M:cklib.Util.String.IsKanji(System.Byte)">
            <summary>
            ShiftJIS第一バイトか検査する
            </summary>
            <param name="src">検査するByteデータ</param>
            <returns>第一バイトならtrue</returns>
        </member>
        <member name="M:cklib.Util.String.SubStringColumn(System.String,System.Int32,System.Int32)">
            <summary>
            指定したカラムから指定カラム数で文字列を切り出す
            </summary>
            <param name="str">切り出し元文字列</param>
            <param name="column">切り出しカラム位置</param>
            <param name="lengcol">切り出す長さ</param>
            <returns>切り出された文字列</returns>
        </member>
        <member name="M:cklib.Util.String.SubString(System.String,System.Int32,System.Int32)">
            <summary>
            指定したカラムから指定文字位置で文字列を切り出す
            </summary>
            <remarks>
            インスタンスから部分文字列を取得します。<br/>
            切り出し位置が文字列範囲外の場合は空文字列を返す<br/>
            lengthが文字列長に満たない場合は、取得出来る範囲で取得する<br/>
            </remarks>
            <param name="str">切り出し元文字列</param>
            <param name="col">部分文字列の開始位置のインデックス</param>
            <param name="length">部分文字列の文字数。 </param>
            <returns>切り出された文字列</returns>
        </member>
        <member name="M:cklib.Util.String.SubString(System.String,System.Int32)">
            <summary>
            指定したカラムから指定文字位置で文字列を切り出す
            </summary>
            <remarks>
            インスタンスから部分文字列を取得します。<br/>
            切り出し位置が文字列範囲外の場合は空文字列を返す<br/>
            lengthが文字列長に満たない場合は、取得出来る範囲で取得する<br/>
            </remarks>
            <param name="str">切り出し元文字列</param>
            <param name="col">部分文字列の開始位置のインデックス</param>
            <returns>切り出された文字列</returns>
        </member>
        <member name="M:cklib.Util.String.Left(System.String,System.Int32)">
            <summary>
            文字列の左端（先頭）から指定した文字数の文字列を切り出す
            </summary>
            <remarks>
            インスタンスから部分文字列を取得します。<br/>
            切り出し位置が文字列範囲外の場合は空文字列を返す<br/>
            lengthが文字列長に満たない場合は、取得出来る範囲で取得する<br/>
            </remarks>
            <param name="str">切り出し元文字列</param>
            <param name="length">部分文字列の文字数。 </param>
            <returns>切り出された文字列</returns>
        </member>
        <member name="M:cklib.Util.String.Right(System.String,System.Int32)">
            <summary>
            文字列の右端（末尾）から指定した文字数の文字列を切り出す
            </summary>
            <remarks>
            インスタンスから部分文字列を取得します。<br/>
            切り出し位置が文字列範囲外の場合は空文字列を返す<br/>
            lengthが文字列長に満たない場合は、取得出来る範囲で取得する<br/>
            </remarks>
            <param name="str">切り出し元文字列</param>
            <param name="length">部分文字列の文字数。 </param>
            <returns>切り出された文字列</returns>
        </member>
        <member name="M:cklib.Util.String.ToInt(System.String)">
            <summary>
            文字列を数字に変換
            </summary>
            <remarks>
            変換出来ない場合例外を発生する<see cref="M:System.Int32.Parse(System.String)"/>
            </remarks>
            <param name="src">変換元</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.String.ToInt(System.String,System.Int32)">
            <summary>
            文字列を数字に変換
            </summary>
            <remarks>
            変換出来ない場合デフォルト値が設定される
            </remarks>
            <param name="src">変換元</param>
            <param name="defval">デフォルト値</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.String.ToLong(System.String)">
            <summary>
            文字列を数字に変換
            </summary>
            <remarks>
            変換出来ない場合例外を発生する<see cref="M:System.Int32.Parse(System.String)"/>
            </remarks>
            <param name="src">変換元</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.String.ToLong(System.String,System.Int64)">
            <summary>
            文字列を数字に変換
            </summary>
            <remarks>
            変換出来ない場合デフォルト値が設定される
            </remarks>
            <param name="src">変換元</param>
            <param name="defval">デフォルト値</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.String.ToDecimal(System.String)">
            <summary>
            文字列を数字に変換
            </summary>
            <remarks>
            変換出来ない場合例外を発生する<see cref="M:System.Int32.Parse(System.String)"/>
            </remarks>
            <param name="src">変換元</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.String.ToDecimal(System.String,System.Decimal)">
            <summary>
            文字列を数字に変換
            </summary>
            <remarks>
            変換出来ない場合デフォルト値が設定される
            </remarks>
            <param name="src">変換元</param>
            <param name="defval">デフォルト値</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.String.ToFloat(System.String)">
            <summary>
            文字列を数字に変換
            </summary>
            <remarks>
            変換出来ない場合例外を発生する<see cref="M:System.Int32.Parse(System.String)"/>
            </remarks>
            <param name="src">変換元</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.String.ToFloat(System.String,System.Single)">
            <summary>
            文字列を数字に変換
            </summary>
            <remarks>
            変換出来ない場合デフォルト値が設定される
            </remarks>
            <param name="src">変換元</param>
            <param name="defval">デフォルト値</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.String.ToString(System.Int32)">
            <summary>
            数字を文字列に変換
            </summary>
            <param name="src">変換元文字列</param>
            <returns>変換後データ</returns>
        </member>
        <member name="M:cklib.Util.String.ToString(System.Int32,System.String)">
            <summary>
            数字を文字列に変換
            </summary>
            <param name="src">変換元文字列</param>
            <param name="format">書式指定</param>
            <returns>変換後文字列</returns>
        </member>
        <member name="M:cklib.Util.String.StringToBytes(System.String)">
            <summary>
            文字列をShiftJisのバイト配列に変換する
            </summary>
            <param name="src">変換元文字列</param>
            <returns>ShiftJIS文字列</returns>
        </member>
        <member name="M:cklib.Util.String.ByteToString(System.Byte[])">
            <summary>
            ShiftJisのバイト配列をstringに変換する
            </summary>
            <param name="src">変換元文字列</param>
            <returns>ShiftJIS文字列</returns>
        </member>
        <member name="M:cklib.Util.String.ToBool(System.String,System.Nullable{System.Boolean})">
            <summary>
            文字列を指定したbool型に変換
            </summary>
            <remarks>
            デフォルト値が指定されない場合、
            変換失敗で例外を発生する<see cref="M:System.Int32.Parse(System.String)"/>
            </remarks>
            <param name="src">変換元</param>
            <param name="defval">デフォルト値</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.String.To``1(System.String,System.Nullable{``0})">
            <summary>
            文字列を指定した列挙型に変換
            </summary>
            <remarks>
            デフォルト値が指定されない場合、
            変換失敗で例外を発生する<see cref="M:System.Int32.Parse(System.String)"/>
            </remarks>
            <param name="src">変換元</param>
            <returns>変換結果</returns>
        </member>
        <member name="M:cklib.Util.String.HexDumpStr(System.Byte[])">
            <summary>
            バイト配列をHexダンプし文字列に変換
            </summary>
            <param name="src">変換元文字列</param>
            <returns>変換後文字列</returns>
        </member>
        <member name="M:cklib.Util.String.HexDumpStr(System.Byte[],System.Int32)">
            <summary>
            バイト配列をHexダンプし文字列に変換
            </summary>
            <param name="src">変換元文字列</param>
            <param name="length">変換元有効文字列長</param>
            <returns>変換後文字列</returns>
        </member>
        <member name="M:cklib.Util.String.HexDumpList(System.Byte[])">
            <summary>
            バイト配列を横１６バイト毎のHexダンプリストに変換
            </summary>
            <param name="src">変換元文字列</param>
            <returns>変換後文字列</returns>
        </member>
        <member name="M:cklib.Util.String.HexDumpList(System.Byte[],System.Int32)">
            <summary>
            バイト配列を横１６バイト毎のHexダンプリストに変換
            </summary>
            <param name="src">変換元文字列</param>
            <param name="length">変換元有効文字列長</param>
            <returns>変換後文字列</returns>
        </member>
        <member name="M:cklib.Util.String.HexDumpStr(System.Byte)">
            <summary>
            byte型データをHexダンプする
            </summary>
            <param name="src">変換元文字列</param>
            <returns>変換後文字列</returns>
        </member>
        <member name="F:cklib.Util.String.HEXTbl">
            <summary>
            HEXダンプ変換用文字列テーブル
            </summary>
        </member>
        <member name="M:cklib.Util.String.ParseHexDump(System.String)">
            <summary>
            HEXダンプをbyte配列へ変換する
            </summary>
            <param name="src">HEXダンプ</param>
            <returns>変換されたbyte配列</returns>
        </member>
        <member name="M:cklib.Util.String.SqlStrLapping(System.String)">
            <summary>
            文字列をSqlQueryに使用できるように変換
            </summary>
            <param name="src">変換元文字列</param>
            <returns>変換後文字列</returns>
        </member>
        <member name="M:cklib.Util.String.SqlDateLapping(System.String)">
            <summary>
            日付文字列をSqlQueryに使用できるように変換
            </summary>
            <param name="src">変換元文字列</param>
            <returns>変換後文字列</returns>
        </member>
        <member name="M:cklib.Util.String.NumericCheck(System.String)">
            <summary>
            ニューメリックチェック
            </summary>
            <param name="str">チェック文字列</param>
            <returns>数字のみならtrueを返す</returns>
        </member>
        <member name="M:cklib.Util.String.NumericCheckModify(System.String)">
            <summary>
            ニューメリックチェック＆カット
            </summary>
            <param name="str">チェック文字列</param>
            <returns>数字以外を除外した文字列</returns>
        </member>
        <member name="F:cklib.Util.String.RFC822_MonthString">
            <summary>
            月を示す文字列(RFC822)
            </summary>
        </member>
        <member name="M:cklib.Util.String.sprintf(System.Text.StringBuilder,System.String,)">
            <summary>
            sprintf CRTライブラリ呼び出し
            </summary>
            <remarks>
            MSCRTライブラリsprintfを呼び出します。詳細はsprintfそ参照
            </remarks>
            <param name="buffer">編集後格納バッファ</param>
            <param name="format">printf互換編集文字列</param>
            <returns>結果文字列長</returns>
        </member>
        <member name="M:cklib.Util.String.swprintf(System.Text.StringBuilder,System.String,)">
            <summary>
            swprintf CRTライブラリ呼び出し
            </summary>
            <remarks>
            MSCRTライブラリswprintfを呼び出します。詳細はsprintfそ参照
            </remarks>
            <param name="buffer">編集後格納バッファ</param>
            <param name="format">printf互換編集文字列</param>
            <returns>結果文字列長</returns>
        </member>
        <member name="T:cklib.Util.SystemInformation">
            <summary>
            システムユーティリティ
            </summary>
        </member>
        <member name="P:cklib.Util.SystemInformation.Is64BitProcess">
            <summary>
            64Bitプロセスか判別する
            </summary>
        </member>
        <member name="T:cklib.Util.TickCountTimeoutControlList`1">
            <summary>
            時計時刻によるタイムアウト監視
            </summary>
            <typeparam name="TKEY">監視対象オブジェクトclass</typeparam>
        </member>
        <member name="M:cklib.Util.TickCountTimeoutControlList`1.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="P:cklib.Util.TickCountTimeoutControlList`1.UnlimitTime">
            <summary>
            待ち時間最大値の計算の為に使用する
            </summary>
        </member>
        <member name="M:cklib.Util.TickCountTimeoutControlList`1.CalcWaitTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            待ち時間の計算
            </summary>
            <param name="target">タイムアウト時間</param>
            <param name="nw">現在時間</param>
            <param name="prewt">待ち時間</param>
            <returns>待ち時間</returns>
        </member>
        <member name="M:cklib.Util.TickCountTimeoutControlList`1.CalcTargetTime(System.Int32,System.Int32)">
            <summary>
            タイムアウト時間の計算
            </summary>
            <param name="wt">待ち時間</param>
            <param name="nw">現在時間</param>
            <returns>タイムアウト時間</returns>
        </member>
        <member name="M:cklib.Util.TickCountTimeoutControlList`1.IsTimeout(System.Int32,System.Int32)">
            <summary>
            タイムアウトしているか判定する
            </summary>
            <param name="target">タイムアウト時間</param>
            <param name="nw">現在時間</param>
            <returns>タイムアウト時true</returns>
        </member>
        <member name="M:cklib.Util.TickCountTimeoutControlList`1.GetNow">
            <summary>
            現在時間の取得
            </summary>
            <returns>現在時間</returns>
        </member>
        <member name="P:cklib.Util.TickCountTimeoutControlList`1.Comarer">
            <summary>
            時刻を比較するDelegateインスタンスを取得するCompareメソッドと同一の仕様
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.TickCountTimeoutControlList`1.GetNextIntervalTime(cklib.Util.TimeoutControlList{`0,System.Int32,System.Int32}.TimeoutControl_Information)">
            <summary>
            インターバルタイマーの次回タイマーを取得する
            </summary>
            <param name="info">前回タイマー情報</param>
            <returns>次回タイマー情報</returns>
        </member>
        <member name="T:cklib.Util.TimeComparerHandler`1">
            <summary>
            イベントハンドラ定義
            </summary>
        </member>
        <member name="T:cklib.Util.TimeoutControl_TimerResetMode">
            <summary>
            タイマー再設定モード
            </summary>
        </member>
        <member name="F:cklib.Util.TimeoutControl_TimerResetMode.Update">
            <summary>
            常に置き換え
            </summary>
        </member>
        <member name="F:cklib.Util.TimeoutControl_TimerResetMode.UpdateBefore">
            <summary>
            現在の設定時間より早い設定時間なら置き換え
            </summary>
        </member>
        <member name="F:cklib.Util.TimeoutControl_TimerResetMode.UpdateAfter">
            <summary>
            現在の設定時間より遅い設定時間なら置き換え
            </summary>
        </member>
        <member name="T:cklib.Util.TimeoutControlList`3">
            <summary>
            タイムアウト監視用クラス
            </summary>
            <typeparam name="TKEY">監視対象オブジェクトclass</typeparam>
            <typeparam name="TIME">タイムアウト時刻型</typeparam>
            <typeparam name="TIMESPAN">待機時間の等の経過時間型</typeparam>
        </member>
        <member name="T:cklib.Util.TimeoutControlList`3.TimeoutControl_Information">
            <summary>
            タイマー情報
            </summary>
        </member>
        <member name="F:cklib.Util.TimeoutControlList`3.TimeoutControl_Information.Key">
            <summary>
            タイマーキー
            </summary>
        </member>
        <member name="F:cklib.Util.TimeoutControlList`3.TimeoutControl_Information.StartTime">
            <summary>
            監視開始時刻
            </summary>
        </member>
        <member name="F:cklib.Util.TimeoutControlList`3.TimeoutControl_Information.TargetTime">
            <summary>
            タイムアウト時刻
            </summary>
        </member>
        <member name="F:cklib.Util.TimeoutControlList`3.TimeoutControl_Information.TimeSpan">
            <summary>
            タイムアウト時間
            </summary>
        </member>
        <member name="F:cklib.Util.TimeoutControlList`3.TimeoutControl_Information.Interval">
            <summary>
            インターバルモード
            </summary>
        </member>
        <member name="F:cklib.Util.TimeoutControlList`3.TimeoutControl_Information.Context">
            <summary>
            コンテキスト
            </summary>
        </member>
        <member name="F:cklib.Util.TimeoutControlList`3.TargetList">
            <summary>
            監視対象一覧
            </summary>
        </member>
        <member name="F:cklib.Util.TimeoutControlList`3.CheckList">
            <summary>
            タイムアウトチェックテーブル
            </summary>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="P:cklib.Util.TimeoutControlList`3.Count">
             <summary>
            タイムアウト監視対象数の取得
             </summary>
             <returns>登録されているタイムアウト監視対象の総数</returns>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.GetTargetCount">
             <summary>
            タイムアウト監視対象数の取得
             </summary>
             <returns>登録されているタイムアウト監視対象の総数</returns>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.GetTargetTimeCount">
            <summary>
            タイムアウト監視時間登録数の取得
            </summary>
            <returns>登録されているタイムアウト時間の総数</returns>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.GetFirst">
            <summary>
            先頭のアイテムを取得
            </summary>
            <returns>先頭のアイテム</returns>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.GetWaitTime(`1,`2)">
            <summary>
            タイムアウトチェックリストからタイムアウト対象を検索する
            </summary>
            <param name="nw">現在時間</param>
            <param name="wt">現在の最小待ち時間</param>
            <returns>算出された待ち時間</returns>
        </member>
        <member name="P:cklib.Util.TimeoutControlList`3.UnlimitTime">
            <summary>
            待ち時間最大値の計算の為に使用する
            </summary>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.CalcWaitTime(`1,`1,`2)">
            <summary>
            待ち時間の計算
            </summary>
            <param name="target">タイムアウト時間</param>
            <param name="nw">現在時間</param>
            <param name="prewt">待ち時間</param>
            <returns>待ち時間</returns>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.CalcTargetTime(`2,`1)">
            <summary>
            タイムアウト時間の計算
            </summary>
            <param name="wt">待ち時間</param>
            <param name="nw">現在時間</param>
            <returns>タイムアウト時間</returns>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.IsTimeout(`1,`1)">
            <summary>
            タイムアウトしているか判定する
            </summary>
            <param name="target">タイムアウト時間</param>
            <param name="nw">現在時間</param>
            <returns>タイムアウト時true</returns>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.GetNextIntervalTime(cklib.Util.TimeoutControlList{`0,`1,`2}.TimeoutControl_Information)">
            <summary>
            インターバルタイマーの次回タイマーを取得する
            </summary>
            <param name="info">前回タイマー情報</param>
            <returns>次回タイマー情報</returns>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.GetNow">
            <summary>
            現在時間の取得
            </summary>
            <returns>現在時間</returns>
        </member>
        <member name="P:cklib.Util.TimeoutControlList`3.Comarer">
            <summary>
            時刻を比較するDelegateインスタンスを取得するCompareメソッドと同一の仕様
            </summary>
            <returns></returns>
        </member>
        <member name="P:cklib.Util.TimeoutControlList`3.InhIntervalQueing">
            <summary>
            インターバルタイマー未実行分をキューイングし遅延してもすべて実行を行わず、
            最後の一過のみ実行する
            </summary>
        </member>
        <member name="P:cklib.Util.TimeoutControlList`3.TimeoutProcessAlwaysAllExcute">
            <summary>
             タイムアウト処理は常に全実行
            </summary>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.TimeoutProcess(`1,System.Action{`0})">
            <summary>
            タイムアウトチェックリストからタイムアウト対象を検索する
            </summary>
            <param name="nw">現在時間</param>
            <param name="action">タイムアウト処理</param>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.TimeoutProcess(`1,cklib.Framework.Func{`0,System.Boolean})">
            <summary>
            タイムアウトチェックリストからタイムアウト対象を検索する
            </summary>
            <param name="nw">現在時間</param>
            <param name="func">タイムアウト処理</param>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.TimeoutProcess(`1,cklib.Framework.Func{`0,cklib.Util.TimeoutControlList{`0,`1,`2}.TimeoutControl_Information,System.Boolean})">
            <summary>
            タイムアウトチェックリストからタイムアウト対象を検索する
            </summary>
            <param name="nw">現在時間</param>
            <param name="func">タイムアウト処理</param>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.HasTimeout(`1)">
            <summary>
            タイムアウトチェックリストからタイムアウト対象を検索する
            </summary>
            <param name="nw">現在時間</param>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.GetTimeoutFirst(`1)">
            <summary>
            タイムアウトチェックリストからタイムアウト対象を検索する
            </summary>
            <param name="nw">現在時間</param>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.ContainsKey(`0)">
            <summary>
            Keyの検索
            </summary>
            <param name="key">対象情報キー</param>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.GetValue(`0)">
            <summary>
            Keyの検索
            </summary>
            <param name="key">対象情報キー</param>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.AppendTimeout(`0,`1,System.Object,cklib.Util.TimeoutControl_TimerResetMode)">
            <summary>
            ターゲット追加
            </summary>
            <param name="key">対象情報キー</param>
            <param name="tm">タイムアウト時間</param>
            <param name="Context">タイマーコンテキスト</param>
            <param name="mode">タイマー置き換え時の指定方法法</param>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.Append(`0,`2,System.Boolean,System.Object,cklib.Util.TimeoutControl_TimerResetMode)">
            <summary>
            ターゲット追加
            </summary>
            <param name="key">対象情報キー</param>
            <param name="timespan">タイマー時間</param>
            <param name="interval">インターバルタイマー</param>
            <param name="Context">タイマーコンテキスト</param>
            <param name="mode">タイマー置き換え時の指定方法法</param>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.Append(`0,`2,System.Object,cklib.Util.TimeoutControl_TimerResetMode)">
            <summary>
            ターゲット追加
            </summary>
            <param name="key">対象情報キー</param>
            <param name="timespan">タイマー時間</param>
            <param name="Context">タイマーコンテキスト</param>
            <param name="mode">タイマー置き換え時の指定方法法</param>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.Append(cklib.Util.TimeoutControlList{`0,`1,`2}.TimeoutControl_Information,cklib.Util.TimeoutControl_TimerResetMode)">
            <summary>
            ターゲット追加
            </summary>
            <param name="info">対象情報</param>
            <param name="mode">タイマー置き換え時の指定方法法</param>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.Remove(`0)">
            <summary>
            ターゲット削除
            </summary>
            <param name="key">対象情報キー</param>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.PeekFirst">
            <summary>
            先頭を取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.RemoveFirst">
            <summary>
            先頭を削除して取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.Clear">
            <summary>
            リストをクリアする
            </summary>
        </member>
        <member name="M:cklib.Util.TimeoutControlList`3.GetTimerList">
            <summary>
            タイマー一覧
            </summary>
            <returns></returns>
        </member>
        <member name="T:cklib.Util.Win32ErrorException">
            <summary>
            Win32エラーラップするException
            </summary>
        </member>
        <member name="F:cklib.Util.Win32ErrorException.ErrorCode">
            <summary>
            APIリザルトコード
            </summary>
        </member>
        <member name="M:cklib.Util.Win32ErrorException.#ctor">
            <summary>
            デフォルトコンストラクタ
            </summary>
        </member>
        <member name="M:cklib.Util.Win32ErrorException.#ctor(System.UInt32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="ErrorCode">Win32エラーコード</param>
        </member>
        <member name="M:cklib.Util.Win32ErrorException.#ctor(System.UInt32,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="ErrorCode">Win32エラーコード</param>
            <param name="Msg">メッセージ</param>
        </member>
        <member name="M:cklib.Util.Win32ErrorException.#ctor(System.UInt32,System.String,System.Exception)">
            <summary>
            コンストラクタ
            </summary>
            <param name="ErrorCode">Win32エラーコード</param>
            <param name="Msg">メッセージ</param>
            <param name="exp">子エクセプション</param>
        </member>
        <member name="M:cklib.Util.Win32ErrorException.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="Msg">メッセージ</param>
        </member>
        <member name="M:cklib.Util.Win32ErrorException.#ctor(System.String,System.Exception)">
            <summary>
            コンストラクタ
            </summary>
            <param name="Msg">メッセージ</param>
            <param name="exp">子エクセプション</param>
        </member>
        <member name="P:cklib.Util.Win32ErrorException.Message">
            <summary>
            メッセージ取得のオーバーロード
            </summary>
        </member>
        <member name="T:cklib.Util.Window">
            <summary>
            Window操作関連ユーティリテイ
            </summary>
        </member>
        <member name="M:cklib.Util.Window.SendMessage(System.IntPtr,System.UInt32,System.UInt64,System.UInt32)">
            <summary>
            SendMessage
            </summary>
            <param name="hWnd">ウインドウハンドル</param>
            <param name="Msg">メッセージID</param>
            <param name="wParam">WPARAM</param>
            <param name="lParam">LPARAM</param>
            <returns>処理結果</returns>
        </member>
        <member name="M:cklib.Util.Window.PostMessage(System.IntPtr,System.UInt32,System.UInt64,System.UInt32)">
            <summary>
            PostMessage
            </summary>
            <param name="hWnd">ウインドウハンドル</param>
            <param name="Msg">メッセージID</param>
            <param name="wParam">WPARAM</param>
            <param name="lParam">LPARAM</param>
            <returns>処理結果</returns>
        </member>
        <member name="M:cklib.Util.Window.PostThreadMessage(System.Int32,System.UInt32,System.UInt64,System.UInt32)">
            <summary>
            PostThreadMessage
            </summary>
            <param name="ThreadID">スレッドＩＤ</param>
            <param name="Msg">メッセージID</param>
            <param name="wParam">WPARAM</param>
            <param name="lParam">LPARAM</param>
            <returns>処理結果</returns>
        </member>
        <member name="M:cklib.Util.Window.GetMessage(System.IntPtr@,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            GetMessage
            </summary>
            <param name="lpMsg"></param>
            <param name="hWnd"></param>
            <param name="wMsgFilterMin"></param>
            <param name="wMsgFilterMax"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Window.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
            <summary>
            FindWindowEx
            </summary>
            <param name="hWndParent"></param>
            <param name="hWndChildAfter"></param>
            <param name="lpszClass"></param>
            <param name="lpszWindow"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Window.BringWindowToTop(System.IntPtr)">
            <summary>
            BringWindowToTop
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Window.SetForegroundWindow(System.IntPtr)">
            <summary>
            SetForegroundWindow
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Window.SetActiveWindow(System.IntPtr)">
            <summary>
            SetActiveWindow
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Window.SetFocus(System.IntPtr)">
            <summary>
            SetFocus
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Window.GetTopWindow(System.IntPtr)">
            <summary>
            GetTopWindow
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Window.GetForegroundWindow">
            <summary>
            GetForegroundWindow
            </summary>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Window.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            SetWindowPos
            </summary>
            <param name="hWnd">ウィンドウのハンドル</param>
            <param name="hWndInsertAfter">配置順序のハンドル</param>
            <param name="x">横方向の位置</param>
            <param name="y">縦方向の位置</param>
            <param name="cx">幅</param>
            <param name="cy">高さ</param>
            <param name="uFlags">ウィンドウ位置のオプション</param>
            <returns></returns>
        </member>
        <member name="T:cklib.Util.Window.SetWindowPos_uFlags">
            <summary>
            SetWindowPos uFlags値
            </summary>
        </member>
        <member name="F:cklib.Util.Window.SetWindowPos_uFlags.SWP_NOSIZE">
            <summary>
            サイズ変更をしない
            </summary>
        </member>
        <member name="F:cklib.Util.Window.SetWindowPos_uFlags.SWP_NOMOVE">
            <summary>
            表示位置を変更しない
            </summary>
        </member>
        <member name="F:cklib.Util.Window.SetWindowPos_uFlags.SWP_NOZORDER">
            <summary>
            Zオーダーを変更しない
            </summary>
        </member>
        <member name="F:cklib.Util.Window.SetWindowPos_uFlags.SWP_NOREDRAW">
            <summary>
            再描画を行わない
            </summary>
        </member>
        <member name="F:cklib.Util.Window.SetWindowPos_uFlags.SWP_NOACTIVATE">
            <summary>
            アクティブ化しない
            </summary>
        </member>
        <member name="F:cklib.Util.Window.SetWindowPos_uFlags.SWP_FRAMECHANGED">
            <summary>
            新しいフレームスタイルの設定を適用
            </summary>
        </member>
        <member name="F:cklib.Util.Window.SetWindowPos_uFlags.SWP_SHOWWINDOW">
            <summary>
            ウィンドウ表示
            </summary>
        </member>
        <member name="F:cklib.Util.Window.SetWindowPos_uFlags.SWP_HIDEWINDOW">
            <summary>
            ウィンドウ非表示
            </summary>
        </member>
        <member name="F:cklib.Util.Window.SetWindowPos_uFlags.SWP_NOCOPYBITS">
            <summary>
            クライアント領域の無効化
            </summary>
        </member>
        <member name="F:cklib.Util.Window.SetWindowPos_uFlags.SWP_NOOWNERZORDER">
            <summary>
            OwnerウィンドウのZオーダーを変更しない
            </summary>
        </member>
        <member name="F:cklib.Util.Window.SetWindowPos_uFlags.SWP_NOSENDCHANGING">
            <summary>
            WM_WINDOWPOSCHANGINGの送信を抑止
            </summary>
        </member>
        <member name="F:cklib.Util.Window.SetWindowPos_uFlags.SWP_DRAWFRAME">
            <summary>
            新しいフレームスタイルの設定を適用
            </summary>
        </member>
        <member name="F:cklib.Util.Window.SetWindowPos_uFlags.SWP_NOREPOSITION">
            <summary>
            OwnerウィンドウのZオーダーを変更しない
            </summary>
        </member>
        <member name="F:cklib.Util.Window.SetWindowPos_uFlags.SWP_DEFERERASE">
            <summary>
            ウィンドウを囲む枠（ ウィンドウクラスの記述部分で定義されている）を描画します。
            </summary>
        </member>
        <member name="F:cklib.Util.Window.SetWindowPos_uFlags.SWP_ASYNCWINDOWPOS">
            <summary>
            この関数を呼び出したスレッドとウィンドウを所有するスレッドが異なる入力キューに関連付けられている場合、
            ウィンドウを所有するスレッドへ要求が送られます。こうすると、要求を受け取ったスレッドが要求を処理している間も、
            関数を呼び出したスレッドの実行が止まってしまうことはありません。
            </summary>
        </member>
        <member name="T:cklib.Util.Window.SetWindowPos_hWndInsertAfterValue">
            <summary>
            SetWindowPos hWndInsertAfterValue指定値
            </summary>
        </member>
        <member name="F:cklib.Util.Window.SetWindowPos_hWndInsertAfterValue.HWND_TOP">
            <summary>
            ウィンドウを Z オーダーの先頭に置きます。
            </summary>
        </member>
        <member name="F:cklib.Util.Window.SetWindowPos_hWndInsertAfterValue.HWND_BOTTOM">
            <summary>
            ウィンドウを Z オーダーの最後に置きます。
            </summary>
        </member>
        <member name="F:cklib.Util.Window.SetWindowPos_hWndInsertAfterValue.HWND_TOPMOST">
            <summary>
            ウィンドウを最前面ウィンドウ以外のすべてのウィンドウの前
            </summary>
        </member>
        <member name="F:cklib.Util.Window.SetWindowPos_hWndInsertAfterValue.HWND_NOTOPMOST">
            <summary>
            ウィンドウを最前面ウィンドウ以外のすべてのウィンドウの前
            </summary>
        </member>
        <member name="M:cklib.Util.Window.EnableWindow(System.IntPtr,System.Boolean)">
            <summary>
            ウィンドウのEnable/Disable切替
            </summary>
            <param name="hWnd"></param>
            <param name="bEnable"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Window.IsWindowEnabled(System.IntPtr)">
            <summary>
            現在ウィンドウEnableか取得する
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Window.IsWindow(System.IntPtr)">
            <summary>
            IsWindow HWNDの有効性判定
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Window.LockSetForegroundWindow(cklib.Util.Window.LockSetForegroundWindow_uLockCode)">
            <summary>
            LockSetForegroundWindowフォアグラウンド移動の抑止
            </summary>
            <param name="uLockCode"></param>
            <returns></returns>
        </member>
        <member name="T:cklib.Util.Window.LockSetForegroundWindow_uLockCode">
            <summary>
            LockSetForegroundWindow uLockCode値
            </summary>
        </member>
        <member name="F:cklib.Util.Window.LockSetForegroundWindow_uLockCode.LSFW_LOCK">
            <summary>
            フォアグラウンド抑止
            </summary>
        </member>
        <member name="F:cklib.Util.Window.LockSetForegroundWindow_uLockCode.LSFW_UNLOCK">
            <summary>
            フォアグラウンド抑止解除
            </summary>
        </member>
        <member name="M:cklib.Util.Window.GetWindowLong(System.IntPtr,System.Int32)">
            <summary>;
            ウィンドウパラメータの変更
            </summary>
            <param name="hWnd"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Window.SetWindowLong(System.IntPtr,System.Int32,System.UInt32)">
            <summary>
            ウィンドウパラメータの設定
            </summary>
            <param name="hWnd"></param>
            <param name="index"></param>
            <param name="unValue"></param>
            <returns></returns>
        </member>
        <member name="T:cklib.Util.Window.GetWindowLong_Index">
            <summary>
            ウィンドウパラメータの変更指定
            </summary>
        </member>
        <member name="F:cklib.Util.Window.GetWindowLong_Index.GWL_WINDPROC">
            <summary>
            WindProcへのポインタ
            </summary>
        </member>
        <member name="F:cklib.Util.Window.GetWindowLong_Index.GWL_HINSTANCE">
            <summary>
            HINSTANCE
            </summary>
        </member>
        <member name="F:cklib.Util.Window.GetWindowLong_Index.GWL_HWNDPARENT">
            <summary>
            親ウィンドウのHWND
            </summary>
        </member>
        <member name="F:cklib.Util.Window.GetWindowLong_Index.GWL_STYLE">
            <summary>
            ウィンドウスタイル
            </summary>
        </member>
        <member name="F:cklib.Util.Window.GetWindowLong_Index.GWL_EXSTYLE">
            <summary>
            拡張ウィンドウスタイル
            </summary>
        </member>
        <member name="F:cklib.Util.Window.GetWindowLong_Index.GWL_USERDATA">
            <summary>
            ユーザーデータ
            </summary>
        </member>
        <member name="F:cklib.Util.Window.GetWindowLong_Index.GWL_ID">
            <summary>
            ウィンドウID
            </summary>
        </member>
        <member name="M:cklib.Util.Window.IsWindowVisible(System.IntPtr)">
            <summary>
            IsWindowVisible
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:cklib.Util.Window.SetActivate(System.Windows.Forms.Form)">
            <summary>
            指定したFormのウインドウをアクティブにする
            </summary>
            <remarks>
            指定したFormのウインドウをアクティブにする
            </remarks>
            <param name="form">アクティブにするForm</param>
        </member>
        <member name="M:cklib.Util.Window.SetActivate(System.IntPtr)">
            <summary>
            指定したウインドウハンドルのウインドウをアクティブにする
            </summary>
            <remarks>
            指定したウインドウハンドルのウインドウをアクティブにする
            </remarks>
            <param name="hwnd">ウインドウハンドル</param>
        </member>
    </members>
</doc>
